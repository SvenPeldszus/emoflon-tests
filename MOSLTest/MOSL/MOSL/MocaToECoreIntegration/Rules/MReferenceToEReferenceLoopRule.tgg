rule MReferenceToEReferenceLoopRule {
	source {
		classNode : Node {
			classNode.name == "EClass"
			
			-children-> referencesNode
			-attribute-> typeClassGuid
		}
		
		typeClassGuid : Attribute {
			typeClassGuid.name == "guid"
		}
				
		
		referencesNode : Node {
			referencesNode.name == "references"
			
			++ -children-> reference
		}
		
		++ reference : Node {
			reference.name := "EReference"
			
			++ -attribute-> referenceName
			++ -attribute-> referenceType
			++ -attribute-> referenceGuid
			++ -attribute-> lowerBound
			++ -attribute-> upperBound
			++ -attribute-> containment
		}
		
		++ referenceName : Attribute {
			referenceName.name := "name"
		}
		
		++ referenceType : Attribute {
			referenceType.name := "typeGuid"
		}
		
		++ referenceGuid : Attribute {
			referenceGuid.name := "guid"
		}
		
		++ lowerBound : Attribute {
			lowerBound.name := "lowerBound"
		}
		++ upperBound : Attribute {
			upperBound.name := "upperBound"
		}
		++ containment : Attribute {
			containment.name := "containment"
		}
	}
	
	correspondence {
		classNode <- mClassToEclass : MClassToEClass -> eclass
		++ reference <- mReferenceToEReference : MReferenceToEReference -> ereference 
	}
	
	target {
		eclass : EClass {
			++ -eStructuralFeatures-> ereference
		}
		
		++ ereference : EReference {
			++ -eType-> eclass
			++ -eGenericType-> egType
		}
		
		++ egType : EGenericType {
			++ -eClassifier-> eclass
		}
		
	}
	
	constraints {[
		eq(referenceName.value, ereference.name)
		eq(referenceType.value, typeClassGuid.value)
		stringToNumber(lowerBound.value, ereference.lowerBound);
		stringToNumber(upperBound.value, ereference.upperBound);
		stringToBoolean[BB,BF,FB](String, boolean)
		stringToBoolean(containment.value, ereference.containment);
		generateGuid[B,F](String)
		generateGuid(referenceGuid.value)
	]}
}