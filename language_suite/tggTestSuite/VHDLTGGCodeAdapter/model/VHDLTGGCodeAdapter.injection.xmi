<?xml version="1.0" encoding="ASCII"?>
<sdmUtil:CompilerInjection xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:sdmUtil="platform:/plugin/SDMLanguage/model/SDMLanguage.ecore#//sdmUtil">
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_gateName_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;gateName.name&quot;, true, csp);&#xD;&#xA;var_gateName_name.setValue(gateName.getName());&#xD;&#xA;var_gateName_name.setType(&quot;String&quot;);&#xD;&#xA;Variable var_entityName_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;entityName.name&quot;, true, csp);&#xD;&#xA;var_entityName_name.setValue(entityName.getName());&#xD;&#xA;var_entityName_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_gateName_name,var_entityName_name);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/VHDLTGGCodeAdapter/model/VHDLTGGCodeAdapter.ecore#//Rules/Entity2CompositeBlock/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;entity&quot;, entity);&#xA;match.registerObject(&quot;entityName&quot;, entityName);&#xA;match.registerObject(&quot;file&quot;, file);&#xA;match.registerObject(&quot;gate&quot;, gate);&#xA;match.registerObject(&quot;gateName&quot;, gateName);&#xA;match.registerObject(&quot;vhdl&quot;, vhdl);&#xA;">
    <eOperation href="platform:/plugin/VHDLTGGCodeAdapter/model/VHDLTGGCodeAdapter.ecore#//Rules/Entity2CompositeBlock/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/VHDLTGGCodeAdapter/model/VHDLTGGCodeAdapter.ecore#//Rules/Entity2CompositeBlock/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_entityName_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;entityName.name&quot;, true, csp);&#xD;&#xA;var_entityName_name.setValue(entityName.getName());&#xD;&#xA;var_entityName_name.setType(&quot;String&quot;);&#xD;&#xA;Variable var_gateName_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;gateName.name&quot;, true, csp);&#xD;&#xA;var_gateName_name.setValue(gateName.getName());&#xD;&#xA;var_gateName_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_composite_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;composite.name&quot;, csp);&#xD;&#xA;var_composite_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();Eq eq_0 = new Eq();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;csp.getConstraints().add(eq_0);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_entityName_name,var_composite_name);&#xD;&#xA;eq_0.setRuleName(&quot;&quot;);&#xD;&#xA;eq_0.solve(var_gateName_name,var_composite_name);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;entity&quot;,entity);&#xD;&#xA;isApplicableMatch.registerObject(&quot;entityName&quot;,entityName);&#xD;&#xA;isApplicableMatch.registerObject(&quot;file2spec&quot;,file2spec);&#xD;&#xA;isApplicableMatch.registerObject(&quot;file&quot;,file);&#xD;&#xA;isApplicableMatch.registerObject(&quot;gate&quot;,gate);&#xD;&#xA;isApplicableMatch.registerObject(&quot;gateName&quot;,gateName);&#xD;&#xA;isApplicableMatch.registerObject(&quot;spec&quot;,spec);&#xD;&#xA;isApplicableMatch.registerObject(&quot;vhdl&quot;,vhdl);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/VHDLTGGCodeAdapter/model/VHDLTGGCodeAdapter.ecore#//Rules/Entity2CompositeBlock/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/VHDLTGGCodeAdapter/model/VHDLTGGCodeAdapter.ecore#//Rules/Entity2CompositeBlock/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;composite&quot;, composite);&#xA;ruleresult.registerObject(&quot;entity2composite&quot;, entity2composite);&#xA;ruleresult.registerObject(&quot;entity&quot;, entity);&#xA;ruleresult.registerObject(&quot;entityName&quot;, entityName);&#xA;ruleresult.registerObject(&quot;file2spec&quot;, file2spec);&#xA;ruleresult.registerObject(&quot;file&quot;, file);&#xA;ruleresult.registerObject(&quot;gate2composite&quot;, gate2composite);&#xA;ruleresult.registerObject(&quot;gate&quot;, gate);&#xA;ruleresult.registerObject(&quot;gateName&quot;, gateName);&#xA;ruleresult.registerObject(&quot;spec&quot;, spec);&#xA;ruleresult.registerObject(&quot;vhdl&quot;, vhdl);&#xA;">
    <eOperation href="platform:/plugin/VHDLTGGCodeAdapter/model/VHDLTGGCodeAdapter.ecore#//Rules/Entity2CompositeBlock/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;entity&quot;).eClass().getInstanceClassName().equals(&quot;MocaTree.Node&quot;) &amp;&amp; match.getObject(&quot;entityName&quot;).eClass().getInstanceClassName().equals(&quot;MocaTree.Node&quot;) &amp;&amp; match.getObject(&quot;gate&quot;).eClass().getInstanceClassName().equals(&quot;MocaTree.Node&quot;) &amp;&amp; match.getObject(&quot;gateName&quot;).eClass().getInstanceClassName().equals(&quot;MocaTree.Node&quot;);">
    <eOperation href="platform:/plugin/VHDLTGGCodeAdapter/model/VHDLTGGCodeAdapter.ecore#//Rules/Entity2CompositeBlock/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/VHDLTGGCodeAdapter/model/VHDLTGGCodeAdapter.ecore#//Rules/Entity2CompositeBlock/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;composite&quot;, composite);&#xA;match.registerObject(&quot;spec&quot;, spec);&#xA;">
    <eOperation href="platform:/plugin/VHDLTGGCodeAdapter/model/VHDLTGGCodeAdapter.ecore#//Rules/Entity2CompositeBlock/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/VHDLTGGCodeAdapter/model/VHDLTGGCodeAdapter.ecore#//Rules/Entity2CompositeBlock/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_composite_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;composite.name&quot;, true, csp);&#xD;&#xA;var_composite_name.setValue(composite.getName());&#xD;&#xA;var_composite_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_entityName_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;entityName.name&quot;, csp);&#xD;&#xA;var_entityName_name.setType(&quot;String&quot;);&#xD;&#xA;Variable var_gateName_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;gateName.name&quot;, csp);&#xD;&#xA;var_gateName_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();Eq eq_0 = new Eq();Eq eq_1 = new Eq();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;csp.getConstraints().add(eq_0);&#xD;&#xA;csp.getConstraints().add(eq_1);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_entityName_name,var_composite_name);&#xD;&#xA;eq_0.setRuleName(&quot;&quot;);&#xD;&#xA;eq_0.solve(var_gateName_name,var_composite_name);&#xD;&#xA;eq_1.setRuleName(&quot;&quot;);&#xD;&#xA;eq_1.solve(var_gateName_name,var_entityName_name);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;composite&quot;,composite);&#xD;&#xA;isApplicableMatch.registerObject(&quot;file2spec&quot;,file2spec);&#xD;&#xA;isApplicableMatch.registerObject(&quot;file&quot;,file);&#xD;&#xA;isApplicableMatch.registerObject(&quot;spec&quot;,spec);&#xD;&#xA;isApplicableMatch.registerObject(&quot;vhdl&quot;,vhdl);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/VHDLTGGCodeAdapter/model/VHDLTGGCodeAdapter.ecore#//Rules/Entity2CompositeBlock/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/VHDLTGGCodeAdapter/model/VHDLTGGCodeAdapter.ecore#//Rules/Entity2CompositeBlock/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;composite&quot;, composite);&#xA;ruleresult.registerObject(&quot;entity2composite&quot;, entity2composite);&#xA;ruleresult.registerObject(&quot;entity&quot;, entity);&#xA;ruleresult.registerObject(&quot;entityName&quot;, entityName);&#xA;ruleresult.registerObject(&quot;file2spec&quot;, file2spec);&#xA;ruleresult.registerObject(&quot;file&quot;, file);&#xA;ruleresult.registerObject(&quot;gate2composite&quot;, gate2composite);&#xA;ruleresult.registerObject(&quot;gate&quot;, gate);&#xA;ruleresult.registerObject(&quot;gateName&quot;, gateName);&#xA;ruleresult.registerObject(&quot;spec&quot;, spec);&#xA;ruleresult.registerObject(&quot;vhdl&quot;, vhdl);&#xA;">
    <eOperation href="platform:/plugin/VHDLTGGCodeAdapter/model/VHDLTGGCodeAdapter.ecore#//Rules/Entity2CompositeBlock/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;composite&quot;).eClass().equals(VHDLModel.VHDLModelPackage.eINSTANCE.getCompositeBlock());">
    <eOperation href="platform:/plugin/VHDLTGGCodeAdapter/model/VHDLTGGCodeAdapter.ecore#//Rules/Entity2CompositeBlock/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/VHDLTGGCodeAdapter/model/VHDLTGGCodeAdapter.ecore#//Rules/HandleInPort/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;entity&quot;, entity);&#xA;match.registerObject(&quot;portName&quot;, portName);&#xA;match.registerObject(&quot;portNode&quot;, portNode);&#xA;match.registerObject(&quot;typeNode&quot;, typeNode);&#xA;">
    <eOperation href="platform:/plugin/VHDLTGGCodeAdapter/model/VHDLTGGCodeAdapter.ecore#//Rules/HandleInPort/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/VHDLTGGCodeAdapter/model/VHDLTGGCodeAdapter.ecore#//Rules/HandleInPort/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_portName_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;portName.name&quot;, true, csp);&#xD;&#xA;var_portName_name.setValue(portName.getName());&#xD;&#xA;var_portName_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_port_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;port.name&quot;, csp);&#xD;&#xA;var_port_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_portName_name,var_port_name);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;composite&quot;,composite);&#xD;&#xA;isApplicableMatch.registerObject(&quot;entity2composite&quot;,entity2composite);&#xD;&#xA;isApplicableMatch.registerObject(&quot;entity&quot;,entity);&#xD;&#xA;isApplicableMatch.registerObject(&quot;portName&quot;,portName);&#xD;&#xA;isApplicableMatch.registerObject(&quot;portNode&quot;,portNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;typeNode&quot;,typeNode);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/VHDLTGGCodeAdapter/model/VHDLTGGCodeAdapter.ecore#//Rules/HandleInPort/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/VHDLTGGCodeAdapter/model/VHDLTGGCodeAdapter.ecore#//Rules/HandleInPort/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;composite&quot;, composite);&#xA;ruleresult.registerObject(&quot;entity2composite&quot;, entity2composite);&#xA;ruleresult.registerObject(&quot;entity&quot;, entity);&#xA;ruleresult.registerObject(&quot;node2inport&quot;, node2inport);&#xA;ruleresult.registerObject(&quot;port&quot;, port);&#xA;ruleresult.registerObject(&quot;portName&quot;, portName);&#xA;ruleresult.registerObject(&quot;portNode&quot;, portNode);&#xA;ruleresult.registerObject(&quot;typeNode&quot;, typeNode);&#xA;">
    <eOperation href="platform:/plugin/VHDLTGGCodeAdapter/model/VHDLTGGCodeAdapter.ecore#//Rules/HandleInPort/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;portName&quot;).eClass().getInstanceClassName().equals(&quot;MocaTree.Node&quot;) &amp;&amp; match.getObject(&quot;portNode&quot;).eClass().getInstanceClassName().equals(&quot;MocaTree.Node&quot;) &amp;&amp; match.getObject(&quot;typeNode&quot;).eClass().getInstanceClassName().equals(&quot;MocaTree.Node&quot;);">
    <eOperation href="platform:/plugin/VHDLTGGCodeAdapter/model/VHDLTGGCodeAdapter.ecore#//Rules/HandleInPort/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/VHDLTGGCodeAdapter/model/VHDLTGGCodeAdapter.ecore#//Rules/HandleInPort/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;composite&quot;, composite);&#xA;match.registerObject(&quot;port&quot;, port);&#xA;">
    <eOperation href="platform:/plugin/VHDLTGGCodeAdapter/model/VHDLTGGCodeAdapter.ecore#//Rules/HandleInPort/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/VHDLTGGCodeAdapter/model/VHDLTGGCodeAdapter.ecore#//Rules/HandleInPort/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_port_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;port.name&quot;, true, csp);&#xD;&#xA;var_port_name.setValue(port.getName());&#xD;&#xA;var_port_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_portName_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;portName.name&quot;, csp);&#xD;&#xA;var_portName_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_portName_name,var_port_name);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;composite&quot;,composite);&#xD;&#xA;isApplicableMatch.registerObject(&quot;entity2composite&quot;,entity2composite);&#xD;&#xA;isApplicableMatch.registerObject(&quot;entity&quot;,entity);&#xD;&#xA;isApplicableMatch.registerObject(&quot;port&quot;,port);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/VHDLTGGCodeAdapter/model/VHDLTGGCodeAdapter.ecore#//Rules/HandleInPort/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/VHDLTGGCodeAdapter/model/VHDLTGGCodeAdapter.ecore#//Rules/HandleInPort/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;composite&quot;, composite);&#xA;ruleresult.registerObject(&quot;entity2composite&quot;, entity2composite);&#xA;ruleresult.registerObject(&quot;entity&quot;, entity);&#xA;ruleresult.registerObject(&quot;node2inport&quot;, node2inport);&#xA;ruleresult.registerObject(&quot;port&quot;, port);&#xA;ruleresult.registerObject(&quot;portName&quot;, portName);&#xA;ruleresult.registerObject(&quot;portNode&quot;, portNode);&#xA;ruleresult.registerObject(&quot;typeNode&quot;, typeNode);&#xA;">
    <eOperation href="platform:/plugin/VHDLTGGCodeAdapter/model/VHDLTGGCodeAdapter.ecore#//Rules/HandleInPort/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;port&quot;).eClass().equals(VHDLModel.VHDLModelPackage.eINSTANCE.getInputPort());">
    <eOperation href="platform:/plugin/VHDLTGGCodeAdapter/model/VHDLTGGCodeAdapter.ecore#//Rules/HandleInPort/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/VHDLTGGCodeAdapter/model/VHDLTGGCodeAdapter.ecore#//Rules/File2VHDLSpec/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;file&quot;, file);&#xA;match.registerObject(&quot;vhdl&quot;, vhdl);&#xA;">
    <eOperation href="platform:/plugin/VHDLTGGCodeAdapter/model/VHDLTGGCodeAdapter.ecore#//Rules/File2VHDLSpec/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/VHDLTGGCodeAdapter/model/VHDLTGGCodeAdapter.ecore#//Rules/File2VHDLSpec/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xD;&#xA;literal0.setValue(&quot;.vhdl&quot;);&#xD;&#xA;literal0.setType(&quot;&quot;);&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_file_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;file.name&quot;, true, csp);&#xD;&#xA;var_file_name.setValue(file.getName());&#xD;&#xA;var_file_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_spec_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;spec.name&quot;, csp);&#xD;&#xA;var_spec_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;AddPrefix addPrefix = new AddPrefix();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(addPrefix);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;addPrefix.setRuleName(&quot;&quot;);&#xD;&#xA;addPrefix.solve(var_spec_name,literal0,var_file_name);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;file&quot;,file);&#xD;&#xA;isApplicableMatch.registerObject(&quot;vhdl&quot;,vhdl);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/VHDLTGGCodeAdapter/model/VHDLTGGCodeAdapter.ecore#//Rules/File2VHDLSpec/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/VHDLTGGCodeAdapter/model/VHDLTGGCodeAdapter.ecore#//Rules/File2VHDLSpec/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;file2spec&quot;, file2spec);&#xA;ruleresult.registerObject(&quot;file&quot;, file);&#xA;ruleresult.registerObject(&quot;spec&quot;, spec);&#xA;ruleresult.registerObject(&quot;vhdl&quot;, vhdl);&#xA;">
    <eOperation href="platform:/plugin/VHDLTGGCodeAdapter/model/VHDLTGGCodeAdapter.ecore#//Rules/File2VHDLSpec/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;file&quot;).eClass().getInstanceClassName().equals(&quot;MocaTree.File&quot;) &amp;&amp; match.getObject(&quot;vhdl&quot;).eClass().getInstanceClassName().equals(&quot;MocaTree.Node&quot;);">
    <eOperation href="platform:/plugin/VHDLTGGCodeAdapter/model/VHDLTGGCodeAdapter.ecore#//Rules/File2VHDLSpec/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/VHDLTGGCodeAdapter/model/VHDLTGGCodeAdapter.ecore#//Rules/File2VHDLSpec/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;spec&quot;, spec);&#xA;">
    <eOperation href="platform:/plugin/VHDLTGGCodeAdapter/model/VHDLTGGCodeAdapter.ecore#//Rules/File2VHDLSpec/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/VHDLTGGCodeAdapter/model/VHDLTGGCodeAdapter.ecore#//Rules/File2VHDLSpec/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xD;&#xA;literal0.setValue(&quot;.vhdl&quot;);&#xD;&#xA;literal0.setType(&quot;&quot;);&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_spec_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;spec.name&quot;, true, csp);&#xD;&#xA;var_spec_name.setValue(spec.getName());&#xD;&#xA;var_spec_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_file_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;file.name&quot;, csp);&#xD;&#xA;var_file_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;AddPrefix addPrefix = new AddPrefix();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(addPrefix);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;addPrefix.setRuleName(&quot;&quot;);&#xD;&#xA;addPrefix.solve(var_spec_name,literal0,var_file_name);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;spec&quot;,spec);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/VHDLTGGCodeAdapter/model/VHDLTGGCodeAdapter.ecore#//Rules/File2VHDLSpec/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/VHDLTGGCodeAdapter/model/VHDLTGGCodeAdapter.ecore#//Rules/File2VHDLSpec/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;file2spec&quot;, file2spec);&#xA;ruleresult.registerObject(&quot;file&quot;, file);&#xA;ruleresult.registerObject(&quot;spec&quot;, spec);&#xA;ruleresult.registerObject(&quot;vhdl&quot;, vhdl);&#xA;">
    <eOperation href="platform:/plugin/VHDLTGGCodeAdapter/model/VHDLTGGCodeAdapter.ecore#//Rules/File2VHDLSpec/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;spec&quot;).eClass().equals(VHDLModel.VHDLModelPackage.eINSTANCE.getVHDLSpecification());">
    <eOperation href="platform:/plugin/VHDLTGGCodeAdapter/model/VHDLTGGCodeAdapter.ecore#//Rules/File2VHDLSpec/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/VHDLTGGCodeAdapter/model/VHDLTGGCodeAdapter.ecore#//Rules/HandleOutPort/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;portNode&quot;, portNode);&#xA;match.registerObject(&quot;typeNode&quot;, typeNode);&#xA;match.registerObject(&quot;entity&quot;, entity);&#xA;match.registerObject(&quot;portName&quot;, portName);&#xA;">
    <eOperation href="platform:/plugin/VHDLTGGCodeAdapter/model/VHDLTGGCodeAdapter.ecore#//Rules/HandleOutPort/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/VHDLTGGCodeAdapter/model/VHDLTGGCodeAdapter.ecore#//Rules/HandleOutPort/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_portName_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;portName.name&quot;, true, csp);&#xD;&#xA;var_portName_name.setValue(portName.getName());&#xD;&#xA;var_portName_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_port_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;port.name&quot;, csp);&#xD;&#xA;var_port_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_portName_name,var_port_name);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;composite&quot;,composite);&#xD;&#xA;isApplicableMatch.registerObject(&quot;portNode&quot;,portNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;typeNode&quot;,typeNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;entity2composite&quot;,entity2composite);&#xD;&#xA;isApplicableMatch.registerObject(&quot;entity&quot;,entity);&#xD;&#xA;isApplicableMatch.registerObject(&quot;portName&quot;,portName);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/VHDLTGGCodeAdapter/model/VHDLTGGCodeAdapter.ecore#//Rules/HandleOutPort/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/VHDLTGGCodeAdapter/model/VHDLTGGCodeAdapter.ecore#//Rules/HandleOutPort/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;composite&quot;, composite);&#xA;ruleresult.registerObject(&quot;node2outport&quot;, node2outport);&#xA;ruleresult.registerObject(&quot;port&quot;, port);&#xA;ruleresult.registerObject(&quot;portNode&quot;, portNode);&#xA;ruleresult.registerObject(&quot;typeNode&quot;, typeNode);&#xA;ruleresult.registerObject(&quot;entity2composite&quot;, entity2composite);&#xA;ruleresult.registerObject(&quot;entity&quot;, entity);&#xA;ruleresult.registerObject(&quot;portName&quot;, portName);&#xA;">
    <eOperation href="platform:/plugin/VHDLTGGCodeAdapter/model/VHDLTGGCodeAdapter.ecore#//Rules/HandleOutPort/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;portNode&quot;).eClass().getInstanceClassName().equals(&quot;MocaTree.Node&quot;) &amp;&amp; match.getObject(&quot;typeNode&quot;).eClass().getInstanceClassName().equals(&quot;MocaTree.Node&quot;) &amp;&amp; match.getObject(&quot;portName&quot;).eClass().getInstanceClassName().equals(&quot;MocaTree.Node&quot;);">
    <eOperation href="platform:/plugin/VHDLTGGCodeAdapter/model/VHDLTGGCodeAdapter.ecore#//Rules/HandleOutPort/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/VHDLTGGCodeAdapter/model/VHDLTGGCodeAdapter.ecore#//Rules/HandleOutPort/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;composite&quot;, composite);&#xA;match.registerObject(&quot;port&quot;, port);&#xA;">
    <eOperation href="platform:/plugin/VHDLTGGCodeAdapter/model/VHDLTGGCodeAdapter.ecore#//Rules/HandleOutPort/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/VHDLTGGCodeAdapter/model/VHDLTGGCodeAdapter.ecore#//Rules/HandleOutPort/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_port_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;port.name&quot;, true, csp);&#xD;&#xA;var_port_name.setValue(port.getName());&#xD;&#xA;var_port_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_portName_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;portName.name&quot;, csp);&#xD;&#xA;var_portName_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_portName_name,var_port_name);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;composite&quot;,composite);&#xD;&#xA;isApplicableMatch.registerObject(&quot;port&quot;,port);&#xD;&#xA;isApplicableMatch.registerObject(&quot;entity2composite&quot;,entity2composite);&#xD;&#xA;isApplicableMatch.registerObject(&quot;entity&quot;,entity);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/VHDLTGGCodeAdapter/model/VHDLTGGCodeAdapter.ecore#//Rules/HandleOutPort/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/VHDLTGGCodeAdapter/model/VHDLTGGCodeAdapter.ecore#//Rules/HandleOutPort/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;composite&quot;, composite);&#xA;ruleresult.registerObject(&quot;node2outport&quot;, node2outport);&#xA;ruleresult.registerObject(&quot;port&quot;, port);&#xA;ruleresult.registerObject(&quot;portNode&quot;, portNode);&#xA;ruleresult.registerObject(&quot;typeNode&quot;, typeNode);&#xA;ruleresult.registerObject(&quot;entity2composite&quot;, entity2composite);&#xA;ruleresult.registerObject(&quot;entity&quot;, entity);&#xA;ruleresult.registerObject(&quot;portName&quot;, portName);&#xA;">
    <eOperation href="platform:/plugin/VHDLTGGCodeAdapter/model/VHDLTGGCodeAdapter.ecore#//Rules/HandleOutPort/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;port&quot;).eClass().equals(VHDLModel.VHDLModelPackage.eINSTANCE.getOutputPort());">
    <eOperation href="platform:/plugin/VHDLTGGCodeAdapter/model/VHDLTGGCodeAdapter.ecore#//Rules/HandleOutPort/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_mapping_index = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mapping.index&quot;, true, csp);&#xD;&#xA;var_mapping_index.setValue(mapping.getIndex());&#xD;&#xA;var_mapping_index.setType(&quot;int&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;NextIndex nextIndex = new NextIndex();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(nextIndex);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;nextIndex.setRuleName(&quot;&quot;);&#xD;&#xA;nextIndex.solve(var_mapping_index);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/VHDLTGGCodeAdapter/model/VHDLTGGCodeAdapter.ecore#//Rules/Mapping2AndGate/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;expressionNode&quot;, expressionNode);&#xA;match.registerObject(&quot;entityNode&quot;, entityNode);&#xA;match.registerObject(&quot;inputPortNode2&quot;, inputPortNode2);&#xA;match.registerObject(&quot;left&quot;, left);&#xA;match.registerObject(&quot;right&quot;, right);&#xA;match.registerObject(&quot;gateNode&quot;, gateNode);&#xA;match.registerObject(&quot;inputPortNode1&quot;, inputPortNode1);&#xA;match.registerObject(&quot;mapping&quot;, mapping);&#xA;match.registerObject(&quot;outputPortNode&quot;, outputPortNode);&#xA;match.registerObject(&quot;vhdlNode&quot;, vhdlNode);&#xA;">
    <eOperation href="platform:/plugin/VHDLTGGCodeAdapter/model/VHDLTGGCodeAdapter.ecore#//Rules/Mapping2AndGate/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/VHDLTGGCodeAdapter/model/VHDLTGGCodeAdapter.ecore#//Rules/Mapping2AndGate/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_leftExtern_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;leftExtern.name&quot;, true, csp);&#xD;&#xA;var_leftExtern_name.setValue(leftExtern.getName());&#xD;&#xA;var_leftExtern_name.setType(&quot;String&quot;);&#xD;&#xA;Variable var_left_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;left.name&quot;, true, csp);&#xD;&#xA;var_left_name.setValue(left.getName());&#xD;&#xA;var_left_name.setType(&quot;String&quot;);&#xD;&#xA;Variable var_rightExtern_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;rightExtern.name&quot;, true, csp);&#xD;&#xA;var_rightExtern_name.setValue(rightExtern.getName());&#xD;&#xA;var_rightExtern_name.setType(&quot;String&quot;);&#xD;&#xA;Variable var_right_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;right.name&quot;, true, csp);&#xD;&#xA;var_right_name.setValue(right.getName());&#xD;&#xA;var_right_name.setType(&quot;String&quot;);&#xD;&#xA;Variable var_outExternal_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;outExternal.name&quot;, true, csp);&#xD;&#xA;var_outExternal_name.setValue(outExternal.getName());&#xD;&#xA;var_outExternal_name.setType(&quot;String&quot;);&#xD;&#xA;Variable var_mapping_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mapping.name&quot;, true, csp);&#xD;&#xA;var_mapping_name.setValue(mapping.getName());&#xD;&#xA;var_mapping_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();Eq eq_0 = new Eq();Eq eq_1 = new Eq();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;csp.getConstraints().add(eq_0);&#xD;&#xA;csp.getConstraints().add(eq_1);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_leftExtern_name,var_left_name);&#xD;&#xA;eq_0.setRuleName(&quot;&quot;);&#xD;&#xA;eq_0.solve(var_rightExtern_name,var_right_name);&#xD;&#xA;eq_1.setRuleName(&quot;&quot;);&#xD;&#xA;eq_1.solve(var_outExternal_name,var_mapping_name);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;expressionNode&quot;,expressionNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;compositeBlock&quot;,compositeBlock);&#xD;&#xA;isApplicableMatch.registerObject(&quot;entityNode&quot;,entityNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;inputPortNode2&quot;,inputPortNode2);&#xD;&#xA;isApplicableMatch.registerObject(&quot;left&quot;,left);&#xD;&#xA;isApplicableMatch.registerObject(&quot;leftExtern&quot;,leftExtern);&#xD;&#xA;isApplicableMatch.registerObject(&quot;node2composite&quot;,node2composite);&#xD;&#xA;isApplicableMatch.registerObject(&quot;node2inputPort2&quot;,node2inputPort2);&#xD;&#xA;isApplicableMatch.registerObject(&quot;right&quot;,right);&#xD;&#xA;isApplicableMatch.registerObject(&quot;rightExtern&quot;,rightExtern);&#xD;&#xA;isApplicableMatch.registerObject(&quot;gate2composite&quot;,gate2composite);&#xD;&#xA;isApplicableMatch.registerObject(&quot;gateNode&quot;,gateNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;inputPortNode1&quot;,inputPortNode1);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mapping&quot;,mapping);&#xD;&#xA;isApplicableMatch.registerObject(&quot;node2InputPort1&quot;,node2InputPort1);&#xD;&#xA;isApplicableMatch.registerObject(&quot;node2OutputPort&quot;,node2OutputPort);&#xD;&#xA;isApplicableMatch.registerObject(&quot;outExternal&quot;,outExternal);&#xD;&#xA;isApplicableMatch.registerObject(&quot;outputPortNode&quot;,outputPortNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;vhdlNode&quot;,vhdlNode);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/VHDLTGGCodeAdapter/model/VHDLTGGCodeAdapter.ecore#//Rules/Mapping2AndGate/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/VHDLTGGCodeAdapter/model/VHDLTGGCodeAdapter.ecore#//Rules/Mapping2AndGate/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;andNode2Gate&quot;, andNode2Gate);&#xA;ruleresult.registerObject(&quot;expression&quot;, expression);&#xA;ruleresult.registerObject(&quot;expressionNode&quot;, expressionNode);&#xA;ruleresult.registerObject(&quot;leftPort&quot;, leftPort);&#xA;ruleresult.registerObject(&quot;out&quot;, out);&#xA;ruleresult.registerObject(&quot;rightPort&quot;, rightPort);&#xA;ruleresult.registerObject(&quot;compositeBlock&quot;, compositeBlock);&#xA;ruleresult.registerObject(&quot;entityNode&quot;, entityNode);&#xA;ruleresult.registerObject(&quot;inputPortNode2&quot;, inputPortNode2);&#xA;ruleresult.registerObject(&quot;left&quot;, left);&#xA;ruleresult.registerObject(&quot;leftExtern&quot;, leftExtern);&#xA;ruleresult.registerObject(&quot;node2composite&quot;, node2composite);&#xA;ruleresult.registerObject(&quot;node2inputPort2&quot;, node2inputPort2);&#xA;ruleresult.registerObject(&quot;right&quot;, right);&#xA;ruleresult.registerObject(&quot;rightExtern&quot;, rightExtern);&#xA;ruleresult.registerObject(&quot;gate2composite&quot;, gate2composite);&#xA;ruleresult.registerObject(&quot;gateNode&quot;, gateNode);&#xA;ruleresult.registerObject(&quot;inputPortNode1&quot;, inputPortNode1);&#xA;ruleresult.registerObject(&quot;mapping&quot;, mapping);&#xA;ruleresult.registerObject(&quot;node2InputPort1&quot;, node2InputPort1);&#xA;ruleresult.registerObject(&quot;node2OutputPort&quot;, node2OutputPort);&#xA;ruleresult.registerObject(&quot;outExternal&quot;, outExternal);&#xA;ruleresult.registerObject(&quot;outputPortNode&quot;, outputPortNode);&#xA;ruleresult.registerObject(&quot;vhdlNode&quot;, vhdlNode);&#xA;">
    <eOperation href="platform:/plugin/VHDLTGGCodeAdapter/model/VHDLTGGCodeAdapter.ecore#//Rules/Mapping2AndGate/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;expressionNode&quot;).eClass().getInstanceClassName().equals(&quot;MocaTree.Node&quot;) &amp;&amp; match.getObject(&quot;left&quot;).eClass().getInstanceClassName().equals(&quot;MocaTree.Node&quot;) &amp;&amp; match.getObject(&quot;right&quot;).eClass().getInstanceClassName().equals(&quot;MocaTree.Node&quot;) &amp;&amp; match.getObject(&quot;mapping&quot;).eClass().getInstanceClassName().equals(&quot;MocaTree.Node&quot;);">
    <eOperation href="platform:/plugin/VHDLTGGCodeAdapter/model/VHDLTGGCodeAdapter.ecore#//Rules/Mapping2AndGate/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/VHDLTGGCodeAdapter/model/VHDLTGGCodeAdapter.ecore#//Rules/Mapping2AndGate/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;expression&quot;, expression);&#xA;match.registerObject(&quot;leftPort&quot;, leftPort);&#xA;match.registerObject(&quot;out&quot;, out);&#xA;match.registerObject(&quot;rightPort&quot;, rightPort);&#xA;match.registerObject(&quot;compositeBlock&quot;, compositeBlock);&#xA;match.registerObject(&quot;leftExtern&quot;, leftExtern);&#xA;match.registerObject(&quot;rightExtern&quot;, rightExtern);&#xA;match.registerObject(&quot;outExternal&quot;, outExternal);&#xA;">
    <eOperation href="platform:/plugin/VHDLTGGCodeAdapter/model/VHDLTGGCodeAdapter.ecore#//Rules/Mapping2AndGate/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/VHDLTGGCodeAdapter/model/VHDLTGGCodeAdapter.ecore#//Rules/Mapping2AndGate/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_leftExtern_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;leftExtern.name&quot;, true, csp);&#xD;&#xA;var_leftExtern_name.setValue(leftExtern.getName());&#xD;&#xA;var_leftExtern_name.setType(&quot;String&quot;);&#xD;&#xA;Variable var_rightExtern_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;rightExtern.name&quot;, true, csp);&#xD;&#xA;var_rightExtern_name.setValue(rightExtern.getName());&#xD;&#xA;var_rightExtern_name.setType(&quot;String&quot;);&#xD;&#xA;Variable var_outExternal_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;outExternal.name&quot;, true, csp);&#xD;&#xA;var_outExternal_name.setValue(outExternal.getName());&#xD;&#xA;var_outExternal_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_left_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;left.name&quot;, csp);&#xD;&#xA;var_left_name.setType(&quot;String&quot;);&#xD;&#xA;Variable var_right_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;right.name&quot;, csp);&#xD;&#xA;var_right_name.setType(&quot;String&quot;);&#xD;&#xA;Variable var_mapping_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mapping.name&quot;, csp);&#xD;&#xA;var_mapping_name.setType(&quot;String&quot;);&#xD;&#xA;Variable var_mapping_index = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mapping.index&quot;, csp);&#xD;&#xA;var_mapping_index.setType(&quot;int&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();Eq eq_0 = new Eq();Eq eq_1 = new Eq();NextIndex nextIndex = new NextIndex();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;csp.getConstraints().add(eq_0);&#xD;&#xA;csp.getConstraints().add(eq_1);&#xD;&#xA;csp.getConstraints().add(nextIndex);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_leftExtern_name,var_left_name);&#xD;&#xA;eq_0.setRuleName(&quot;&quot;);&#xD;&#xA;eq_0.solve(var_rightExtern_name,var_right_name);&#xD;&#xA;eq_1.setRuleName(&quot;&quot;);&#xD;&#xA;eq_1.solve(var_outExternal_name,var_mapping_name);&#xD;&#xA;nextIndex.setRuleName(&quot;&quot;);&#xD;&#xA;nextIndex.solve(var_mapping_index);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;expression&quot;,expression);&#xD;&#xA;isApplicableMatch.registerObject(&quot;leftPort&quot;,leftPort);&#xD;&#xA;isApplicableMatch.registerObject(&quot;out&quot;,out);&#xD;&#xA;isApplicableMatch.registerObject(&quot;rightPort&quot;,rightPort);&#xD;&#xA;isApplicableMatch.registerObject(&quot;compositeBlock&quot;,compositeBlock);&#xD;&#xA;isApplicableMatch.registerObject(&quot;entityNode&quot;,entityNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;inputPortNode2&quot;,inputPortNode2);&#xD;&#xA;isApplicableMatch.registerObject(&quot;leftExtern&quot;,leftExtern);&#xD;&#xA;isApplicableMatch.registerObject(&quot;node2composite&quot;,node2composite);&#xD;&#xA;isApplicableMatch.registerObject(&quot;node2inputPort2&quot;,node2inputPort2);&#xD;&#xA;isApplicableMatch.registerObject(&quot;rightExtern&quot;,rightExtern);&#xD;&#xA;isApplicableMatch.registerObject(&quot;gate2composite&quot;,gate2composite);&#xD;&#xA;isApplicableMatch.registerObject(&quot;gateNode&quot;,gateNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;inputPortNode1&quot;,inputPortNode1);&#xD;&#xA;isApplicableMatch.registerObject(&quot;node2InputPort1&quot;,node2InputPort1);&#xD;&#xA;isApplicableMatch.registerObject(&quot;node2OutputPort&quot;,node2OutputPort);&#xD;&#xA;isApplicableMatch.registerObject(&quot;outExternal&quot;,outExternal);&#xD;&#xA;isApplicableMatch.registerObject(&quot;outputPortNode&quot;,outputPortNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;vhdlNode&quot;,vhdlNode);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/VHDLTGGCodeAdapter/model/VHDLTGGCodeAdapter.ecore#//Rules/Mapping2AndGate/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/VHDLTGGCodeAdapter/model/VHDLTGGCodeAdapter.ecore#//Rules/Mapping2AndGate/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;andNode2Gate&quot;, andNode2Gate);&#xA;ruleresult.registerObject(&quot;expression&quot;, expression);&#xA;ruleresult.registerObject(&quot;expressionNode&quot;, expressionNode);&#xA;ruleresult.registerObject(&quot;leftPort&quot;, leftPort);&#xA;ruleresult.registerObject(&quot;out&quot;, out);&#xA;ruleresult.registerObject(&quot;rightPort&quot;, rightPort);&#xA;ruleresult.registerObject(&quot;compositeBlock&quot;, compositeBlock);&#xA;ruleresult.registerObject(&quot;entityNode&quot;, entityNode);&#xA;ruleresult.registerObject(&quot;inputPortNode2&quot;, inputPortNode2);&#xA;ruleresult.registerObject(&quot;left&quot;, left);&#xA;ruleresult.registerObject(&quot;leftExtern&quot;, leftExtern);&#xA;ruleresult.registerObject(&quot;node2composite&quot;, node2composite);&#xA;ruleresult.registerObject(&quot;node2inputPort2&quot;, node2inputPort2);&#xA;ruleresult.registerObject(&quot;right&quot;, right);&#xA;ruleresult.registerObject(&quot;rightExtern&quot;, rightExtern);&#xA;ruleresult.registerObject(&quot;gate2composite&quot;, gate2composite);&#xA;ruleresult.registerObject(&quot;gateNode&quot;, gateNode);&#xA;ruleresult.registerObject(&quot;inputPortNode1&quot;, inputPortNode1);&#xA;ruleresult.registerObject(&quot;mapping&quot;, mapping);&#xA;ruleresult.registerObject(&quot;node2InputPort1&quot;, node2InputPort1);&#xA;ruleresult.registerObject(&quot;node2OutputPort&quot;, node2OutputPort);&#xA;ruleresult.registerObject(&quot;outExternal&quot;, outExternal);&#xA;ruleresult.registerObject(&quot;outputPortNode&quot;, outputPortNode);&#xA;ruleresult.registerObject(&quot;vhdlNode&quot;, vhdlNode);&#xA;">
    <eOperation href="platform:/plugin/VHDLTGGCodeAdapter/model/VHDLTGGCodeAdapter.ecore#//Rules/Mapping2AndGate/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;expression&quot;).eClass().equals(VHDLModel.VHDLModelPackage.eINSTANCE.getAndGate()) &amp;&amp; match.getObject(&quot;leftPort&quot;).eClass().equals(VHDLModel.VHDLModelPackage.eINSTANCE.getInputPort()) &amp;&amp; match.getObject(&quot;out&quot;).eClass().equals(VHDLModel.VHDLModelPackage.eINSTANCE.getOutputPort()) &amp;&amp; match.getObject(&quot;rightPort&quot;).eClass().equals(VHDLModel.VHDLModelPackage.eINSTANCE.getInputPort());">
    <eOperation href="platform:/plugin/VHDLTGGCodeAdapter/model/VHDLTGGCodeAdapter.ecore#//Rules/Mapping2AndGate/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_mapping_index = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mapping.index&quot;, true, csp);&#xD;&#xA;var_mapping_index.setValue(mapping.getIndex());&#xD;&#xA;var_mapping_index.setType(&quot;int&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;NextIndex nextIndex = new NextIndex();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(nextIndex);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;nextIndex.setRuleName(&quot;&quot;);&#xD;&#xA;nextIndex.solve(var_mapping_index);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/VHDLTGGCodeAdapter/model/VHDLTGGCodeAdapter.ecore#//Rules/Mapping2OrGate/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;expressionNode&quot;, expressionNode);&#xA;match.registerObject(&quot;entityNode&quot;, entityNode);&#xA;match.registerObject(&quot;inputPortNode2&quot;, inputPortNode2);&#xA;match.registerObject(&quot;left&quot;, left);&#xA;match.registerObject(&quot;right&quot;, right);&#xA;match.registerObject(&quot;gateNode&quot;, gateNode);&#xA;match.registerObject(&quot;inputPortNode1&quot;, inputPortNode1);&#xA;match.registerObject(&quot;mapping&quot;, mapping);&#xA;match.registerObject(&quot;outputPortNode&quot;, outputPortNode);&#xA;match.registerObject(&quot;vhdlNode&quot;, vhdlNode);&#xA;">
    <eOperation href="platform:/plugin/VHDLTGGCodeAdapter/model/VHDLTGGCodeAdapter.ecore#//Rules/Mapping2OrGate/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/VHDLTGGCodeAdapter/model/VHDLTGGCodeAdapter.ecore#//Rules/Mapping2OrGate/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_leftExtern_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;leftExtern.name&quot;, true, csp);&#xD;&#xA;var_leftExtern_name.setValue(leftExtern.getName());&#xD;&#xA;var_leftExtern_name.setType(&quot;String&quot;);&#xD;&#xA;Variable var_left_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;left.name&quot;, true, csp);&#xD;&#xA;var_left_name.setValue(left.getName());&#xD;&#xA;var_left_name.setType(&quot;String&quot;);&#xD;&#xA;Variable var_rightExtern_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;rightExtern.name&quot;, true, csp);&#xD;&#xA;var_rightExtern_name.setValue(rightExtern.getName());&#xD;&#xA;var_rightExtern_name.setType(&quot;String&quot;);&#xD;&#xA;Variable var_right_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;right.name&quot;, true, csp);&#xD;&#xA;var_right_name.setValue(right.getName());&#xD;&#xA;var_right_name.setType(&quot;String&quot;);&#xD;&#xA;Variable var_outExternal_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;outExternal.name&quot;, true, csp);&#xD;&#xA;var_outExternal_name.setValue(outExternal.getName());&#xD;&#xA;var_outExternal_name.setType(&quot;String&quot;);&#xD;&#xA;Variable var_mapping_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mapping.name&quot;, true, csp);&#xD;&#xA;var_mapping_name.setValue(mapping.getName());&#xD;&#xA;var_mapping_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();Eq eq_0 = new Eq();Eq eq_1 = new Eq();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;csp.getConstraints().add(eq_0);&#xD;&#xA;csp.getConstraints().add(eq_1);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_leftExtern_name,var_left_name);&#xD;&#xA;eq_0.setRuleName(&quot;&quot;);&#xD;&#xA;eq_0.solve(var_rightExtern_name,var_right_name);&#xD;&#xA;eq_1.setRuleName(&quot;&quot;);&#xD;&#xA;eq_1.solve(var_outExternal_name,var_mapping_name);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;expressionNode&quot;,expressionNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;compositeBlock&quot;,compositeBlock);&#xD;&#xA;isApplicableMatch.registerObject(&quot;entityNode&quot;,entityNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;inputPortNode2&quot;,inputPortNode2);&#xD;&#xA;isApplicableMatch.registerObject(&quot;left&quot;,left);&#xD;&#xA;isApplicableMatch.registerObject(&quot;leftExtern&quot;,leftExtern);&#xD;&#xA;isApplicableMatch.registerObject(&quot;node2composite&quot;,node2composite);&#xD;&#xA;isApplicableMatch.registerObject(&quot;node2inputPort2&quot;,node2inputPort2);&#xD;&#xA;isApplicableMatch.registerObject(&quot;right&quot;,right);&#xD;&#xA;isApplicableMatch.registerObject(&quot;rightExtern&quot;,rightExtern);&#xD;&#xA;isApplicableMatch.registerObject(&quot;gate2composite&quot;,gate2composite);&#xD;&#xA;isApplicableMatch.registerObject(&quot;gateNode&quot;,gateNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;inputPortNode1&quot;,inputPortNode1);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mapping&quot;,mapping);&#xD;&#xA;isApplicableMatch.registerObject(&quot;node2InputPort1&quot;,node2InputPort1);&#xD;&#xA;isApplicableMatch.registerObject(&quot;node2OutputPort&quot;,node2OutputPort);&#xD;&#xA;isApplicableMatch.registerObject(&quot;outExternal&quot;,outExternal);&#xD;&#xA;isApplicableMatch.registerObject(&quot;outputPortNode&quot;,outputPortNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;vhdlNode&quot;,vhdlNode);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/VHDLTGGCodeAdapter/model/VHDLTGGCodeAdapter.ecore#//Rules/Mapping2OrGate/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/VHDLTGGCodeAdapter/model/VHDLTGGCodeAdapter.ecore#//Rules/Mapping2OrGate/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;expression&quot;, expression);&#xA;ruleresult.registerObject(&quot;expressionNode&quot;, expressionNode);&#xA;ruleresult.registerObject(&quot;leftPort&quot;, leftPort);&#xA;ruleresult.registerObject(&quot;orNode2Gate&quot;, orNode2Gate);&#xA;ruleresult.registerObject(&quot;out&quot;, out);&#xA;ruleresult.registerObject(&quot;rightPort&quot;, rightPort);&#xA;ruleresult.registerObject(&quot;compositeBlock&quot;, compositeBlock);&#xA;ruleresult.registerObject(&quot;entityNode&quot;, entityNode);&#xA;ruleresult.registerObject(&quot;inputPortNode2&quot;, inputPortNode2);&#xA;ruleresult.registerObject(&quot;left&quot;, left);&#xA;ruleresult.registerObject(&quot;leftExtern&quot;, leftExtern);&#xA;ruleresult.registerObject(&quot;node2composite&quot;, node2composite);&#xA;ruleresult.registerObject(&quot;node2inputPort2&quot;, node2inputPort2);&#xA;ruleresult.registerObject(&quot;right&quot;, right);&#xA;ruleresult.registerObject(&quot;rightExtern&quot;, rightExtern);&#xA;ruleresult.registerObject(&quot;gate2composite&quot;, gate2composite);&#xA;ruleresult.registerObject(&quot;gateNode&quot;, gateNode);&#xA;ruleresult.registerObject(&quot;inputPortNode1&quot;, inputPortNode1);&#xA;ruleresult.registerObject(&quot;mapping&quot;, mapping);&#xA;ruleresult.registerObject(&quot;node2InputPort1&quot;, node2InputPort1);&#xA;ruleresult.registerObject(&quot;node2OutputPort&quot;, node2OutputPort);&#xA;ruleresult.registerObject(&quot;outExternal&quot;, outExternal);&#xA;ruleresult.registerObject(&quot;outputPortNode&quot;, outputPortNode);&#xA;ruleresult.registerObject(&quot;vhdlNode&quot;, vhdlNode);&#xA;">
    <eOperation href="platform:/plugin/VHDLTGGCodeAdapter/model/VHDLTGGCodeAdapter.ecore#//Rules/Mapping2OrGate/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;expressionNode&quot;).eClass().getInstanceClassName().equals(&quot;MocaTree.Node&quot;) &amp;&amp; match.getObject(&quot;left&quot;).eClass().getInstanceClassName().equals(&quot;MocaTree.Node&quot;) &amp;&amp; match.getObject(&quot;right&quot;).eClass().getInstanceClassName().equals(&quot;MocaTree.Node&quot;) &amp;&amp; match.getObject(&quot;mapping&quot;).eClass().getInstanceClassName().equals(&quot;MocaTree.Node&quot;);">
    <eOperation href="platform:/plugin/VHDLTGGCodeAdapter/model/VHDLTGGCodeAdapter.ecore#//Rules/Mapping2OrGate/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/VHDLTGGCodeAdapter/model/VHDLTGGCodeAdapter.ecore#//Rules/Mapping2OrGate/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;expression&quot;, expression);&#xA;match.registerObject(&quot;leftPort&quot;, leftPort);&#xA;match.registerObject(&quot;out&quot;, out);&#xA;match.registerObject(&quot;rightPort&quot;, rightPort);&#xA;match.registerObject(&quot;compositeBlock&quot;, compositeBlock);&#xA;match.registerObject(&quot;leftExtern&quot;, leftExtern);&#xA;match.registerObject(&quot;rightExtern&quot;, rightExtern);&#xA;match.registerObject(&quot;outExternal&quot;, outExternal);&#xA;">
    <eOperation href="platform:/plugin/VHDLTGGCodeAdapter/model/VHDLTGGCodeAdapter.ecore#//Rules/Mapping2OrGate/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/VHDLTGGCodeAdapter/model/VHDLTGGCodeAdapter.ecore#//Rules/Mapping2OrGate/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_leftExtern_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;leftExtern.name&quot;, true, csp);&#xD;&#xA;var_leftExtern_name.setValue(leftExtern.getName());&#xD;&#xA;var_leftExtern_name.setType(&quot;String&quot;);&#xD;&#xA;Variable var_rightExtern_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;rightExtern.name&quot;, true, csp);&#xD;&#xA;var_rightExtern_name.setValue(rightExtern.getName());&#xD;&#xA;var_rightExtern_name.setType(&quot;String&quot;);&#xD;&#xA;Variable var_outExternal_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;outExternal.name&quot;, true, csp);&#xD;&#xA;var_outExternal_name.setValue(outExternal.getName());&#xD;&#xA;var_outExternal_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_left_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;left.name&quot;, csp);&#xD;&#xA;var_left_name.setType(&quot;String&quot;);&#xD;&#xA;Variable var_right_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;right.name&quot;, csp);&#xD;&#xA;var_right_name.setType(&quot;String&quot;);&#xD;&#xA;Variable var_mapping_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mapping.name&quot;, csp);&#xD;&#xA;var_mapping_name.setType(&quot;String&quot;);&#xD;&#xA;Variable var_mapping_index = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mapping.index&quot;, csp);&#xD;&#xA;var_mapping_index.setType(&quot;int&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();Eq eq_0 = new Eq();Eq eq_1 = new Eq();NextIndex nextIndex = new NextIndex();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;csp.getConstraints().add(eq_0);&#xD;&#xA;csp.getConstraints().add(eq_1);&#xD;&#xA;csp.getConstraints().add(nextIndex);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_leftExtern_name,var_left_name);&#xD;&#xA;eq_0.setRuleName(&quot;&quot;);&#xD;&#xA;eq_0.solve(var_rightExtern_name,var_right_name);&#xD;&#xA;eq_1.setRuleName(&quot;&quot;);&#xD;&#xA;eq_1.solve(var_outExternal_name,var_mapping_name);&#xD;&#xA;nextIndex.setRuleName(&quot;&quot;);&#xD;&#xA;nextIndex.solve(var_mapping_index);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;expression&quot;,expression);&#xD;&#xA;isApplicableMatch.registerObject(&quot;leftPort&quot;,leftPort);&#xD;&#xA;isApplicableMatch.registerObject(&quot;out&quot;,out);&#xD;&#xA;isApplicableMatch.registerObject(&quot;rightPort&quot;,rightPort);&#xD;&#xA;isApplicableMatch.registerObject(&quot;compositeBlock&quot;,compositeBlock);&#xD;&#xA;isApplicableMatch.registerObject(&quot;entityNode&quot;,entityNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;inputPortNode2&quot;,inputPortNode2);&#xD;&#xA;isApplicableMatch.registerObject(&quot;leftExtern&quot;,leftExtern);&#xD;&#xA;isApplicableMatch.registerObject(&quot;node2composite&quot;,node2composite);&#xD;&#xA;isApplicableMatch.registerObject(&quot;node2inputPort2&quot;,node2inputPort2);&#xD;&#xA;isApplicableMatch.registerObject(&quot;rightExtern&quot;,rightExtern);&#xD;&#xA;isApplicableMatch.registerObject(&quot;gate2composite&quot;,gate2composite);&#xD;&#xA;isApplicableMatch.registerObject(&quot;gateNode&quot;,gateNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;inputPortNode1&quot;,inputPortNode1);&#xD;&#xA;isApplicableMatch.registerObject(&quot;node2InputPort1&quot;,node2InputPort1);&#xD;&#xA;isApplicableMatch.registerObject(&quot;node2OutputPort&quot;,node2OutputPort);&#xD;&#xA;isApplicableMatch.registerObject(&quot;outExternal&quot;,outExternal);&#xD;&#xA;isApplicableMatch.registerObject(&quot;outputPortNode&quot;,outputPortNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;vhdlNode&quot;,vhdlNode);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/VHDLTGGCodeAdapter/model/VHDLTGGCodeAdapter.ecore#//Rules/Mapping2OrGate/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/VHDLTGGCodeAdapter/model/VHDLTGGCodeAdapter.ecore#//Rules/Mapping2OrGate/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;expression&quot;, expression);&#xA;ruleresult.registerObject(&quot;expressionNode&quot;, expressionNode);&#xA;ruleresult.registerObject(&quot;leftPort&quot;, leftPort);&#xA;ruleresult.registerObject(&quot;orNode2Gate&quot;, orNode2Gate);&#xA;ruleresult.registerObject(&quot;out&quot;, out);&#xA;ruleresult.registerObject(&quot;rightPort&quot;, rightPort);&#xA;ruleresult.registerObject(&quot;compositeBlock&quot;, compositeBlock);&#xA;ruleresult.registerObject(&quot;entityNode&quot;, entityNode);&#xA;ruleresult.registerObject(&quot;inputPortNode2&quot;, inputPortNode2);&#xA;ruleresult.registerObject(&quot;left&quot;, left);&#xA;ruleresult.registerObject(&quot;leftExtern&quot;, leftExtern);&#xA;ruleresult.registerObject(&quot;node2composite&quot;, node2composite);&#xA;ruleresult.registerObject(&quot;node2inputPort2&quot;, node2inputPort2);&#xA;ruleresult.registerObject(&quot;right&quot;, right);&#xA;ruleresult.registerObject(&quot;rightExtern&quot;, rightExtern);&#xA;ruleresult.registerObject(&quot;gate2composite&quot;, gate2composite);&#xA;ruleresult.registerObject(&quot;gateNode&quot;, gateNode);&#xA;ruleresult.registerObject(&quot;inputPortNode1&quot;, inputPortNode1);&#xA;ruleresult.registerObject(&quot;mapping&quot;, mapping);&#xA;ruleresult.registerObject(&quot;node2InputPort1&quot;, node2InputPort1);&#xA;ruleresult.registerObject(&quot;node2OutputPort&quot;, node2OutputPort);&#xA;ruleresult.registerObject(&quot;outExternal&quot;, outExternal);&#xA;ruleresult.registerObject(&quot;outputPortNode&quot;, outputPortNode);&#xA;ruleresult.registerObject(&quot;vhdlNode&quot;, vhdlNode);&#xA;">
    <eOperation href="platform:/plugin/VHDLTGGCodeAdapter/model/VHDLTGGCodeAdapter.ecore#//Rules/Mapping2OrGate/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;expression&quot;).eClass().equals(VHDLModel.VHDLModelPackage.eINSTANCE.getOrGate()) &amp;&amp; match.getObject(&quot;leftPort&quot;).eClass().equals(VHDLModel.VHDLModelPackage.eINSTANCE.getInputPort()) &amp;&amp; match.getObject(&quot;out&quot;).eClass().equals(VHDLModel.VHDLModelPackage.eINSTANCE.getOutputPort()) &amp;&amp; match.getObject(&quot;rightPort&quot;).eClass().equals(VHDLModel.VHDLModelPackage.eINSTANCE.getInputPort());">
    <eOperation href="platform:/plugin/VHDLTGGCodeAdapter/model/VHDLTGGCodeAdapter.ecore#//Rules/Mapping2OrGate/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_mapping_index = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mapping.index&quot;, true, csp);&#xD;&#xA;var_mapping_index.setValue(mapping.getIndex());&#xD;&#xA;var_mapping_index.setType(&quot;int&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;NextIndex nextIndex = new NextIndex();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(nextIndex);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;nextIndex.setRuleName(&quot;&quot;);&#xD;&#xA;nextIndex.solve(var_mapping_index);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/VHDLTGGCodeAdapter/model/VHDLTGGCodeAdapter.ecore#//Rules/Mapping2NotGate/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;expressionNode&quot;, expressionNode);&#xA;match.registerObject(&quot;port&quot;, port);&#xA;match.registerObject(&quot;entityNode&quot;, entityNode);&#xA;match.registerObject(&quot;gateNode&quot;, gateNode);&#xA;match.registerObject(&quot;inputPortNode1&quot;, inputPortNode1);&#xA;match.registerObject(&quot;mapping&quot;, mapping);&#xA;match.registerObject(&quot;outputPortNode&quot;, outputPortNode);&#xA;match.registerObject(&quot;vhdlNode&quot;, vhdlNode);&#xA;">
    <eOperation href="platform:/plugin/VHDLTGGCodeAdapter/model/VHDLTGGCodeAdapter.ecore#//Rules/Mapping2NotGate/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/VHDLTGGCodeAdapter/model/VHDLTGGCodeAdapter.ecore#//Rules/Mapping2NotGate/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_leftExtern_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;leftExtern.name&quot;, true, csp);&#xD;&#xA;var_leftExtern_name.setValue(leftExtern.getName());&#xD;&#xA;var_leftExtern_name.setType(&quot;String&quot;);&#xD;&#xA;Variable var_port_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;port.name&quot;, true, csp);&#xD;&#xA;var_port_name.setValue(port.getName());&#xD;&#xA;var_port_name.setType(&quot;String&quot;);&#xD;&#xA;Variable var_outExternal_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;outExternal.name&quot;, true, csp);&#xD;&#xA;var_outExternal_name.setValue(outExternal.getName());&#xD;&#xA;var_outExternal_name.setType(&quot;String&quot;);&#xD;&#xA;Variable var_mapping_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mapping.name&quot;, true, csp);&#xD;&#xA;var_mapping_name.setValue(mapping.getName());&#xD;&#xA;var_mapping_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();Eq eq_0 = new Eq();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;csp.getConstraints().add(eq_0);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_leftExtern_name,var_port_name);&#xD;&#xA;eq_0.setRuleName(&quot;&quot;);&#xD;&#xA;eq_0.solve(var_outExternal_name,var_mapping_name);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;expressionNode&quot;,expressionNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;leftExtern&quot;,leftExtern);&#xD;&#xA;isApplicableMatch.registerObject(&quot;port&quot;,port);&#xD;&#xA;isApplicableMatch.registerObject(&quot;compositeBlock&quot;,compositeBlock);&#xD;&#xA;isApplicableMatch.registerObject(&quot;entity2composite&quot;,entity2composite);&#xD;&#xA;isApplicableMatch.registerObject(&quot;entityNode&quot;,entityNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;gate2composite&quot;,gate2composite);&#xD;&#xA;isApplicableMatch.registerObject(&quot;gateNode&quot;,gateNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;inputPortNode1&quot;,inputPortNode1);&#xD;&#xA;isApplicableMatch.registerObject(&quot;mapping&quot;,mapping);&#xD;&#xA;isApplicableMatch.registerObject(&quot;node2InputPort1&quot;,node2InputPort1);&#xD;&#xA;isApplicableMatch.registerObject(&quot;node2OutputPort&quot;,node2OutputPort);&#xD;&#xA;isApplicableMatch.registerObject(&quot;outExternal&quot;,outExternal);&#xD;&#xA;isApplicableMatch.registerObject(&quot;outputPortNode&quot;,outputPortNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;vhdlNode&quot;,vhdlNode);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/VHDLTGGCodeAdapter/model/VHDLTGGCodeAdapter.ecore#//Rules/Mapping2NotGate/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/VHDLTGGCodeAdapter/model/VHDLTGGCodeAdapter.ecore#//Rules/Mapping2NotGate/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;expression&quot;, expression);&#xA;ruleresult.registerObject(&quot;expressionNode&quot;, expressionNode);&#xA;ruleresult.registerObject(&quot;in&quot;, in);&#xA;ruleresult.registerObject(&quot;leftExtern&quot;, leftExtern);&#xA;ruleresult.registerObject(&quot;notNode2Gate&quot;, notNode2Gate);&#xA;ruleresult.registerObject(&quot;out&quot;, out);&#xA;ruleresult.registerObject(&quot;port&quot;, port);&#xA;ruleresult.registerObject(&quot;compositeBlock&quot;, compositeBlock);&#xA;ruleresult.registerObject(&quot;entity2composite&quot;, entity2composite);&#xA;ruleresult.registerObject(&quot;entityNode&quot;, entityNode);&#xA;ruleresult.registerObject(&quot;gate2composite&quot;, gate2composite);&#xA;ruleresult.registerObject(&quot;gateNode&quot;, gateNode);&#xA;ruleresult.registerObject(&quot;inputPortNode1&quot;, inputPortNode1);&#xA;ruleresult.registerObject(&quot;mapping&quot;, mapping);&#xA;ruleresult.registerObject(&quot;node2InputPort1&quot;, node2InputPort1);&#xA;ruleresult.registerObject(&quot;node2OutputPort&quot;, node2OutputPort);&#xA;ruleresult.registerObject(&quot;outExternal&quot;, outExternal);&#xA;ruleresult.registerObject(&quot;outputPortNode&quot;, outputPortNode);&#xA;ruleresult.registerObject(&quot;vhdlNode&quot;, vhdlNode);&#xA;">
    <eOperation href="platform:/plugin/VHDLTGGCodeAdapter/model/VHDLTGGCodeAdapter.ecore#//Rules/Mapping2NotGate/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;expressionNode&quot;).eClass().getInstanceClassName().equals(&quot;MocaTree.Node&quot;) &amp;&amp; match.getObject(&quot;port&quot;).eClass().getInstanceClassName().equals(&quot;MocaTree.Node&quot;) &amp;&amp; match.getObject(&quot;mapping&quot;).eClass().getInstanceClassName().equals(&quot;MocaTree.Node&quot;);">
    <eOperation href="platform:/plugin/VHDLTGGCodeAdapter/model/VHDLTGGCodeAdapter.ecore#//Rules/Mapping2NotGate/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/VHDLTGGCodeAdapter/model/VHDLTGGCodeAdapter.ecore#//Rules/Mapping2NotGate/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;expression&quot;, expression);&#xA;match.registerObject(&quot;in&quot;, in);&#xA;match.registerObject(&quot;leftExtern&quot;, leftExtern);&#xA;match.registerObject(&quot;out&quot;, out);&#xA;match.registerObject(&quot;compositeBlock&quot;, compositeBlock);&#xA;match.registerObject(&quot;outExternal&quot;, outExternal);&#xA;">
    <eOperation href="platform:/plugin/VHDLTGGCodeAdapter/model/VHDLTGGCodeAdapter.ecore#//Rules/Mapping2NotGate/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/VHDLTGGCodeAdapter/model/VHDLTGGCodeAdapter.ecore#//Rules/Mapping2NotGate/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_leftExtern_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;leftExtern.name&quot;, true, csp);&#xD;&#xA;var_leftExtern_name.setValue(leftExtern.getName());&#xD;&#xA;var_leftExtern_name.setType(&quot;String&quot;);&#xD;&#xA;Variable var_outExternal_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;outExternal.name&quot;, true, csp);&#xD;&#xA;var_outExternal_name.setValue(outExternal.getName());&#xD;&#xA;var_outExternal_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_port_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;port.name&quot;, csp);&#xD;&#xA;var_port_name.setType(&quot;String&quot;);&#xD;&#xA;Variable var_mapping_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mapping.name&quot;, csp);&#xD;&#xA;var_mapping_name.setType(&quot;String&quot;);&#xD;&#xA;Variable var_mapping_index = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mapping.index&quot;, csp);&#xD;&#xA;var_mapping_index.setType(&quot;int&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();Eq eq_0 = new Eq();NextIndex nextIndex = new NextIndex();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;csp.getConstraints().add(eq_0);&#xD;&#xA;csp.getConstraints().add(nextIndex);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_leftExtern_name,var_port_name);&#xD;&#xA;eq_0.setRuleName(&quot;&quot;);&#xD;&#xA;eq_0.solve(var_outExternal_name,var_mapping_name);&#xD;&#xA;nextIndex.setRuleName(&quot;&quot;);&#xD;&#xA;nextIndex.solve(var_mapping_index);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;expression&quot;,expression);&#xD;&#xA;isApplicableMatch.registerObject(&quot;in&quot;,in);&#xD;&#xA;isApplicableMatch.registerObject(&quot;leftExtern&quot;,leftExtern);&#xD;&#xA;isApplicableMatch.registerObject(&quot;out&quot;,out);&#xD;&#xA;isApplicableMatch.registerObject(&quot;compositeBlock&quot;,compositeBlock);&#xD;&#xA;isApplicableMatch.registerObject(&quot;entity2composite&quot;,entity2composite);&#xD;&#xA;isApplicableMatch.registerObject(&quot;entityNode&quot;,entityNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;gate2composite&quot;,gate2composite);&#xD;&#xA;isApplicableMatch.registerObject(&quot;gateNode&quot;,gateNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;inputPortNode1&quot;,inputPortNode1);&#xD;&#xA;isApplicableMatch.registerObject(&quot;node2InputPort1&quot;,node2InputPort1);&#xD;&#xA;isApplicableMatch.registerObject(&quot;node2OutputPort&quot;,node2OutputPort);&#xD;&#xA;isApplicableMatch.registerObject(&quot;outExternal&quot;,outExternal);&#xD;&#xA;isApplicableMatch.registerObject(&quot;outputPortNode&quot;,outputPortNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;vhdlNode&quot;,vhdlNode);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/VHDLTGGCodeAdapter/model/VHDLTGGCodeAdapter.ecore#//Rules/Mapping2NotGate/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/VHDLTGGCodeAdapter/model/VHDLTGGCodeAdapter.ecore#//Rules/Mapping2NotGate/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;expression&quot;, expression);&#xA;ruleresult.registerObject(&quot;expressionNode&quot;, expressionNode);&#xA;ruleresult.registerObject(&quot;in&quot;, in);&#xA;ruleresult.registerObject(&quot;leftExtern&quot;, leftExtern);&#xA;ruleresult.registerObject(&quot;notNode2Gate&quot;, notNode2Gate);&#xA;ruleresult.registerObject(&quot;out&quot;, out);&#xA;ruleresult.registerObject(&quot;port&quot;, port);&#xA;ruleresult.registerObject(&quot;compositeBlock&quot;, compositeBlock);&#xA;ruleresult.registerObject(&quot;entity2composite&quot;, entity2composite);&#xA;ruleresult.registerObject(&quot;entityNode&quot;, entityNode);&#xA;ruleresult.registerObject(&quot;gate2composite&quot;, gate2composite);&#xA;ruleresult.registerObject(&quot;gateNode&quot;, gateNode);&#xA;ruleresult.registerObject(&quot;inputPortNode1&quot;, inputPortNode1);&#xA;ruleresult.registerObject(&quot;mapping&quot;, mapping);&#xA;ruleresult.registerObject(&quot;node2InputPort1&quot;, node2InputPort1);&#xA;ruleresult.registerObject(&quot;node2OutputPort&quot;, node2OutputPort);&#xA;ruleresult.registerObject(&quot;outExternal&quot;, outExternal);&#xA;ruleresult.registerObject(&quot;outputPortNode&quot;, outputPortNode);&#xA;ruleresult.registerObject(&quot;vhdlNode&quot;, vhdlNode);&#xA;">
    <eOperation href="platform:/plugin/VHDLTGGCodeAdapter/model/VHDLTGGCodeAdapter.ecore#//Rules/Mapping2NotGate/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;expression&quot;).eClass().equals(VHDLModel.VHDLModelPackage.eINSTANCE.getNotGate()) &amp;&amp; match.getObject(&quot;in&quot;).eClass().equals(VHDLModel.VHDLModelPackage.eINSTANCE.getInputPort()) &amp;&amp; match.getObject(&quot;out&quot;).eClass().equals(VHDLModel.VHDLModelPackage.eINSTANCE.getOutputPort());">
    <eOperation href="platform:/plugin/VHDLTGGCodeAdapter/model/VHDLTGGCodeAdapter.ecore#//Rules/Mapping2NotGate/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// TODO: NICO!!!&#xA;return null;">
    <eOperation href="platform:/plugin/VHDLTGGCodeAdapter/model/VHDLTGGCodeAdapter.ecore#//Rules/Entity2CompositeBlock/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// TODO: NICO!!!&#xA;return null;">
    <eOperation href="platform:/plugin/VHDLTGGCodeAdapter/model/VHDLTGGCodeAdapter.ecore#//Rules/Entity2CompositeBlock/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// TODO: NICO!!!&#xA;return null;">
    <eOperation href="platform:/plugin/VHDLTGGCodeAdapter/model/VHDLTGGCodeAdapter.ecore#//Rules/HandleInPort/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// TODO: NICO!!!&#xA;return null;">
    <eOperation href="platform:/plugin/VHDLTGGCodeAdapter/model/VHDLTGGCodeAdapter.ecore#//Rules/HandleInPort/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// TODO: NICO!!!&#xA;return null;">
    <eOperation href="platform:/plugin/VHDLTGGCodeAdapter/model/VHDLTGGCodeAdapter.ecore#//Rules/File2VHDLSpec/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// TODO: NICO!!!&#xA;return null;">
    <eOperation href="platform:/plugin/VHDLTGGCodeAdapter/model/VHDLTGGCodeAdapter.ecore#//Rules/File2VHDLSpec/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// TODO: NICO!!!&#xA;return null;">
    <eOperation href="platform:/plugin/VHDLTGGCodeAdapter/model/VHDLTGGCodeAdapter.ecore#//Rules/HandleOutPort/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// TODO: NICO!!!&#xA;return null;">
    <eOperation href="platform:/plugin/VHDLTGGCodeAdapter/model/VHDLTGGCodeAdapter.ecore#//Rules/HandleOutPort/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// TODO: NICO!!!&#xA;return null;">
    <eOperation href="platform:/plugin/VHDLTGGCodeAdapter/model/VHDLTGGCodeAdapter.ecore#//Rules/Mapping2AndGate/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// TODO: NICO!!!&#xA;return null;">
    <eOperation href="platform:/plugin/VHDLTGGCodeAdapter/model/VHDLTGGCodeAdapter.ecore#//Rules/Mapping2AndGate/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// TODO: NICO!!!&#xA;return null;">
    <eOperation href="platform:/plugin/VHDLTGGCodeAdapter/model/VHDLTGGCodeAdapter.ecore#//Rules/Mapping2OrGate/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// TODO: NICO!!!&#xA;return null;">
    <eOperation href="platform:/plugin/VHDLTGGCodeAdapter/model/VHDLTGGCodeAdapter.ecore#//Rules/Mapping2OrGate/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// TODO: NICO!!!&#xA;return null;">
    <eOperation href="platform:/plugin/VHDLTGGCodeAdapter/model/VHDLTGGCodeAdapter.ecore#//Rules/Mapping2NotGate/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// TODO: NICO!!!&#xA;return null;">
    <eOperation href="platform:/plugin/VHDLTGGCodeAdapter/model/VHDLTGGCodeAdapter.ecore#//Rules/Mapping2NotGate/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_entityName_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;entityName.name&quot;, csp);&#xD;&#xA;var_entityName_name.setType(&quot;String&quot;);&#xD;&#xA;Variable var_composite_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;composite.name&quot;, csp);&#xD;&#xA;var_composite_name.setType(&quot;String&quot;);&#xD;&#xA;Variable var_gateName_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;gateName.name&quot;, csp);&#xD;&#xA;var_gateName_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();Eq eq_0 = new Eq();Eq eq_1 = new Eq();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;csp.getConstraints().add(eq_0);&#xD;&#xA;csp.getConstraints().add(eq_1);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_entityName_name,var_composite_name);&#xD;&#xA;eq_0.setRuleName(&quot;&quot;);&#xD;&#xA;eq_0.solve(var_gateName_name,var_composite_name);&#xD;&#xA;eq_1.setRuleName(&quot;&quot;);&#xD;&#xA;eq_1.solve(var_gateName_name,var_entityName_name);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;file2spec&quot;,file2spec);&#xD;&#xA;isApplicableMatch.registerObject(&quot;file&quot;,file);&#xD;&#xA;isApplicableMatch.registerObject(&quot;spec&quot;,spec);&#xD;&#xA;isApplicableMatch.registerObject(&quot;vhdl&quot;,vhdl);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/VHDLTGGCodeAdapter/model/VHDLTGGCodeAdapter.ecore#//Rules/Entity2CompositeBlock/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/VHDLTGGCodeAdapter/model/VHDLTGGCodeAdapter.ecore#//Rules/Entity2CompositeBlock/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_portName_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;portName.name&quot;, csp);&#xD;&#xA;var_portName_name.setType(&quot;String&quot;);&#xD;&#xA;Variable var_port_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;port.name&quot;, csp);&#xD;&#xA;var_port_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_portName_name,var_port_name);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;composite&quot;,composite);&#xD;&#xA;isApplicableMatch.registerObject(&quot;entity2composite&quot;,entity2composite);&#xD;&#xA;isApplicableMatch.registerObject(&quot;entity&quot;,entity);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/VHDLTGGCodeAdapter/model/VHDLTGGCodeAdapter.ecore#//Rules/HandleInPort/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/VHDLTGGCodeAdapter/model/VHDLTGGCodeAdapter.ecore#//Rules/HandleInPort/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xD;&#xA;literal0.setValue(&quot;.vhdl&quot;);&#xD;&#xA;literal0.setType(&quot;&quot;);&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_spec_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;spec.name&quot;, csp);&#xD;&#xA;var_spec_name.setType(&quot;String&quot;);&#xD;&#xA;Variable var_file_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;file.name&quot;, csp);&#xD;&#xA;var_file_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;AddPrefix addPrefix = new AddPrefix();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(addPrefix);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;addPrefix.setRuleName(&quot;&quot;);&#xD;&#xA;addPrefix.solve(var_spec_name,literal0,var_file_name);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/VHDLTGGCodeAdapter/model/VHDLTGGCodeAdapter.ecore#//Rules/File2VHDLSpec/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/VHDLTGGCodeAdapter/model/VHDLTGGCodeAdapter.ecore#//Rules/File2VHDLSpec/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_portName_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;portName.name&quot;, csp);&#xD;&#xA;var_portName_name.setType(&quot;String&quot;);&#xD;&#xA;Variable var_port_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;port.name&quot;, csp);&#xD;&#xA;var_port_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_portName_name,var_port_name);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;composite&quot;,composite);&#xD;&#xA;isApplicableMatch.registerObject(&quot;entity2composite&quot;,entity2composite);&#xD;&#xA;isApplicableMatch.registerObject(&quot;entity&quot;,entity);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/VHDLTGGCodeAdapter/model/VHDLTGGCodeAdapter.ecore#//Rules/HandleOutPort/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/VHDLTGGCodeAdapter/model/VHDLTGGCodeAdapter.ecore#//Rules/HandleOutPort/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_leftExtern_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;leftExtern.name&quot;, true, csp);&#xD;&#xA;var_leftExtern_name.setValue(leftExtern.getName());&#xD;&#xA;var_leftExtern_name.setType(&quot;String&quot;);&#xD;&#xA;Variable var_rightExtern_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;rightExtern.name&quot;, true, csp);&#xD;&#xA;var_rightExtern_name.setValue(rightExtern.getName());&#xD;&#xA;var_rightExtern_name.setType(&quot;String&quot;);&#xD;&#xA;Variable var_outExternal_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;outExternal.name&quot;, true, csp);&#xD;&#xA;var_outExternal_name.setValue(outExternal.getName());&#xD;&#xA;var_outExternal_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_left_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;left.name&quot;, csp);&#xD;&#xA;var_left_name.setType(&quot;String&quot;);&#xD;&#xA;Variable var_right_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;right.name&quot;, csp);&#xD;&#xA;var_right_name.setType(&quot;String&quot;);&#xD;&#xA;Variable var_mapping_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mapping.name&quot;, csp);&#xD;&#xA;var_mapping_name.setType(&quot;String&quot;);&#xD;&#xA;Variable var_mapping_index = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mapping.index&quot;, csp);&#xD;&#xA;var_mapping_index.setType(&quot;int&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();Eq eq_0 = new Eq();Eq eq_1 = new Eq();NextIndex nextIndex = new NextIndex();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;csp.getConstraints().add(eq_0);&#xD;&#xA;csp.getConstraints().add(eq_1);&#xD;&#xA;csp.getConstraints().add(nextIndex);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_leftExtern_name,var_left_name);&#xD;&#xA;eq_0.setRuleName(&quot;&quot;);&#xD;&#xA;eq_0.solve(var_rightExtern_name,var_right_name);&#xD;&#xA;eq_1.setRuleName(&quot;&quot;);&#xD;&#xA;eq_1.solve(var_outExternal_name,var_mapping_name);&#xD;&#xA;nextIndex.setRuleName(&quot;&quot;);&#xD;&#xA;nextIndex.solve(var_mapping_index);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;compositeBlock&quot;,compositeBlock);&#xD;&#xA;isApplicableMatch.registerObject(&quot;entityNode&quot;,entityNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;inputPortNode2&quot;,inputPortNode2);&#xD;&#xA;isApplicableMatch.registerObject(&quot;leftExtern&quot;,leftExtern);&#xD;&#xA;isApplicableMatch.registerObject(&quot;node2composite&quot;,node2composite);&#xD;&#xA;isApplicableMatch.registerObject(&quot;node2inputPort2&quot;,node2inputPort2);&#xD;&#xA;isApplicableMatch.registerObject(&quot;rightExtern&quot;,rightExtern);&#xD;&#xA;isApplicableMatch.registerObject(&quot;gate2composite&quot;,gate2composite);&#xD;&#xA;isApplicableMatch.registerObject(&quot;gateNode&quot;,gateNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;inputPortNode1&quot;,inputPortNode1);&#xD;&#xA;isApplicableMatch.registerObject(&quot;node2InputPort1&quot;,node2InputPort1);&#xD;&#xA;isApplicableMatch.registerObject(&quot;node2OutputPort&quot;,node2OutputPort);&#xD;&#xA;isApplicableMatch.registerObject(&quot;outExternal&quot;,outExternal);&#xD;&#xA;isApplicableMatch.registerObject(&quot;outputPortNode&quot;,outputPortNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;vhdlNode&quot;,vhdlNode);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/VHDLTGGCodeAdapter/model/VHDLTGGCodeAdapter.ecore#//Rules/Mapping2AndGate/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/VHDLTGGCodeAdapter/model/VHDLTGGCodeAdapter.ecore#//Rules/Mapping2AndGate/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_leftExtern_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;leftExtern.name&quot;, true, csp);&#xD;&#xA;var_leftExtern_name.setValue(leftExtern.getName());&#xD;&#xA;var_leftExtern_name.setType(&quot;String&quot;);&#xD;&#xA;Variable var_rightExtern_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;rightExtern.name&quot;, true, csp);&#xD;&#xA;var_rightExtern_name.setValue(rightExtern.getName());&#xD;&#xA;var_rightExtern_name.setType(&quot;String&quot;);&#xD;&#xA;Variable var_outExternal_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;outExternal.name&quot;, true, csp);&#xD;&#xA;var_outExternal_name.setValue(outExternal.getName());&#xD;&#xA;var_outExternal_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_left_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;left.name&quot;, csp);&#xD;&#xA;var_left_name.setType(&quot;String&quot;);&#xD;&#xA;Variable var_right_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;right.name&quot;, csp);&#xD;&#xA;var_right_name.setType(&quot;String&quot;);&#xD;&#xA;Variable var_mapping_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mapping.name&quot;, csp);&#xD;&#xA;var_mapping_name.setType(&quot;String&quot;);&#xD;&#xA;Variable var_mapping_index = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mapping.index&quot;, csp);&#xD;&#xA;var_mapping_index.setType(&quot;int&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();Eq eq_0 = new Eq();Eq eq_1 = new Eq();NextIndex nextIndex = new NextIndex();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;csp.getConstraints().add(eq_0);&#xD;&#xA;csp.getConstraints().add(eq_1);&#xD;&#xA;csp.getConstraints().add(nextIndex);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_leftExtern_name,var_left_name);&#xD;&#xA;eq_0.setRuleName(&quot;&quot;);&#xD;&#xA;eq_0.solve(var_rightExtern_name,var_right_name);&#xD;&#xA;eq_1.setRuleName(&quot;&quot;);&#xD;&#xA;eq_1.solve(var_outExternal_name,var_mapping_name);&#xD;&#xA;nextIndex.setRuleName(&quot;&quot;);&#xD;&#xA;nextIndex.solve(var_mapping_index);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;compositeBlock&quot;,compositeBlock);&#xD;&#xA;isApplicableMatch.registerObject(&quot;entityNode&quot;,entityNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;inputPortNode2&quot;,inputPortNode2);&#xD;&#xA;isApplicableMatch.registerObject(&quot;leftExtern&quot;,leftExtern);&#xD;&#xA;isApplicableMatch.registerObject(&quot;node2composite&quot;,node2composite);&#xD;&#xA;isApplicableMatch.registerObject(&quot;node2inputPort2&quot;,node2inputPort2);&#xD;&#xA;isApplicableMatch.registerObject(&quot;rightExtern&quot;,rightExtern);&#xD;&#xA;isApplicableMatch.registerObject(&quot;gate2composite&quot;,gate2composite);&#xD;&#xA;isApplicableMatch.registerObject(&quot;gateNode&quot;,gateNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;inputPortNode1&quot;,inputPortNode1);&#xD;&#xA;isApplicableMatch.registerObject(&quot;node2InputPort1&quot;,node2InputPort1);&#xD;&#xA;isApplicableMatch.registerObject(&quot;node2OutputPort&quot;,node2OutputPort);&#xD;&#xA;isApplicableMatch.registerObject(&quot;outExternal&quot;,outExternal);&#xD;&#xA;isApplicableMatch.registerObject(&quot;outputPortNode&quot;,outputPortNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;vhdlNode&quot;,vhdlNode);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/VHDLTGGCodeAdapter/model/VHDLTGGCodeAdapter.ecore#//Rules/Mapping2OrGate/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/VHDLTGGCodeAdapter/model/VHDLTGGCodeAdapter.ecore#//Rules/Mapping2OrGate/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_leftExtern_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;leftExtern.name&quot;, true, csp);&#xD;&#xA;var_leftExtern_name.setValue(leftExtern.getName());&#xD;&#xA;var_leftExtern_name.setType(&quot;String&quot;);&#xD;&#xA;Variable var_outExternal_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;outExternal.name&quot;, true, csp);&#xD;&#xA;var_outExternal_name.setValue(outExternal.getName());&#xD;&#xA;var_outExternal_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_port_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;port.name&quot;, csp);&#xD;&#xA;var_port_name.setType(&quot;String&quot;);&#xD;&#xA;Variable var_mapping_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mapping.name&quot;, csp);&#xD;&#xA;var_mapping_name.setType(&quot;String&quot;);&#xD;&#xA;Variable var_mapping_index = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mapping.index&quot;, csp);&#xD;&#xA;var_mapping_index.setType(&quot;int&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();Eq eq_0 = new Eq();NextIndex nextIndex = new NextIndex();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;csp.getConstraints().add(eq_0);&#xD;&#xA;csp.getConstraints().add(nextIndex);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_leftExtern_name,var_port_name);&#xD;&#xA;eq_0.setRuleName(&quot;&quot;);&#xD;&#xA;eq_0.solve(var_outExternal_name,var_mapping_name);&#xD;&#xA;nextIndex.setRuleName(&quot;&quot;);&#xD;&#xA;nextIndex.solve(var_mapping_index);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;leftExtern&quot;,leftExtern);&#xD;&#xA;isApplicableMatch.registerObject(&quot;compositeBlock&quot;,compositeBlock);&#xD;&#xA;isApplicableMatch.registerObject(&quot;entity2composite&quot;,entity2composite);&#xD;&#xA;isApplicableMatch.registerObject(&quot;entityNode&quot;,entityNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;gate2composite&quot;,gate2composite);&#xD;&#xA;isApplicableMatch.registerObject(&quot;gateNode&quot;,gateNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;inputPortNode1&quot;,inputPortNode1);&#xD;&#xA;isApplicableMatch.registerObject(&quot;node2InputPort1&quot;,node2InputPort1);&#xD;&#xA;isApplicableMatch.registerObject(&quot;node2OutputPort&quot;,node2OutputPort);&#xD;&#xA;isApplicableMatch.registerObject(&quot;outExternal&quot;,outExternal);&#xD;&#xA;isApplicableMatch.registerObject(&quot;outputPortNode&quot;,outputPortNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;vhdlNode&quot;,vhdlNode);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/VHDLTGGCodeAdapter/model/VHDLTGGCodeAdapter.ecore#//Rules/Mapping2NotGate/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/VHDLTGGCodeAdapter/model/VHDLTGGCodeAdapter.ecore#//Rules/Mapping2NotGate/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <importInjectionEntries content="org.moflon.csp.*">
    <eClass href="platform:/plugin/VHDLTGGCodeAdapter/model/VHDLTGGCodeAdapter.ecore#//Rules/Entity2CompositeBlock"/>
  </importInjectionEntries>
  <importInjectionEntries content="csp.constraints.*">
    <eClass href="platform:/plugin/VHDLTGGCodeAdapter/model/VHDLTGGCodeAdapter.ecore#//Rules/Entity2CompositeBlock"/>
  </importInjectionEntries>
  <importInjectionEntries content="TGGLanguage.csp.*">
    <eClass href="platform:/plugin/VHDLTGGCodeAdapter/model/VHDLTGGCodeAdapter.ecore#//Rules/Entity2CompositeBlock"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.csp.*">
    <eClass href="platform:/plugin/VHDLTGGCodeAdapter/model/VHDLTGGCodeAdapter.ecore#//Rules/HandleInPort"/>
  </importInjectionEntries>
  <importInjectionEntries content="csp.constraints.*">
    <eClass href="platform:/plugin/VHDLTGGCodeAdapter/model/VHDLTGGCodeAdapter.ecore#//Rules/HandleInPort"/>
  </importInjectionEntries>
  <importInjectionEntries content="TGGLanguage.csp.*">
    <eClass href="platform:/plugin/VHDLTGGCodeAdapter/model/VHDLTGGCodeAdapter.ecore#//Rules/HandleInPort"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.csp.*">
    <eClass href="platform:/plugin/VHDLTGGCodeAdapter/model/VHDLTGGCodeAdapter.ecore#//Rules/File2VHDLSpec"/>
  </importInjectionEntries>
  <importInjectionEntries content="csp.constraints.*">
    <eClass href="platform:/plugin/VHDLTGGCodeAdapter/model/VHDLTGGCodeAdapter.ecore#//Rules/File2VHDLSpec"/>
  </importInjectionEntries>
  <importInjectionEntries content="TGGLanguage.csp.*">
    <eClass href="platform:/plugin/VHDLTGGCodeAdapter/model/VHDLTGGCodeAdapter.ecore#//Rules/File2VHDLSpec"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.csp.*">
    <eClass href="platform:/plugin/VHDLTGGCodeAdapter/model/VHDLTGGCodeAdapter.ecore#//Rules/HandleOutPort"/>
  </importInjectionEntries>
  <importInjectionEntries content="csp.constraints.*">
    <eClass href="platform:/plugin/VHDLTGGCodeAdapter/model/VHDLTGGCodeAdapter.ecore#//Rules/HandleOutPort"/>
  </importInjectionEntries>
  <importInjectionEntries content="TGGLanguage.csp.*">
    <eClass href="platform:/plugin/VHDLTGGCodeAdapter/model/VHDLTGGCodeAdapter.ecore#//Rules/HandleOutPort"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.csp.*">
    <eClass href="platform:/plugin/VHDLTGGCodeAdapter/model/VHDLTGGCodeAdapter.ecore#//Rules/Mapping2AndGate"/>
  </importInjectionEntries>
  <importInjectionEntries content="csp.constraints.*">
    <eClass href="platform:/plugin/VHDLTGGCodeAdapter/model/VHDLTGGCodeAdapter.ecore#//Rules/Mapping2AndGate"/>
  </importInjectionEntries>
  <importInjectionEntries content="TGGLanguage.csp.*">
    <eClass href="platform:/plugin/VHDLTGGCodeAdapter/model/VHDLTGGCodeAdapter.ecore#//Rules/Mapping2AndGate"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.csp.*">
    <eClass href="platform:/plugin/VHDLTGGCodeAdapter/model/VHDLTGGCodeAdapter.ecore#//Rules/Mapping2OrGate"/>
  </importInjectionEntries>
  <importInjectionEntries content="csp.constraints.*">
    <eClass href="platform:/plugin/VHDLTGGCodeAdapter/model/VHDLTGGCodeAdapter.ecore#//Rules/Mapping2OrGate"/>
  </importInjectionEntries>
  <importInjectionEntries content="TGGLanguage.csp.*">
    <eClass href="platform:/plugin/VHDLTGGCodeAdapter/model/VHDLTGGCodeAdapter.ecore#//Rules/Mapping2OrGate"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.csp.*">
    <eClass href="platform:/plugin/VHDLTGGCodeAdapter/model/VHDLTGGCodeAdapter.ecore#//Rules/Mapping2NotGate"/>
  </importInjectionEntries>
  <importInjectionEntries content="csp.constraints.*">
    <eClass href="platform:/plugin/VHDLTGGCodeAdapter/model/VHDLTGGCodeAdapter.ecore#//Rules/Mapping2NotGate"/>
  </importInjectionEntries>
  <importInjectionEntries content="TGGLanguage.csp.*">
    <eClass href="platform:/plugin/VHDLTGGCodeAdapter/model/VHDLTGGCodeAdapter.ecore#//Rules/Mapping2NotGate"/>
  </importInjectionEntries>
</sdmUtil:CompilerInjection>
