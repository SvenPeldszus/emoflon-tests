<?xml version="1.0" encoding="ASCII"?>
<sdmUtil:CompilerInjection xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:sdmUtil="platform:/plugin/SDMLanguage/model/SDMLanguage.ecore#//sdmUtil">
  <importInjectionEntries content="org.moflon.csp.*">
    <eClass href="platform:/plugin/ProcessCodeAdapter/model/ProcessCodeAdapter.ecore#//Rules/NodeToInvocationRecursiveRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="csp.constraints.*">
    <eClass href="platform:/plugin/ProcessCodeAdapter/model/ProcessCodeAdapter.ecore#//Rules/NodeToInvocationRecursiveRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/ProcessCodeAdapter/model/ProcessCodeAdapter.ecore#//Rules/NodeToInvocationRecursiveRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.csp.*">
    <eClass href="platform:/plugin/ProcessCodeAdapter/model/ProcessCodeAdapter.ecore#//Rules/NodeToInvocationDifferentModuleRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="csp.constraints.*">
    <eClass href="platform:/plugin/ProcessCodeAdapter/model/ProcessCodeAdapter.ecore#//Rules/NodeToInvocationDifferentModuleRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/ProcessCodeAdapter/model/ProcessCodeAdapter.ecore#//Rules/NodeToInvocationDifferentModuleRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.csp.*">
    <eClass href="platform:/plugin/ProcessCodeAdapter/model/ProcessCodeAdapter.ecore#//Rules/NodeToImportRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="csp.constraints.*">
    <eClass href="platform:/plugin/ProcessCodeAdapter/model/ProcessCodeAdapter.ecore#//Rules/NodeToImportRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/ProcessCodeAdapter/model/ProcessCodeAdapter.ecore#//Rules/NodeToImportRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.csp.*">
    <eClass href="platform:/plugin/ProcessCodeAdapter/model/ProcessCodeAdapter.ecore#//Rules/NodeToInvocationRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="csp.constraints.*">
    <eClass href="platform:/plugin/ProcessCodeAdapter/model/ProcessCodeAdapter.ecore#//Rules/NodeToInvocationRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/ProcessCodeAdapter/model/ProcessCodeAdapter.ecore#//Rules/NodeToInvocationRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.csp.*">
    <eClass href="platform:/plugin/ProcessCodeAdapter/model/ProcessCodeAdapter.ecore#//Rules/SubFolderToModuleRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="csp.constraints.*">
    <eClass href="platform:/plugin/ProcessCodeAdapter/model/ProcessCodeAdapter.ecore#//Rules/SubFolderToModuleRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/ProcessCodeAdapter/model/ProcessCodeAdapter.ecore#//Rules/SubFolderToModuleRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.csp.*">
    <eClass href="platform:/plugin/ProcessCodeAdapter/model/ProcessCodeAdapter.ecore#//Rules/RootToSystemRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="csp.constraints.*">
    <eClass href="platform:/plugin/ProcessCodeAdapter/model/ProcessCodeAdapter.ecore#//Rules/RootToSystemRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/ProcessCodeAdapter/model/ProcessCodeAdapter.ecore#//Rules/RootToSystemRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.csp.*">
    <eClass href="platform:/plugin/ProcessCodeAdapter/model/ProcessCodeAdapter.ecore#//Rules/FileToTaskRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="csp.constraints.*">
    <eClass href="platform:/plugin/ProcessCodeAdapter/model/ProcessCodeAdapter.ecore#//Rules/FileToTaskRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/ProcessCodeAdapter/model/ProcessCodeAdapter.ecore#//Rules/FileToTaskRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/ProcessCodeAdapter/model/ProcessCodeAdapter.ecore#//Rules/NodeToInvocationRecursiveRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/ProcessCodeAdapter/model/ProcessCodeAdapter.ecore#//Rules/NodeToInvocationRecursiveRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/ProcessCodeAdapter/model/ProcessCodeAdapter.ecore#//Rules/NodeToInvocationRecursiveRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/ProcessCodeAdapter/model/ProcessCodeAdapter.ecore#//Rules/NodeToInvocationRecursiveRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/ProcessCodeAdapter/model/ProcessCodeAdapter.ecore#//Rules/NodeToInvocationRecursiveRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/ProcessCodeAdapter/model/ProcessCodeAdapter.ecore#//Rules/NodeToInvocationRecursiveRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/ProcessCodeAdapter/model/ProcessCodeAdapter.ecore#//Rules/NodeToInvocationRecursiveRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/ProcessCodeAdapter/model/ProcessCodeAdapter.ecore#//Rules/NodeToInvocationRecursiveRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/ProcessCodeAdapter/model/ProcessCodeAdapter.ecore#//Rules/NodeToInvocationDifferentModuleRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/ProcessCodeAdapter/model/ProcessCodeAdapter.ecore#//Rules/NodeToInvocationDifferentModuleRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/ProcessCodeAdapter/model/ProcessCodeAdapter.ecore#//Rules/NodeToInvocationDifferentModuleRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/ProcessCodeAdapter/model/ProcessCodeAdapter.ecore#//Rules/NodeToInvocationDifferentModuleRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/ProcessCodeAdapter/model/ProcessCodeAdapter.ecore#//Rules/NodeToInvocationDifferentModuleRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/ProcessCodeAdapter/model/ProcessCodeAdapter.ecore#//Rules/NodeToInvocationDifferentModuleRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/ProcessCodeAdapter/model/ProcessCodeAdapter.ecore#//Rules/NodeToInvocationDifferentModuleRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/ProcessCodeAdapter/model/ProcessCodeAdapter.ecore#//Rules/NodeToInvocationDifferentModuleRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/ProcessCodeAdapter/model/ProcessCodeAdapter.ecore#//Rules/NodeToImportRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/ProcessCodeAdapter/model/ProcessCodeAdapter.ecore#//Rules/NodeToImportRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/ProcessCodeAdapter/model/ProcessCodeAdapter.ecore#//Rules/NodeToImportRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/ProcessCodeAdapter/model/ProcessCodeAdapter.ecore#//Rules/NodeToImportRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/ProcessCodeAdapter/model/ProcessCodeAdapter.ecore#//Rules/NodeToImportRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/ProcessCodeAdapter/model/ProcessCodeAdapter.ecore#//Rules/NodeToImportRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/ProcessCodeAdapter/model/ProcessCodeAdapter.ecore#//Rules/NodeToImportRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/ProcessCodeAdapter/model/ProcessCodeAdapter.ecore#//Rules/NodeToImportRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/ProcessCodeAdapter/model/ProcessCodeAdapter.ecore#//Rules/NodeToInvocationRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/ProcessCodeAdapter/model/ProcessCodeAdapter.ecore#//Rules/NodeToInvocationRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/ProcessCodeAdapter/model/ProcessCodeAdapter.ecore#//Rules/NodeToInvocationRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/ProcessCodeAdapter/model/ProcessCodeAdapter.ecore#//Rules/NodeToInvocationRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/ProcessCodeAdapter/model/ProcessCodeAdapter.ecore#//Rules/NodeToInvocationRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/ProcessCodeAdapter/model/ProcessCodeAdapter.ecore#//Rules/NodeToInvocationRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/ProcessCodeAdapter/model/ProcessCodeAdapter.ecore#//Rules/NodeToInvocationRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/ProcessCodeAdapter/model/ProcessCodeAdapter.ecore#//Rules/NodeToInvocationRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/ProcessCodeAdapter/model/ProcessCodeAdapter.ecore#//Rules/SubFolderToModuleRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/ProcessCodeAdapter/model/ProcessCodeAdapter.ecore#//Rules/SubFolderToModuleRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/ProcessCodeAdapter/model/ProcessCodeAdapter.ecore#//Rules/SubFolderToModuleRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/ProcessCodeAdapter/model/ProcessCodeAdapter.ecore#//Rules/SubFolderToModuleRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/ProcessCodeAdapter/model/ProcessCodeAdapter.ecore#//Rules/SubFolderToModuleRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/ProcessCodeAdapter/model/ProcessCodeAdapter.ecore#//Rules/SubFolderToModuleRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/ProcessCodeAdapter/model/ProcessCodeAdapter.ecore#//Rules/SubFolderToModuleRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/ProcessCodeAdapter/model/ProcessCodeAdapter.ecore#//Rules/SubFolderToModuleRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/ProcessCodeAdapter/model/ProcessCodeAdapter.ecore#//Rules/RootToSystemRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/ProcessCodeAdapter/model/ProcessCodeAdapter.ecore#//Rules/RootToSystemRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/ProcessCodeAdapter/model/ProcessCodeAdapter.ecore#//Rules/RootToSystemRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/ProcessCodeAdapter/model/ProcessCodeAdapter.ecore#//Rules/RootToSystemRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/ProcessCodeAdapter/model/ProcessCodeAdapter.ecore#//Rules/RootToSystemRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/ProcessCodeAdapter/model/ProcessCodeAdapter.ecore#//Rules/RootToSystemRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/ProcessCodeAdapter/model/ProcessCodeAdapter.ecore#//Rules/RootToSystemRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/ProcessCodeAdapter/model/ProcessCodeAdapter.ecore#//Rules/RootToSystemRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/ProcessCodeAdapter/model/ProcessCodeAdapter.ecore#//Rules/FileToTaskRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/ProcessCodeAdapter/model/ProcessCodeAdapter.ecore#//Rules/FileToTaskRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/ProcessCodeAdapter/model/ProcessCodeAdapter.ecore#//Rules/FileToTaskRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/ProcessCodeAdapter/model/ProcessCodeAdapter.ecore#//Rules/FileToTaskRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/ProcessCodeAdapter/model/ProcessCodeAdapter.ecore#//Rules/FileToTaskRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/ProcessCodeAdapter/model/ProcessCodeAdapter.ecore#//Rules/FileToTaskRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/ProcessCodeAdapter/model/ProcessCodeAdapter.ecore#//Rules/FileToTaskRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/ProcessCodeAdapter/model/ProcessCodeAdapter.ecore#//Rules/FileToTaskRule"/>
  </importInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xD;&#xA;literal0.setValue(&quot;.proc&quot;);&#xD;&#xA;literal0.setType(&quot;&quot;);&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_invocationNode_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;invocationNode.name&quot;, true, csp);&#xD;&#xA;var_invocationNode_name.setValue(invocationNode.getName());&#xD;&#xA;var_invocationNode_name.setType(&quot;String&quot;);&#xD;&#xA;Variable var_file_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;file.name&quot;, true, csp);&#xD;&#xA;var_file_name.setValue(file.getName());&#xD;&#xA;var_file_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;AddPrefix addPrefix = new AddPrefix();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(addPrefix);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;addPrefix.setRuleName(&quot;NoRuleName&quot;);&#xD;&#xA;addPrefix.solve(var_invocationNode_name,literal0,var_file_name);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/ProcessCodeAdapter/model/ProcessCodeAdapter.ecore#//Rules/NodeToInvocationRecursiveRule/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;file&quot;, file);&#xA;match.registerObject(&quot;folder&quot;, folder);&#xA;match.registerObject(&quot;invocationsNode&quot;, invocationsNode);&#xA;match.registerObject(&quot;invocationNode&quot;, invocationNode);&#xA;match.registerObject(&quot;taskNode&quot;, taskNode);&#xA;">
    <eOperation href="platform:/plugin/ProcessCodeAdapter/model/ProcessCodeAdapter.ecore#//Rules/NodeToInvocationRecursiveRule/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/ProcessCodeAdapter/model/ProcessCodeAdapter.ecore#//Rules/NodeToInvocationRecursiveRule/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;task&quot;,task);&#xD;&#xA;isApplicableMatch.registerObject(&quot;file&quot;,file);&#xD;&#xA;isApplicableMatch.registerObject(&quot;system&quot;,system);&#xD;&#xA;isApplicableMatch.registerObject(&quot;folder&quot;,folder);&#xD;&#xA;isApplicableMatch.registerObject(&quot;invocationsNode&quot;,invocationsNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;invocationNode&quot;,invocationNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;taskNode&quot;,taskNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;fileToTask&quot;,fileToTask);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/ProcessCodeAdapter/model/ProcessCodeAdapter.ecore#//Rules/NodeToInvocationRecursiveRule/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/ProcessCodeAdapter/model/ProcessCodeAdapter.ecore#//Rules/NodeToInvocationRecursiveRule/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;invocation&quot;, invocation);&#xA;ruleresult.registerObject(&quot;task&quot;, task);&#xA;ruleresult.registerObject(&quot;file&quot;, file);&#xA;ruleresult.registerObject(&quot;system&quot;, system);&#xA;ruleresult.registerObject(&quot;folder&quot;, folder);&#xA;ruleresult.registerObject(&quot;invocationsNode&quot;, invocationsNode);&#xA;ruleresult.registerObject(&quot;invocationNode&quot;, invocationNode);&#xA;ruleresult.registerObject(&quot;taskNode&quot;, taskNode);&#xA;ruleresult.registerObject(&quot;invocationNodeToInvocation&quot;, invocationNodeToInvocation);&#xA;ruleresult.registerObject(&quot;fileToTask&quot;, fileToTask);&#xA;">
    <eOperation href="platform:/plugin/ProcessCodeAdapter/model/ProcessCodeAdapter.ecore#//Rules/NodeToInvocationRecursiveRule/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;invocationNode&quot;).eClass()).equals(&quot;MocaTree.Node.&quot;);">
    <eOperation href="platform:/plugin/ProcessCodeAdapter/model/ProcessCodeAdapter.ecore#//Rules/NodeToInvocationRecursiveRule/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/ProcessCodeAdapter/model/ProcessCodeAdapter.ecore#//Rules/NodeToInvocationRecursiveRule/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;invocation&quot;, invocation);&#xA;match.registerObject(&quot;task&quot;, task);&#xA;match.registerObject(&quot;system&quot;, system);&#xA;">
    <eOperation href="platform:/plugin/ProcessCodeAdapter/model/ProcessCodeAdapter.ecore#//Rules/NodeToInvocationRecursiveRule/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/ProcessCodeAdapter/model/ProcessCodeAdapter.ecore#//Rules/NodeToInvocationRecursiveRule/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xD;&#xA;literal0.setValue(&quot;.proc&quot;);&#xD;&#xA;literal0.setType(&quot;&quot;);&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_file_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;file.name&quot;, true, csp);&#xD;&#xA;var_file_name.setValue(file.getName());&#xD;&#xA;var_file_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_invocationNode_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;invocationNode.name&quot;, csp);&#xD;&#xA;var_invocationNode_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;AddPrefix addPrefix = new AddPrefix();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(addPrefix);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;addPrefix.setRuleName(&quot;NoRuleName&quot;);&#xD;&#xA;addPrefix.solve(var_invocationNode_name,literal0,var_file_name);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;invocation&quot;,invocation);&#xD;&#xA;isApplicableMatch.registerObject(&quot;task&quot;,task);&#xD;&#xA;isApplicableMatch.registerObject(&quot;file&quot;,file);&#xD;&#xA;isApplicableMatch.registerObject(&quot;system&quot;,system);&#xD;&#xA;isApplicableMatch.registerObject(&quot;folder&quot;,folder);&#xD;&#xA;isApplicableMatch.registerObject(&quot;invocationsNode&quot;,invocationsNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;taskNode&quot;,taskNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;fileToTask&quot;,fileToTask);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/ProcessCodeAdapter/model/ProcessCodeAdapter.ecore#//Rules/NodeToInvocationRecursiveRule/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/ProcessCodeAdapter/model/ProcessCodeAdapter.ecore#//Rules/NodeToInvocationRecursiveRule/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;invocation&quot;, invocation);&#xA;ruleresult.registerObject(&quot;task&quot;, task);&#xA;ruleresult.registerObject(&quot;file&quot;, file);&#xA;ruleresult.registerObject(&quot;system&quot;, system);&#xA;ruleresult.registerObject(&quot;folder&quot;, folder);&#xA;ruleresult.registerObject(&quot;invocationsNode&quot;, invocationsNode);&#xA;ruleresult.registerObject(&quot;invocationNode&quot;, invocationNode);&#xA;ruleresult.registerObject(&quot;taskNode&quot;, taskNode);&#xA;ruleresult.registerObject(&quot;invocationNodeToInvocation&quot;, invocationNodeToInvocation);&#xA;ruleresult.registerObject(&quot;fileToTask&quot;, fileToTask);&#xA;">
    <eOperation href="platform:/plugin/ProcessCodeAdapter/model/ProcessCodeAdapter.ecore#//Rules/NodeToInvocationRecursiveRule/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;invocation&quot;).eClass()).equals(&quot;ProcessDefinition.Invocation.&quot;);">
    <eOperation href="platform:/plugin/ProcessCodeAdapter/model/ProcessCodeAdapter.ecore#//Rules/NodeToInvocationRecursiveRule/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xD;&#xA;literal0.setValue(&quot;.proc&quot;);&#xD;&#xA;literal0.setType(&quot;&quot;);&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_invocationNode_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;invocationNode.name&quot;, true, csp);&#xD;&#xA;var_invocationNode_name.setValue(invocationNode.getName());&#xD;&#xA;var_invocationNode_name.setType(&quot;String&quot;);&#xD;&#xA;Variable var_otherFile_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;otherFile.name&quot;, true, csp);&#xD;&#xA;var_otherFile_name.setValue(otherFile.getName());&#xD;&#xA;var_otherFile_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;AddPrefix addPrefix = new AddPrefix();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(addPrefix);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;addPrefix.setRuleName(&quot;NoRuleName&quot;);&#xD;&#xA;addPrefix.solve(var_invocationNode_name,literal0,var_otherFile_name);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/ProcessCodeAdapter/model/ProcessCodeAdapter.ecore#//Rules/NodeToInvocationDifferentModuleRule/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;otherFolder&quot;, otherFolder);&#xA;match.registerObject(&quot;rootFolder&quot;, rootFolder);&#xA;match.registerObject(&quot;invocationNode&quot;, invocationNode);&#xA;match.registerObject(&quot;taskNode&quot;, taskNode);&#xA;match.registerObject(&quot;otherFile&quot;, otherFile);&#xA;match.registerObject(&quot;folder&quot;, folder);&#xA;match.registerObject(&quot;file&quot;, file);&#xA;match.registerObject(&quot;invocationsNode&quot;, invocationsNode);&#xA;">
    <eOperation href="platform:/plugin/ProcessCodeAdapter/model/ProcessCodeAdapter.ecore#//Rules/NodeToInvocationDifferentModuleRule/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/ProcessCodeAdapter/model/ProcessCodeAdapter.ecore#//Rules/NodeToInvocationDifferentModuleRule/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;otherFolder&quot;,otherFolder);&#xD;&#xA;isApplicableMatch.registerObject(&quot;rootFolder&quot;,rootFolder);&#xD;&#xA;isApplicableMatch.registerObject(&quot;invocationNode&quot;,invocationNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;taskNode&quot;,taskNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;otherFile&quot;,otherFile);&#xD;&#xA;isApplicableMatch.registerObject(&quot;folder&quot;,folder);&#xD;&#xA;isApplicableMatch.registerObject(&quot;system&quot;,system);&#xD;&#xA;isApplicableMatch.registerObject(&quot;task&quot;,task);&#xD;&#xA;isApplicableMatch.registerObject(&quot;file&quot;,file);&#xD;&#xA;isApplicableMatch.registerObject(&quot;invokedTask&quot;,invokedTask);&#xD;&#xA;isApplicableMatch.registerObject(&quot;invocationsNode&quot;,invocationsNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;file2Task2&quot;,file2Task2);&#xD;&#xA;isApplicableMatch.registerObject(&quot;fileToTask&quot;,fileToTask);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/ProcessCodeAdapter/model/ProcessCodeAdapter.ecore#//Rules/NodeToInvocationDifferentModuleRule/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/ProcessCodeAdapter/model/ProcessCodeAdapter.ecore#//Rules/NodeToInvocationDifferentModuleRule/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;otherFolder&quot;, otherFolder);&#xA;ruleresult.registerObject(&quot;rootFolder&quot;, rootFolder);&#xA;ruleresult.registerObject(&quot;invocationNode&quot;, invocationNode);&#xA;ruleresult.registerObject(&quot;taskNode&quot;, taskNode);&#xA;ruleresult.registerObject(&quot;invocationNodeToInvocation&quot;, invocationNodeToInvocation);&#xA;ruleresult.registerObject(&quot;otherFile&quot;, otherFile);&#xA;ruleresult.registerObject(&quot;invocation&quot;, invocation);&#xA;ruleresult.registerObject(&quot;folder&quot;, folder);&#xA;ruleresult.registerObject(&quot;system&quot;, system);&#xA;ruleresult.registerObject(&quot;task&quot;, task);&#xA;ruleresult.registerObject(&quot;file&quot;, file);&#xA;ruleresult.registerObject(&quot;invokedTask&quot;, invokedTask);&#xA;ruleresult.registerObject(&quot;invocationsNode&quot;, invocationsNode);&#xA;ruleresult.registerObject(&quot;file2Task2&quot;, file2Task2);&#xA;ruleresult.registerObject(&quot;fileToTask&quot;, fileToTask);&#xA;">
    <eOperation href="platform:/plugin/ProcessCodeAdapter/model/ProcessCodeAdapter.ecore#//Rules/NodeToInvocationDifferentModuleRule/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;invocationNode&quot;).eClass()).equals(&quot;MocaTree.Node.&quot;);">
    <eOperation href="platform:/plugin/ProcessCodeAdapter/model/ProcessCodeAdapter.ecore#//Rules/NodeToInvocationDifferentModuleRule/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/ProcessCodeAdapter/model/ProcessCodeAdapter.ecore#//Rules/NodeToInvocationDifferentModuleRule/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;invocation&quot;, invocation);&#xA;match.registerObject(&quot;system&quot;, system);&#xA;match.registerObject(&quot;task&quot;, task);&#xA;match.registerObject(&quot;invokedTask&quot;, invokedTask);&#xA;">
    <eOperation href="platform:/plugin/ProcessCodeAdapter/model/ProcessCodeAdapter.ecore#//Rules/NodeToInvocationDifferentModuleRule/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/ProcessCodeAdapter/model/ProcessCodeAdapter.ecore#//Rules/NodeToInvocationDifferentModuleRule/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xD;&#xA;literal0.setValue(&quot;.proc&quot;);&#xD;&#xA;literal0.setType(&quot;&quot;);&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_otherFile_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;otherFile.name&quot;, true, csp);&#xD;&#xA;var_otherFile_name.setValue(otherFile.getName());&#xD;&#xA;var_otherFile_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_invocationNode_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;invocationNode.name&quot;, csp);&#xD;&#xA;var_invocationNode_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;AddPrefix addPrefix = new AddPrefix();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(addPrefix);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;addPrefix.setRuleName(&quot;NoRuleName&quot;);&#xD;&#xA;addPrefix.solve(var_invocationNode_name,literal0,var_otherFile_name);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;otherFolder&quot;,otherFolder);&#xD;&#xA;isApplicableMatch.registerObject(&quot;rootFolder&quot;,rootFolder);&#xD;&#xA;isApplicableMatch.registerObject(&quot;taskNode&quot;,taskNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;otherFile&quot;,otherFile);&#xD;&#xA;isApplicableMatch.registerObject(&quot;invocation&quot;,invocation);&#xD;&#xA;isApplicableMatch.registerObject(&quot;folder&quot;,folder);&#xD;&#xA;isApplicableMatch.registerObject(&quot;system&quot;,system);&#xD;&#xA;isApplicableMatch.registerObject(&quot;task&quot;,task);&#xD;&#xA;isApplicableMatch.registerObject(&quot;file&quot;,file);&#xD;&#xA;isApplicableMatch.registerObject(&quot;invokedTask&quot;,invokedTask);&#xD;&#xA;isApplicableMatch.registerObject(&quot;invocationsNode&quot;,invocationsNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;file2Task2&quot;,file2Task2);&#xD;&#xA;isApplicableMatch.registerObject(&quot;fileToTask&quot;,fileToTask);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/ProcessCodeAdapter/model/ProcessCodeAdapter.ecore#//Rules/NodeToInvocationDifferentModuleRule/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/ProcessCodeAdapter/model/ProcessCodeAdapter.ecore#//Rules/NodeToInvocationDifferentModuleRule/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;otherFolder&quot;, otherFolder);&#xA;ruleresult.registerObject(&quot;rootFolder&quot;, rootFolder);&#xA;ruleresult.registerObject(&quot;invocationNode&quot;, invocationNode);&#xA;ruleresult.registerObject(&quot;taskNode&quot;, taskNode);&#xA;ruleresult.registerObject(&quot;invocationNodeToInvocation&quot;, invocationNodeToInvocation);&#xA;ruleresult.registerObject(&quot;otherFile&quot;, otherFile);&#xA;ruleresult.registerObject(&quot;invocation&quot;, invocation);&#xA;ruleresult.registerObject(&quot;folder&quot;, folder);&#xA;ruleresult.registerObject(&quot;system&quot;, system);&#xA;ruleresult.registerObject(&quot;task&quot;, task);&#xA;ruleresult.registerObject(&quot;file&quot;, file);&#xA;ruleresult.registerObject(&quot;invokedTask&quot;, invokedTask);&#xA;ruleresult.registerObject(&quot;invocationsNode&quot;, invocationsNode);&#xA;ruleresult.registerObject(&quot;file2Task2&quot;, file2Task2);&#xA;ruleresult.registerObject(&quot;fileToTask&quot;, fileToTask);&#xA;">
    <eOperation href="platform:/plugin/ProcessCodeAdapter/model/ProcessCodeAdapter.ecore#//Rules/NodeToInvocationDifferentModuleRule/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;invocation&quot;).eClass()).equals(&quot;ProcessDefinition.Invocation.&quot;);">
    <eOperation href="platform:/plugin/ProcessCodeAdapter/model/ProcessCodeAdapter.ecore#//Rules/NodeToInvocationDifferentModuleRule/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_invocationNode_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;invocationNode.name&quot;, true, csp);&#xD;&#xA;var_invocationNode_name.setValue(invocationNode.getName());&#xD;&#xA;var_invocationNode_name.setType(&quot;String&quot;);&#xD;&#xA;Variable var_otherFolder_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;otherFolder.name&quot;, true, csp);&#xD;&#xA;var_otherFolder_name.setValue(otherFolder.getName());&#xD;&#xA;var_otherFolder_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xD;&#xA;eq.solve(var_invocationNode_name,var_otherFolder_name);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/ProcessCodeAdapter/model/ProcessCodeAdapter.ecore#//Rules/NodeToImportRule/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;otherFolder&quot;, otherFolder);&#xA;match.registerObject(&quot;rootFolder&quot;, rootFolder);&#xA;match.registerObject(&quot;invocationNode&quot;, invocationNode);&#xA;match.registerObject(&quot;taskNode&quot;, taskNode);&#xA;match.registerObject(&quot;folder&quot;, folder);&#xA;match.registerObject(&quot;file&quot;, file);&#xA;match.registerObject(&quot;invocationsNode&quot;, invocationsNode);&#xA;">
    <eOperation href="platform:/plugin/ProcessCodeAdapter/model/ProcessCodeAdapter.ecore#//Rules/NodeToImportRule/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/ProcessCodeAdapter/model/ProcessCodeAdapter.ecore#//Rules/NodeToImportRule/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;importedModule&quot;,importedModule);&#xD;&#xA;isApplicableMatch.registerObject(&quot;otherFolder&quot;,otherFolder);&#xD;&#xA;isApplicableMatch.registerObject(&quot;fileToImportedModule&quot;,fileToImportedModule);&#xD;&#xA;isApplicableMatch.registerObject(&quot;rootFolder&quot;,rootFolder);&#xD;&#xA;isApplicableMatch.registerObject(&quot;module&quot;,module);&#xD;&#xA;isApplicableMatch.registerObject(&quot;invocationNode&quot;,invocationNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;taskNode&quot;,taskNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;folder&quot;,folder);&#xD;&#xA;isApplicableMatch.registerObject(&quot;task&quot;,task);&#xD;&#xA;isApplicableMatch.registerObject(&quot;system&quot;,system);&#xD;&#xA;isApplicableMatch.registerObject(&quot;file&quot;,file);&#xD;&#xA;isApplicableMatch.registerObject(&quot;invocationsNode&quot;,invocationsNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;fileToTask&quot;,fileToTask);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/ProcessCodeAdapter/model/ProcessCodeAdapter.ecore#//Rules/NodeToImportRule/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/ProcessCodeAdapter/model/ProcessCodeAdapter.ecore#//Rules/NodeToImportRule/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;importedModule&quot;, importedModule);&#xA;ruleresult.registerObject(&quot;otherFolder&quot;, otherFolder);&#xA;ruleresult.registerObject(&quot;fileToImportedModule&quot;, fileToImportedModule);&#xA;ruleresult.registerObject(&quot;rootFolder&quot;, rootFolder);&#xA;ruleresult.registerObject(&quot;module&quot;, module);&#xA;ruleresult.registerObject(&quot;nodeToImport&quot;, nodeToImport);&#xA;ruleresult.registerObject(&quot;invocationNode&quot;, invocationNode);&#xA;ruleresult.registerObject(&quot;taskNode&quot;, taskNode);&#xA;ruleresult.registerObject(&quot;invocation&quot;, invocation);&#xA;ruleresult.registerObject(&quot;folder&quot;, folder);&#xA;ruleresult.registerObject(&quot;task&quot;, task);&#xA;ruleresult.registerObject(&quot;system&quot;, system);&#xA;ruleresult.registerObject(&quot;file&quot;, file);&#xA;ruleresult.registerObject(&quot;invocationsNode&quot;, invocationsNode);&#xA;ruleresult.registerObject(&quot;fileToTask&quot;, fileToTask);&#xA;">
    <eOperation href="platform:/plugin/ProcessCodeAdapter/model/ProcessCodeAdapter.ecore#//Rules/NodeToImportRule/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;invocationNode&quot;).eClass()).equals(&quot;MocaTree.Node.&quot;);">
    <eOperation href="platform:/plugin/ProcessCodeAdapter/model/ProcessCodeAdapter.ecore#//Rules/NodeToImportRule/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/ProcessCodeAdapter/model/ProcessCodeAdapter.ecore#//Rules/NodeToImportRule/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;importedModule&quot;, importedModule);&#xA;match.registerObject(&quot;module&quot;, module);&#xA;match.registerObject(&quot;invocation&quot;, invocation);&#xA;match.registerObject(&quot;task&quot;, task);&#xA;match.registerObject(&quot;system&quot;, system);&#xA;">
    <eOperation href="platform:/plugin/ProcessCodeAdapter/model/ProcessCodeAdapter.ecore#//Rules/NodeToImportRule/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/ProcessCodeAdapter/model/ProcessCodeAdapter.ecore#//Rules/NodeToImportRule/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_otherFolder_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;otherFolder.name&quot;, true, csp);&#xD;&#xA;var_otherFolder_name.setValue(otherFolder.getName());&#xD;&#xA;var_otherFolder_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_invocationNode_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;invocationNode.name&quot;, csp);&#xD;&#xA;var_invocationNode_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xD;&#xA;eq.solve(var_invocationNode_name,var_otherFolder_name);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;importedModule&quot;,importedModule);&#xD;&#xA;isApplicableMatch.registerObject(&quot;otherFolder&quot;,otherFolder);&#xD;&#xA;isApplicableMatch.registerObject(&quot;fileToImportedModule&quot;,fileToImportedModule);&#xD;&#xA;isApplicableMatch.registerObject(&quot;rootFolder&quot;,rootFolder);&#xD;&#xA;isApplicableMatch.registerObject(&quot;module&quot;,module);&#xD;&#xA;isApplicableMatch.registerObject(&quot;taskNode&quot;,taskNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;invocation&quot;,invocation);&#xD;&#xA;isApplicableMatch.registerObject(&quot;folder&quot;,folder);&#xD;&#xA;isApplicableMatch.registerObject(&quot;task&quot;,task);&#xD;&#xA;isApplicableMatch.registerObject(&quot;system&quot;,system);&#xD;&#xA;isApplicableMatch.registerObject(&quot;file&quot;,file);&#xD;&#xA;isApplicableMatch.registerObject(&quot;invocationsNode&quot;,invocationsNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;fileToTask&quot;,fileToTask);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/ProcessCodeAdapter/model/ProcessCodeAdapter.ecore#//Rules/NodeToImportRule/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/ProcessCodeAdapter/model/ProcessCodeAdapter.ecore#//Rules/NodeToImportRule/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;importedModule&quot;, importedModule);&#xA;ruleresult.registerObject(&quot;otherFolder&quot;, otherFolder);&#xA;ruleresult.registerObject(&quot;fileToImportedModule&quot;, fileToImportedModule);&#xA;ruleresult.registerObject(&quot;rootFolder&quot;, rootFolder);&#xA;ruleresult.registerObject(&quot;module&quot;, module);&#xA;ruleresult.registerObject(&quot;nodeToImport&quot;, nodeToImport);&#xA;ruleresult.registerObject(&quot;invocationNode&quot;, invocationNode);&#xA;ruleresult.registerObject(&quot;taskNode&quot;, taskNode);&#xA;ruleresult.registerObject(&quot;invocation&quot;, invocation);&#xA;ruleresult.registerObject(&quot;folder&quot;, folder);&#xA;ruleresult.registerObject(&quot;task&quot;, task);&#xA;ruleresult.registerObject(&quot;system&quot;, system);&#xA;ruleresult.registerObject(&quot;file&quot;, file);&#xA;ruleresult.registerObject(&quot;invocationsNode&quot;, invocationsNode);&#xA;ruleresult.registerObject(&quot;fileToTask&quot;, fileToTask);&#xA;">
    <eOperation href="platform:/plugin/ProcessCodeAdapter/model/ProcessCodeAdapter.ecore#//Rules/NodeToImportRule/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;invocation&quot;).eClass()).equals(&quot;ProcessDefinition.Import.&quot;);">
    <eOperation href="platform:/plugin/ProcessCodeAdapter/model/ProcessCodeAdapter.ecore#//Rules/NodeToImportRule/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xD;&#xA;literal0.setValue(&quot;.proc&quot;);&#xD;&#xA;literal0.setType(&quot;&quot;);&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_invocationNode_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;invocationNode.name&quot;, true, csp);&#xD;&#xA;var_invocationNode_name.setValue(invocationNode.getName());&#xD;&#xA;var_invocationNode_name.setType(&quot;String&quot;);&#xD;&#xA;Variable var_otherFile_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;otherFile.name&quot;, true, csp);&#xD;&#xA;var_otherFile_name.setValue(otherFile.getName());&#xD;&#xA;var_otherFile_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;AddPrefix addPrefix = new AddPrefix();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(addPrefix);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;addPrefix.setRuleName(&quot;NoRuleName&quot;);&#xD;&#xA;addPrefix.solve(var_invocationNode_name,literal0,var_otherFile_name);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/ProcessCodeAdapter/model/ProcessCodeAdapter.ecore#//Rules/NodeToInvocationRule/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;invocationNode&quot;, invocationNode);&#xA;match.registerObject(&quot;taskNode&quot;, taskNode);&#xA;match.registerObject(&quot;otherFile&quot;, otherFile);&#xA;match.registerObject(&quot;file&quot;, file);&#xA;match.registerObject(&quot;folder&quot;, folder);&#xA;match.registerObject(&quot;invocationsNode&quot;, invocationsNode);&#xA;">
    <eOperation href="platform:/plugin/ProcessCodeAdapter/model/ProcessCodeAdapter.ecore#//Rules/NodeToInvocationRule/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/ProcessCodeAdapter/model/ProcessCodeAdapter.ecore#//Rules/NodeToInvocationRule/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;fileToTask2&quot;,fileToTask2);&#xD;&#xA;isApplicableMatch.registerObject(&quot;invocationNode&quot;,invocationNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;taskNode&quot;,taskNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;otherFile&quot;,otherFile);&#xD;&#xA;isApplicableMatch.registerObject(&quot;task&quot;,task);&#xD;&#xA;isApplicableMatch.registerObject(&quot;file&quot;,file);&#xD;&#xA;isApplicableMatch.registerObject(&quot;system&quot;,system);&#xD;&#xA;isApplicableMatch.registerObject(&quot;folder&quot;,folder);&#xD;&#xA;isApplicableMatch.registerObject(&quot;invokedTask&quot;,invokedTask);&#xD;&#xA;isApplicableMatch.registerObject(&quot;invocationsNode&quot;,invocationsNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;fileToTask&quot;,fileToTask);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/ProcessCodeAdapter/model/ProcessCodeAdapter.ecore#//Rules/NodeToInvocationRule/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/ProcessCodeAdapter/model/ProcessCodeAdapter.ecore#//Rules/NodeToInvocationRule/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;fileToTask2&quot;, fileToTask2);&#xA;ruleresult.registerObject(&quot;invocationNode&quot;, invocationNode);&#xA;ruleresult.registerObject(&quot;taskNode&quot;, taskNode);&#xA;ruleresult.registerObject(&quot;invocationNodeToInvocation&quot;, invocationNodeToInvocation);&#xA;ruleresult.registerObject(&quot;otherFile&quot;, otherFile);&#xA;ruleresult.registerObject(&quot;invocation&quot;, invocation);&#xA;ruleresult.registerObject(&quot;task&quot;, task);&#xA;ruleresult.registerObject(&quot;file&quot;, file);&#xA;ruleresult.registerObject(&quot;system&quot;, system);&#xA;ruleresult.registerObject(&quot;folder&quot;, folder);&#xA;ruleresult.registerObject(&quot;invokedTask&quot;, invokedTask);&#xA;ruleresult.registerObject(&quot;invocationsNode&quot;, invocationsNode);&#xA;ruleresult.registerObject(&quot;fileToTask&quot;, fileToTask);&#xA;">
    <eOperation href="platform:/plugin/ProcessCodeAdapter/model/ProcessCodeAdapter.ecore#//Rules/NodeToInvocationRule/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;invocationNode&quot;).eClass()).equals(&quot;MocaTree.Node.&quot;);">
    <eOperation href="platform:/plugin/ProcessCodeAdapter/model/ProcessCodeAdapter.ecore#//Rules/NodeToInvocationRule/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/ProcessCodeAdapter/model/ProcessCodeAdapter.ecore#//Rules/NodeToInvocationRule/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;invocation&quot;, invocation);&#xA;match.registerObject(&quot;task&quot;, task);&#xA;match.registerObject(&quot;system&quot;, system);&#xA;match.registerObject(&quot;invokedTask&quot;, invokedTask);&#xA;">
    <eOperation href="platform:/plugin/ProcessCodeAdapter/model/ProcessCodeAdapter.ecore#//Rules/NodeToInvocationRule/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/ProcessCodeAdapter/model/ProcessCodeAdapter.ecore#//Rules/NodeToInvocationRule/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xD;&#xA;literal0.setValue(&quot;.proc&quot;);&#xD;&#xA;literal0.setType(&quot;&quot;);&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_otherFile_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;otherFile.name&quot;, true, csp);&#xD;&#xA;var_otherFile_name.setValue(otherFile.getName());&#xD;&#xA;var_otherFile_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_invocationNode_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;invocationNode.name&quot;, csp);&#xD;&#xA;var_invocationNode_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;AddPrefix addPrefix = new AddPrefix();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(addPrefix);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;addPrefix.setRuleName(&quot;NoRuleName&quot;);&#xD;&#xA;addPrefix.solve(var_invocationNode_name,literal0,var_otherFile_name);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;fileToTask2&quot;,fileToTask2);&#xD;&#xA;isApplicableMatch.registerObject(&quot;taskNode&quot;,taskNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;otherFile&quot;,otherFile);&#xD;&#xA;isApplicableMatch.registerObject(&quot;invocation&quot;,invocation);&#xD;&#xA;isApplicableMatch.registerObject(&quot;task&quot;,task);&#xD;&#xA;isApplicableMatch.registerObject(&quot;file&quot;,file);&#xD;&#xA;isApplicableMatch.registerObject(&quot;system&quot;,system);&#xD;&#xA;isApplicableMatch.registerObject(&quot;folder&quot;,folder);&#xD;&#xA;isApplicableMatch.registerObject(&quot;invokedTask&quot;,invokedTask);&#xD;&#xA;isApplicableMatch.registerObject(&quot;invocationsNode&quot;,invocationsNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;fileToTask&quot;,fileToTask);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/ProcessCodeAdapter/model/ProcessCodeAdapter.ecore#//Rules/NodeToInvocationRule/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/ProcessCodeAdapter/model/ProcessCodeAdapter.ecore#//Rules/NodeToInvocationRule/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;fileToTask2&quot;, fileToTask2);&#xA;ruleresult.registerObject(&quot;invocationNode&quot;, invocationNode);&#xA;ruleresult.registerObject(&quot;taskNode&quot;, taskNode);&#xA;ruleresult.registerObject(&quot;invocationNodeToInvocation&quot;, invocationNodeToInvocation);&#xA;ruleresult.registerObject(&quot;otherFile&quot;, otherFile);&#xA;ruleresult.registerObject(&quot;invocation&quot;, invocation);&#xA;ruleresult.registerObject(&quot;task&quot;, task);&#xA;ruleresult.registerObject(&quot;file&quot;, file);&#xA;ruleresult.registerObject(&quot;system&quot;, system);&#xA;ruleresult.registerObject(&quot;folder&quot;, folder);&#xA;ruleresult.registerObject(&quot;invokedTask&quot;, invokedTask);&#xA;ruleresult.registerObject(&quot;invocationsNode&quot;, invocationsNode);&#xA;ruleresult.registerObject(&quot;fileToTask&quot;, fileToTask);&#xA;">
    <eOperation href="platform:/plugin/ProcessCodeAdapter/model/ProcessCodeAdapter.ecore#//Rules/NodeToInvocationRule/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;invocation&quot;).eClass()).equals(&quot;ProcessDefinition.Invocation.&quot;);">
    <eOperation href="platform:/plugin/ProcessCodeAdapter/model/ProcessCodeAdapter.ecore#//Rules/NodeToInvocationRule/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/ProcessCodeAdapter/model/ProcessCodeAdapter.ecore#//Rules/SubFolderToModuleRule/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;rootFolder&quot;, rootFolder);&#xA;match.registerObject(&quot;subFolder&quot;, subFolder);&#xA;">
    <eOperation href="platform:/plugin/ProcessCodeAdapter/model/ProcessCodeAdapter.ecore#//Rules/SubFolderToModuleRule/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/ProcessCodeAdapter/model/ProcessCodeAdapter.ecore#//Rules/SubFolderToModuleRule/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_subFolder_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;subFolder.name&quot;, true, csp);&#xD;&#xA;var_subFolder_name.setValue(subFolder.getName());&#xD;&#xA;var_subFolder_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_module_description = CSPFactoryHelper.eINSTANCE.createVariable(&quot;module.description&quot;, csp);&#xD;&#xA;var_module_description.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xD;&#xA;eq.solve(var_subFolder_name,var_module_description);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;rootFolder&quot;,rootFolder);&#xD;&#xA;isApplicableMatch.registerObject(&quot;subFolder&quot;,subFolder);&#xD;&#xA;isApplicableMatch.registerObject(&quot;system&quot;,system);&#xD;&#xA;isApplicableMatch.registerObject(&quot;folderToSystem&quot;,folderToSystem);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/ProcessCodeAdapter/model/ProcessCodeAdapter.ecore#//Rules/SubFolderToModuleRule/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/ProcessCodeAdapter/model/ProcessCodeAdapter.ecore#//Rules/SubFolderToModuleRule/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;rootFolder&quot;, rootFolder);&#xA;ruleresult.registerObject(&quot;subFolder&quot;, subFolder);&#xA;ruleresult.registerObject(&quot;system&quot;, system);&#xA;ruleresult.registerObject(&quot;subFolderToSubTask&quot;, subFolderToSubTask);&#xA;ruleresult.registerObject(&quot;folderToSystem&quot;, folderToSystem);&#xA;ruleresult.registerObject(&quot;module&quot;, module);&#xA;">
    <eOperation href="platform:/plugin/ProcessCodeAdapter/model/ProcessCodeAdapter.ecore#//Rules/SubFolderToModuleRule/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;subFolder&quot;).eClass()).equals(&quot;MocaTree.Folder.&quot;);">
    <eOperation href="platform:/plugin/ProcessCodeAdapter/model/ProcessCodeAdapter.ecore#//Rules/SubFolderToModuleRule/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/ProcessCodeAdapter/model/ProcessCodeAdapter.ecore#//Rules/SubFolderToModuleRule/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;system&quot;, system);&#xA;match.registerObject(&quot;module&quot;, module);&#xA;">
    <eOperation href="platform:/plugin/ProcessCodeAdapter/model/ProcessCodeAdapter.ecore#//Rules/SubFolderToModuleRule/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/ProcessCodeAdapter/model/ProcessCodeAdapter.ecore#//Rules/SubFolderToModuleRule/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_module_description = CSPFactoryHelper.eINSTANCE.createVariable(&quot;module.description&quot;, true, csp);&#xD;&#xA;var_module_description.setValue(module.getDescription());&#xD;&#xA;var_module_description.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_subFolder_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;subFolder.name&quot;, csp);&#xD;&#xA;var_subFolder_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xD;&#xA;eq.solve(var_subFolder_name,var_module_description);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;rootFolder&quot;,rootFolder);&#xD;&#xA;isApplicableMatch.registerObject(&quot;system&quot;,system);&#xD;&#xA;isApplicableMatch.registerObject(&quot;folderToSystem&quot;,folderToSystem);&#xD;&#xA;isApplicableMatch.registerObject(&quot;module&quot;,module);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/ProcessCodeAdapter/model/ProcessCodeAdapter.ecore#//Rules/SubFolderToModuleRule/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/ProcessCodeAdapter/model/ProcessCodeAdapter.ecore#//Rules/SubFolderToModuleRule/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;rootFolder&quot;, rootFolder);&#xA;ruleresult.registerObject(&quot;subFolder&quot;, subFolder);&#xA;ruleresult.registerObject(&quot;system&quot;, system);&#xA;ruleresult.registerObject(&quot;subFolderToSubTask&quot;, subFolderToSubTask);&#xA;ruleresult.registerObject(&quot;folderToSystem&quot;, folderToSystem);&#xA;ruleresult.registerObject(&quot;module&quot;, module);&#xA;">
    <eOperation href="platform:/plugin/ProcessCodeAdapter/model/ProcessCodeAdapter.ecore#//Rules/SubFolderToModuleRule/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;module&quot;).eClass()).equals(&quot;ProcessDefinition.Module.&quot;);">
    <eOperation href="platform:/plugin/ProcessCodeAdapter/model/ProcessCodeAdapter.ecore#//Rules/SubFolderToModuleRule/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/ProcessCodeAdapter/model/ProcessCodeAdapter.ecore#//Rules/RootToSystemRule/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;rootFolder&quot;, rootFolder);&#xA;">
    <eOperation href="platform:/plugin/ProcessCodeAdapter/model/ProcessCodeAdapter.ecore#//Rules/RootToSystemRule/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/ProcessCodeAdapter/model/ProcessCodeAdapter.ecore#//Rules/RootToSystemRule/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_rootFolder_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;rootFolder.name&quot;, true, csp);&#xD;&#xA;var_rootFolder_name.setValue(rootFolder.getName());&#xD;&#xA;var_rootFolder_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_system_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;system.name&quot;, csp);&#xD;&#xA;var_system_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xD;&#xA;eq.solve(var_rootFolder_name,var_system_name);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;rootFolder&quot;,rootFolder);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/ProcessCodeAdapter/model/ProcessCodeAdapter.ecore#//Rules/RootToSystemRule/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/ProcessCodeAdapter/model/ProcessCodeAdapter.ecore#//Rules/RootToSystemRule/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;rootFolder&quot;, rootFolder);&#xA;ruleresult.registerObject(&quot;system&quot;, system);&#xA;ruleresult.registerObject(&quot;rootFolderToSystem&quot;, rootFolderToSystem);&#xA;">
    <eOperation href="platform:/plugin/ProcessCodeAdapter/model/ProcessCodeAdapter.ecore#//Rules/RootToSystemRule/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;rootFolder&quot;).eClass()).equals(&quot;MocaTree.Folder.&quot;);">
    <eOperation href="platform:/plugin/ProcessCodeAdapter/model/ProcessCodeAdapter.ecore#//Rules/RootToSystemRule/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/ProcessCodeAdapter/model/ProcessCodeAdapter.ecore#//Rules/RootToSystemRule/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;system&quot;, system);&#xA;">
    <eOperation href="platform:/plugin/ProcessCodeAdapter/model/ProcessCodeAdapter.ecore#//Rules/RootToSystemRule/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/ProcessCodeAdapter/model/ProcessCodeAdapter.ecore#//Rules/RootToSystemRule/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_system_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;system.name&quot;, true, csp);&#xD;&#xA;var_system_name.setValue(system.getName());&#xD;&#xA;var_system_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_rootFolder_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;rootFolder.name&quot;, csp);&#xD;&#xA;var_rootFolder_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xD;&#xA;eq.solve(var_rootFolder_name,var_system_name);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;system&quot;,system);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/ProcessCodeAdapter/model/ProcessCodeAdapter.ecore#//Rules/RootToSystemRule/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/ProcessCodeAdapter/model/ProcessCodeAdapter.ecore#//Rules/RootToSystemRule/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;rootFolder&quot;, rootFolder);&#xA;ruleresult.registerObject(&quot;system&quot;, system);&#xA;ruleresult.registerObject(&quot;rootFolderToSystem&quot;, rootFolderToSystem);&#xA;">
    <eOperation href="platform:/plugin/ProcessCodeAdapter/model/ProcessCodeAdapter.ecore#//Rules/RootToSystemRule/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;system&quot;).eClass()).equals(&quot;ProcessDefinition.SystemModule.&quot;);">
    <eOperation href="platform:/plugin/ProcessCodeAdapter/model/ProcessCodeAdapter.ecore#//Rules/RootToSystemRule/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/ProcessCodeAdapter/model/ProcessCodeAdapter.ecore#//Rules/FileToTaskRule/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;invocationNode&quot;, invocationNode);&#xA;match.registerObject(&quot;taskNode&quot;, taskNode);&#xA;match.registerObject(&quot;folder&quot;, folder);&#xA;match.registerObject(&quot;file&quot;, file);&#xA;match.registerObject(&quot;importNode&quot;, importNode);&#xA;">
    <eOperation href="platform:/plugin/ProcessCodeAdapter/model/ProcessCodeAdapter.ecore#//Rules/FileToTaskRule/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/ProcessCodeAdapter/model/ProcessCodeAdapter.ecore#//Rules/FileToTaskRule/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xD;&#xA;literal0.setValue(&quot;.proc&quot;);&#xD;&#xA;literal0.setType(&quot;&quot;);&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_file_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;file.name&quot;, true, csp);&#xD;&#xA;var_file_name.setValue(file.getName());&#xD;&#xA;var_file_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_task_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;task.id&quot;, csp);&#xD;&#xA;var_task_id.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;AddPrefix addPrefix = new AddPrefix();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(addPrefix);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;addPrefix.setRuleName(&quot;NoRuleName&quot;);&#xD;&#xA;addPrefix.solve(var_task_id,literal0,var_file_name);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;invocationNode&quot;,invocationNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;taskNode&quot;,taskNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;folderToModule&quot;,folderToModule);&#xD;&#xA;isApplicableMatch.registerObject(&quot;system&quot;,system);&#xD;&#xA;isApplicableMatch.registerObject(&quot;folder&quot;,folder);&#xD;&#xA;isApplicableMatch.registerObject(&quot;file&quot;,file);&#xD;&#xA;isApplicableMatch.registerObject(&quot;importNode&quot;,importNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;module&quot;,module);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/ProcessCodeAdapter/model/ProcessCodeAdapter.ecore#//Rules/FileToTaskRule/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/ProcessCodeAdapter/model/ProcessCodeAdapter.ecore#//Rules/FileToTaskRule/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;invocationNode&quot;, invocationNode);&#xA;ruleresult.registerObject(&quot;fileToTask&quot;, fileToTask);&#xA;ruleresult.registerObject(&quot;taskNode&quot;, taskNode);&#xA;ruleresult.registerObject(&quot;folderToModule&quot;, folderToModule);&#xA;ruleresult.registerObject(&quot;system&quot;, system);&#xA;ruleresult.registerObject(&quot;task&quot;, task);&#xA;ruleresult.registerObject(&quot;folder&quot;, folder);&#xA;ruleresult.registerObject(&quot;file&quot;, file);&#xA;ruleresult.registerObject(&quot;importNode&quot;, importNode);&#xA;ruleresult.registerObject(&quot;module&quot;, module);&#xA;">
    <eOperation href="platform:/plugin/ProcessCodeAdapter/model/ProcessCodeAdapter.ecore#//Rules/FileToTaskRule/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;invocationNode&quot;).eClass()).equals(&quot;MocaTree.Node.&quot;) &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;taskNode&quot;).eClass()).equals(&quot;MocaTree.Node.&quot;) &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;file&quot;).eClass()).equals(&quot;MocaTree.File.&quot;) &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;importNode&quot;).eClass()).equals(&quot;MocaTree.Node.&quot;);">
    <eOperation href="platform:/plugin/ProcessCodeAdapter/model/ProcessCodeAdapter.ecore#//Rules/FileToTaskRule/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/ProcessCodeAdapter/model/ProcessCodeAdapter.ecore#//Rules/FileToTaskRule/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;system&quot;, system);&#xA;match.registerObject(&quot;task&quot;, task);&#xA;match.registerObject(&quot;module&quot;, module);&#xA;">
    <eOperation href="platform:/plugin/ProcessCodeAdapter/model/ProcessCodeAdapter.ecore#//Rules/FileToTaskRule/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/ProcessCodeAdapter/model/ProcessCodeAdapter.ecore#//Rules/FileToTaskRule/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xD;&#xA;literal0.setValue(&quot;.proc&quot;);&#xD;&#xA;literal0.setType(&quot;&quot;);&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_task_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;task.id&quot;, true, csp);&#xD;&#xA;var_task_id.setValue(task.getId());&#xD;&#xA;var_task_id.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_file_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;file.name&quot;, csp);&#xD;&#xA;var_file_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;AddPrefix addPrefix = new AddPrefix();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(addPrefix);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;addPrefix.setRuleName(&quot;NoRuleName&quot;);&#xD;&#xA;addPrefix.solve(var_task_id,literal0,var_file_name);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;folderToModule&quot;,folderToModule);&#xD;&#xA;isApplicableMatch.registerObject(&quot;system&quot;,system);&#xD;&#xA;isApplicableMatch.registerObject(&quot;task&quot;,task);&#xD;&#xA;isApplicableMatch.registerObject(&quot;folder&quot;,folder);&#xD;&#xA;isApplicableMatch.registerObject(&quot;module&quot;,module);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/ProcessCodeAdapter/model/ProcessCodeAdapter.ecore#//Rules/FileToTaskRule/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/ProcessCodeAdapter/model/ProcessCodeAdapter.ecore#//Rules/FileToTaskRule/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;invocationNode&quot;, invocationNode);&#xA;ruleresult.registerObject(&quot;fileToTask&quot;, fileToTask);&#xA;ruleresult.registerObject(&quot;taskNode&quot;, taskNode);&#xA;ruleresult.registerObject(&quot;folderToModule&quot;, folderToModule);&#xA;ruleresult.registerObject(&quot;system&quot;, system);&#xA;ruleresult.registerObject(&quot;task&quot;, task);&#xA;ruleresult.registerObject(&quot;folder&quot;, folder);&#xA;ruleresult.registerObject(&quot;file&quot;, file);&#xA;ruleresult.registerObject(&quot;importNode&quot;, importNode);&#xA;ruleresult.registerObject(&quot;module&quot;, module);&#xA;">
    <eOperation href="platform:/plugin/ProcessCodeAdapter/model/ProcessCodeAdapter.ecore#//Rules/FileToTaskRule/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;task&quot;).eClass()).equals(&quot;ProcessDefinition.Task.&quot;);">
    <eOperation href="platform:/plugin/ProcessCodeAdapter/model/ProcessCodeAdapter.ecore#//Rules/FileToTaskRule/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;NodeToInvocationRecursiveRule&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;invocationsNode&quot;, &quot;name&quot;, &quot;INVOCATIONS&quot;, ComparingOperator.EQUAL)) {&#xD;&#xA;&#x9;ruleResult.setSuccess(false); &#xD;&#xA;&#x9;return ruleResult;&#xD;&#xA;}&#xA;&#xA;&#xA;&#xA;Variable var_literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal&quot;, true, csp);&#xD;&#xA;var_literal0.setValue(&quot;.proc&quot;);&#xD;&#xA;var_literal0.setType(&quot;&quot;);&#xA;&#xA;Variable var_file_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;file&quot;, true, csp);&#xD;&#xA;var_file_name.setValue(__helper.getValue(&quot;file&quot;, &quot;name&quot;));&#xD;&#xA;var_file_name.setType(&quot;String&quot;);&#xA;&#xA;Variable var_invocationNode_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;invocationNode&quot;, true, csp);&#xD;&#xA;var_invocationNode_name.setValue(__helper.getValue(&quot;invocationNode&quot;, &quot;name&quot;));&#xD;&#xA;var_invocationNode_name.setType(&quot;String&quot;);&#xA;&#xA;AddPrefix addPrefix0 = new AddPrefix();&#xD;&#xA;csp.getConstraints().add(addPrefix0);&#xA;&#xA;addPrefix0.setRuleName(&quot;NodeToInvocationRecursiveRule&quot;);&#xD;&#xA;addPrefix0.solve(var_invocationNode_name,var_literal0,var_file_name);&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;addPrefix0.solve(var_invocationNode_name,var_literal0,var_file_name);&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/ProcessCodeAdapter/model/ProcessCodeAdapter.ecore#//Rules/NodeToInvocationRecursiveRule/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;NodeToInvocationRecursiveRule&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;invocationsNode&quot;, &quot;name&quot;, &quot;INVOCATIONS&quot;, ComparingOperator.EQUAL)) {&#xD;&#xA;&#x9;ruleResult.setSuccess(false); &#xD;&#xA;&#x9;return ruleResult;&#xD;&#xA;}&#xA;&#xA;&#xA;&#xA;Variable var_literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal&quot;, true, csp);&#xD;&#xA;var_literal0.setValue(&quot;.proc&quot;);&#xD;&#xA;var_literal0.setType(&quot;&quot;);&#xA;&#xA;Variable var_file_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;file&quot;, true, csp);&#xD;&#xA;var_file_name.setValue(__helper.getValue(&quot;file&quot;, &quot;name&quot;));&#xD;&#xA;var_file_name.setType(&quot;String&quot;);&#xA;&#xA;Variable var_invocationNode_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;invocationNode&quot;, true, csp);&#xD;&#xA;var_invocationNode_name.setValue(__helper.getValue(&quot;invocationNode&quot;, &quot;name&quot;));&#xD;&#xA;var_invocationNode_name.setType(&quot;String&quot;);&#xA;&#xA;AddPrefix addPrefix0 = new AddPrefix();&#xD;&#xA;csp.getConstraints().add(addPrefix0);&#xA;&#xA;addPrefix0.setRuleName(&quot;NodeToInvocationRecursiveRule&quot;);&#xD;&#xA;addPrefix0.solve(var_invocationNode_name,var_literal0,var_file_name);&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;var_invocationNode_name.setBound(false);&#xD;&#xA;&#x9;addPrefix0.solve(var_invocationNode_name,var_literal0,var_file_name);&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;&#x9;__helper.setValue(&quot;invocationNode&quot;, &quot;name&quot;, var_invocationNode_name.getValue());&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/ProcessCodeAdapter/model/ProcessCodeAdapter.ecore#//Rules/NodeToInvocationRecursiveRule/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;NodeToInvocationDifferentModuleRule&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;invocationsNode&quot;, &quot;name&quot;, &quot;INVOCATIONS&quot;, ComparingOperator.EQUAL)) {&#xD;&#xA;&#x9;ruleResult.setSuccess(false); &#xD;&#xA;&#x9;return ruleResult;&#xD;&#xA;}&#xA;&#xA;&#xA;&#xA;Variable var_literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal&quot;, true, csp);&#xD;&#xA;var_literal0.setValue(&quot;.proc&quot;);&#xD;&#xA;var_literal0.setType(&quot;&quot;);&#xA;&#xA;Variable var_otherFile_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;otherFile&quot;, true, csp);&#xD;&#xA;var_otherFile_name.setValue(__helper.getValue(&quot;otherFile&quot;, &quot;name&quot;));&#xD;&#xA;var_otherFile_name.setType(&quot;String&quot;);&#xA;&#xA;Variable var_invocationNode_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;invocationNode&quot;, true, csp);&#xD;&#xA;var_invocationNode_name.setValue(__helper.getValue(&quot;invocationNode&quot;, &quot;name&quot;));&#xD;&#xA;var_invocationNode_name.setType(&quot;String&quot;);&#xA;&#xA;AddPrefix addPrefix0 = new AddPrefix();&#xD;&#xA;csp.getConstraints().add(addPrefix0);&#xA;&#xA;addPrefix0.setRuleName(&quot;NodeToInvocationDifferentModuleRule&quot;);&#xD;&#xA;addPrefix0.solve(var_invocationNode_name,var_literal0,var_otherFile_name);&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;addPrefix0.solve(var_invocationNode_name,var_literal0,var_otherFile_name);&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/ProcessCodeAdapter/model/ProcessCodeAdapter.ecore#//Rules/NodeToInvocationDifferentModuleRule/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;NodeToInvocationDifferentModuleRule&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;invocationsNode&quot;, &quot;name&quot;, &quot;INVOCATIONS&quot;, ComparingOperator.EQUAL)) {&#xD;&#xA;&#x9;ruleResult.setSuccess(false); &#xD;&#xA;&#x9;return ruleResult;&#xD;&#xA;}&#xA;&#xA;&#xA;&#xA;Variable var_literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal&quot;, true, csp);&#xD;&#xA;var_literal0.setValue(&quot;.proc&quot;);&#xD;&#xA;var_literal0.setType(&quot;&quot;);&#xA;&#xA;Variable var_otherFile_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;otherFile&quot;, true, csp);&#xD;&#xA;var_otherFile_name.setValue(__helper.getValue(&quot;otherFile&quot;, &quot;name&quot;));&#xD;&#xA;var_otherFile_name.setType(&quot;String&quot;);&#xA;&#xA;Variable var_invocationNode_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;invocationNode&quot;, true, csp);&#xD;&#xA;var_invocationNode_name.setValue(__helper.getValue(&quot;invocationNode&quot;, &quot;name&quot;));&#xD;&#xA;var_invocationNode_name.setType(&quot;String&quot;);&#xA;&#xA;AddPrefix addPrefix0 = new AddPrefix();&#xD;&#xA;csp.getConstraints().add(addPrefix0);&#xA;&#xA;addPrefix0.setRuleName(&quot;NodeToInvocationDifferentModuleRule&quot;);&#xD;&#xA;addPrefix0.solve(var_invocationNode_name,var_literal0,var_otherFile_name);&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;var_invocationNode_name.setBound(false);&#xD;&#xA;&#x9;addPrefix0.solve(var_invocationNode_name,var_literal0,var_otherFile_name);&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;&#x9;__helper.setValue(&quot;invocationNode&quot;, &quot;name&quot;, var_invocationNode_name.getValue());&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/ProcessCodeAdapter/model/ProcessCodeAdapter.ecore#//Rules/NodeToInvocationDifferentModuleRule/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;NodeToImportRule&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;invocationsNode&quot;, &quot;name&quot;, &quot;IMPORTS&quot;, ComparingOperator.EQUAL)) {&#xD;&#xA;&#x9;ruleResult.setSuccess(false); &#xD;&#xA;&#x9;return ruleResult;&#xD;&#xA;}&#xA;&#xA;&#xA;&#xA;Variable var_otherFolder_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;otherFolder&quot;, true, csp);&#xD;&#xA;var_otherFolder_name.setValue(__helper.getValue(&quot;otherFolder&quot;, &quot;name&quot;));&#xD;&#xA;var_otherFolder_name.setType(&quot;String&quot;);&#xA;&#xA;Variable var_invocationNode_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;invocationNode&quot;, true, csp);&#xD;&#xA;var_invocationNode_name.setValue(__helper.getValue(&quot;invocationNode&quot;, &quot;name&quot;));&#xD;&#xA;var_invocationNode_name.setType(&quot;String&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xD;&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;eq0.setRuleName(&quot;NodeToImportRule&quot;);&#xD;&#xA;eq0.solve(var_invocationNode_name,var_otherFolder_name);&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;eq0.solve(var_invocationNode_name,var_otherFolder_name);&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/ProcessCodeAdapter/model/ProcessCodeAdapter.ecore#//Rules/NodeToImportRule/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;NodeToImportRule&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;invocationsNode&quot;, &quot;name&quot;, &quot;IMPORTS&quot;, ComparingOperator.EQUAL)) {&#xD;&#xA;&#x9;ruleResult.setSuccess(false); &#xD;&#xA;&#x9;return ruleResult;&#xD;&#xA;}&#xA;&#xA;&#xA;&#xA;Variable var_otherFolder_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;otherFolder&quot;, true, csp);&#xD;&#xA;var_otherFolder_name.setValue(__helper.getValue(&quot;otherFolder&quot;, &quot;name&quot;));&#xD;&#xA;var_otherFolder_name.setType(&quot;String&quot;);&#xA;&#xA;Variable var_invocationNode_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;invocationNode&quot;, true, csp);&#xD;&#xA;var_invocationNode_name.setValue(__helper.getValue(&quot;invocationNode&quot;, &quot;name&quot;));&#xD;&#xA;var_invocationNode_name.setType(&quot;String&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xD;&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;eq0.setRuleName(&quot;NodeToImportRule&quot;);&#xD;&#xA;eq0.solve(var_invocationNode_name,var_otherFolder_name);&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;var_invocationNode_name.setBound(false);&#xD;&#xA;&#x9;eq0.solve(var_invocationNode_name,var_otherFolder_name);&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;&#x9;__helper.setValue(&quot;invocationNode&quot;, &quot;name&quot;, var_invocationNode_name.getValue());&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/ProcessCodeAdapter/model/ProcessCodeAdapter.ecore#//Rules/NodeToImportRule/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;NodeToInvocationRule&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;invocationsNode&quot;, &quot;name&quot;, &quot;INVOCATIONS&quot;, ComparingOperator.EQUAL)) {&#xD;&#xA;&#x9;ruleResult.setSuccess(false); &#xD;&#xA;&#x9;return ruleResult;&#xD;&#xA;}&#xA;&#xA;&#xA;&#xA;Variable var_invocationNode_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;invocationNode&quot;, true, csp);&#xD;&#xA;var_invocationNode_name.setValue(__helper.getValue(&quot;invocationNode&quot;, &quot;name&quot;));&#xD;&#xA;var_invocationNode_name.setType(&quot;String&quot;);&#xA;&#xA;Variable var_otherFile_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;otherFile&quot;, true, csp);&#xD;&#xA;var_otherFile_name.setValue(__helper.getValue(&quot;otherFile&quot;, &quot;name&quot;));&#xD;&#xA;var_otherFile_name.setType(&quot;String&quot;);&#xA;&#xA;Variable var_literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal&quot;, true, csp);&#xD;&#xA;var_literal0.setValue(&quot;.proc&quot;);&#xD;&#xA;var_literal0.setType(&quot;&quot;);&#xA;&#xA;AddPrefix addPrefix0 = new AddPrefix();&#xD;&#xA;csp.getConstraints().add(addPrefix0);&#xA;&#xA;addPrefix0.setRuleName(&quot;NodeToInvocationRule&quot;);&#xD;&#xA;addPrefix0.solve(var_invocationNode_name,var_literal0,var_otherFile_name);&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;addPrefix0.solve(var_invocationNode_name,var_literal0,var_otherFile_name);&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/ProcessCodeAdapter/model/ProcessCodeAdapter.ecore#//Rules/NodeToInvocationRule/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;NodeToInvocationRule&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;invocationsNode&quot;, &quot;name&quot;, &quot;INVOCATIONS&quot;, ComparingOperator.EQUAL)) {&#xD;&#xA;&#x9;ruleResult.setSuccess(false); &#xD;&#xA;&#x9;return ruleResult;&#xD;&#xA;}&#xA;&#xA;&#xA;&#xA;Variable var_invocationNode_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;invocationNode&quot;, true, csp);&#xD;&#xA;var_invocationNode_name.setValue(__helper.getValue(&quot;invocationNode&quot;, &quot;name&quot;));&#xD;&#xA;var_invocationNode_name.setType(&quot;String&quot;);&#xA;&#xA;Variable var_otherFile_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;otherFile&quot;, true, csp);&#xD;&#xA;var_otherFile_name.setValue(__helper.getValue(&quot;otherFile&quot;, &quot;name&quot;));&#xD;&#xA;var_otherFile_name.setType(&quot;String&quot;);&#xA;&#xA;Variable var_literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal&quot;, true, csp);&#xD;&#xA;var_literal0.setValue(&quot;.proc&quot;);&#xD;&#xA;var_literal0.setType(&quot;&quot;);&#xA;&#xA;AddPrefix addPrefix0 = new AddPrefix();&#xD;&#xA;csp.getConstraints().add(addPrefix0);&#xA;&#xA;addPrefix0.setRuleName(&quot;NodeToInvocationRule&quot;);&#xD;&#xA;addPrefix0.solve(var_invocationNode_name,var_literal0,var_otherFile_name);&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;var_invocationNode_name.setBound(false);&#xD;&#xA;&#x9;addPrefix0.solve(var_invocationNode_name,var_literal0,var_otherFile_name);&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;&#x9;__helper.setValue(&quot;invocationNode&quot;, &quot;name&quot;, var_invocationNode_name.getValue());&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/ProcessCodeAdapter/model/ProcessCodeAdapter.ecore#//Rules/NodeToInvocationRule/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;SubFolderToModuleRule&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;Variable var_module_description = CSPFactoryHelper.eINSTANCE.createVariable(&quot;module&quot;, true, csp);&#xD;&#xA;var_module_description.setValue(__helper.getValue(&quot;module&quot;, &quot;description&quot;));&#xD;&#xA;var_module_description.setType(&quot;String&quot;);&#xA;&#xA;Variable var_subFolder_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;subFolder&quot;, true, csp);&#xD;&#xA;var_subFolder_name.setValue(__helper.getValue(&quot;subFolder&quot;, &quot;name&quot;));&#xD;&#xA;var_subFolder_name.setType(&quot;String&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xD;&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;eq0.setRuleName(&quot;SubFolderToModuleRule&quot;);&#xD;&#xA;eq0.solve(var_subFolder_name,var_module_description);&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;var_module_description.setBound(false);&#xD;&#xA;&#x9;eq0.solve(var_subFolder_name,var_module_description);&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;&#x9;__helper.setValue(&quot;module&quot;, &quot;description&quot;, var_module_description.getValue());&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/ProcessCodeAdapter/model/ProcessCodeAdapter.ecore#//Rules/SubFolderToModuleRule/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;SubFolderToModuleRule&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;Variable var_module_description = CSPFactoryHelper.eINSTANCE.createVariable(&quot;module&quot;, true, csp);&#xD;&#xA;var_module_description.setValue(__helper.getValue(&quot;module&quot;, &quot;description&quot;));&#xD;&#xA;var_module_description.setType(&quot;String&quot;);&#xA;&#xA;Variable var_subFolder_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;subFolder&quot;, true, csp);&#xD;&#xA;var_subFolder_name.setValue(__helper.getValue(&quot;subFolder&quot;, &quot;name&quot;));&#xD;&#xA;var_subFolder_name.setType(&quot;String&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xD;&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;eq0.setRuleName(&quot;SubFolderToModuleRule&quot;);&#xD;&#xA;eq0.solve(var_subFolder_name,var_module_description);&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;var_subFolder_name.setBound(false);&#xD;&#xA;&#x9;eq0.solve(var_subFolder_name,var_module_description);&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;&#x9;__helper.setValue(&quot;subFolder&quot;, &quot;name&quot;, var_subFolder_name.getValue());&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/ProcessCodeAdapter/model/ProcessCodeAdapter.ecore#//Rules/SubFolderToModuleRule/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;RootToSystemRule&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;Variable var_system_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;system&quot;, true, csp);&#xD;&#xA;var_system_name.setValue(__helper.getValue(&quot;system&quot;, &quot;name&quot;));&#xD;&#xA;var_system_name.setType(&quot;String&quot;);&#xA;&#xA;Variable var_rootFolder_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;rootFolder&quot;, true, csp);&#xD;&#xA;var_rootFolder_name.setValue(__helper.getValue(&quot;rootFolder&quot;, &quot;name&quot;));&#xD;&#xA;var_rootFolder_name.setType(&quot;String&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xD;&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;eq0.setRuleName(&quot;RootToSystemRule&quot;);&#xD;&#xA;eq0.solve(var_rootFolder_name,var_system_name);&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;var_system_name.setBound(false);&#xD;&#xA;&#x9;eq0.solve(var_rootFolder_name,var_system_name);&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;&#x9;__helper.setValue(&quot;system&quot;, &quot;name&quot;, var_system_name.getValue());&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/ProcessCodeAdapter/model/ProcessCodeAdapter.ecore#//Rules/RootToSystemRule/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;RootToSystemRule&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;Variable var_system_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;system&quot;, true, csp);&#xD;&#xA;var_system_name.setValue(__helper.getValue(&quot;system&quot;, &quot;name&quot;));&#xD;&#xA;var_system_name.setType(&quot;String&quot;);&#xA;&#xA;Variable var_rootFolder_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;rootFolder&quot;, true, csp);&#xD;&#xA;var_rootFolder_name.setValue(__helper.getValue(&quot;rootFolder&quot;, &quot;name&quot;));&#xD;&#xA;var_rootFolder_name.setType(&quot;String&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xD;&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;eq0.setRuleName(&quot;RootToSystemRule&quot;);&#xD;&#xA;eq0.solve(var_rootFolder_name,var_system_name);&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;var_rootFolder_name.setBound(false);&#xD;&#xA;&#x9;eq0.solve(var_rootFolder_name,var_system_name);&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;&#x9;__helper.setValue(&quot;rootFolder&quot;, &quot;name&quot;, var_rootFolder_name.getValue());&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/ProcessCodeAdapter/model/ProcessCodeAdapter.ecore#//Rules/RootToSystemRule/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;FileToTaskRule&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;invocationNode&quot;, &quot;name&quot;, &quot;INVOCATIONS&quot;, ComparingOperator.EQUAL)) {&#xD;&#xA;&#x9;ruleResult.setSuccess(false); &#xD;&#xA;&#x9;return ruleResult;&#xD;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;taskNode&quot;, &quot;name&quot;, &quot;TASK&quot;, ComparingOperator.EQUAL)) {&#xD;&#xA;&#x9;ruleResult.setSuccess(false); &#xD;&#xA;&#x9;return ruleResult;&#xD;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;importNode&quot;, &quot;name&quot;, &quot;IMPORTS&quot;, ComparingOperator.EQUAL)) {&#xD;&#xA;&#x9;ruleResult.setSuccess(false); &#xD;&#xA;&#x9;return ruleResult;&#xD;&#xA;}&#xA;&#xA;&#xA;&#xA;Variable var_file_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;file&quot;, true, csp);&#xD;&#xA;var_file_name.setValue(__helper.getValue(&quot;file&quot;, &quot;name&quot;));&#xD;&#xA;var_file_name.setType(&quot;String&quot;);&#xA;&#xA;Variable var_task_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;task&quot;, true, csp);&#xD;&#xA;var_task_id.setValue(__helper.getValue(&quot;task&quot;, &quot;id&quot;));&#xD;&#xA;var_task_id.setType(&quot;String&quot;);&#xA;&#xA;Variable var_literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal&quot;, true, csp);&#xD;&#xA;var_literal0.setValue(&quot;.proc&quot;);&#xD;&#xA;var_literal0.setType(&quot;&quot;);&#xA;&#xA;AddPrefix addPrefix0 = new AddPrefix();&#xD;&#xA;csp.getConstraints().add(addPrefix0);&#xA;&#xA;addPrefix0.setRuleName(&quot;FileToTaskRule&quot;);&#xD;&#xA;addPrefix0.solve(var_task_id,var_literal0,var_file_name);&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;var_task_id.setBound(false);&#xD;&#xA;&#x9;addPrefix0.solve(var_task_id,var_literal0,var_file_name);&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;&#x9;__helper.setValue(&quot;task&quot;, &quot;id&quot;, var_task_id.getValue());&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/ProcessCodeAdapter/model/ProcessCodeAdapter.ecore#//Rules/FileToTaskRule/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;FileToTaskRule&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;invocationNode&quot;, &quot;name&quot;, &quot;INVOCATIONS&quot;, ComparingOperator.EQUAL)) {&#xD;&#xA;&#x9;ruleResult.setSuccess(false); &#xD;&#xA;&#x9;return ruleResult;&#xD;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;taskNode&quot;, &quot;name&quot;, &quot;TASK&quot;, ComparingOperator.EQUAL)) {&#xD;&#xA;&#x9;ruleResult.setSuccess(false); &#xD;&#xA;&#x9;return ruleResult;&#xD;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;importNode&quot;, &quot;name&quot;, &quot;IMPORTS&quot;, ComparingOperator.EQUAL)) {&#xD;&#xA;&#x9;ruleResult.setSuccess(false); &#xD;&#xA;&#x9;return ruleResult;&#xD;&#xA;}&#xA;&#xA;&#xA;&#xA;Variable var_file_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;file&quot;, true, csp);&#xD;&#xA;var_file_name.setValue(__helper.getValue(&quot;file&quot;, &quot;name&quot;));&#xD;&#xA;var_file_name.setType(&quot;String&quot;);&#xA;&#xA;Variable var_task_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;task&quot;, true, csp);&#xD;&#xA;var_task_id.setValue(__helper.getValue(&quot;task&quot;, &quot;id&quot;));&#xD;&#xA;var_task_id.setType(&quot;String&quot;);&#xA;&#xA;Variable var_literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal&quot;, true, csp);&#xD;&#xA;var_literal0.setValue(&quot;.proc&quot;);&#xD;&#xA;var_literal0.setType(&quot;&quot;);&#xA;&#xA;AddPrefix addPrefix0 = new AddPrefix();&#xD;&#xA;csp.getConstraints().add(addPrefix0);&#xA;&#xA;addPrefix0.setRuleName(&quot;FileToTaskRule&quot;);&#xD;&#xA;addPrefix0.solve(var_task_id,var_literal0,var_file_name);&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;var_file_name.setBound(false);&#xD;&#xA;&#x9;addPrefix0.solve(var_task_id,var_literal0,var_file_name);&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;&#x9;__helper.setValue(&quot;file&quot;, &quot;name&quot;, var_file_name.getValue());&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/ProcessCodeAdapter/model/ProcessCodeAdapter.ecore#//Rules/FileToTaskRule/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/ProcessCodeAdapter/model/ProcessCodeAdapter.ecore#//Rules/NodeToInvocationRecursiveRule/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/ProcessCodeAdapter/model/ProcessCodeAdapter.ecore#//Rules/NodeToInvocationRecursiveRule/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/ProcessCodeAdapter/model/ProcessCodeAdapter.ecore#//Rules/NodeToInvocationDifferentModuleRule/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/ProcessCodeAdapter/model/ProcessCodeAdapter.ecore#//Rules/NodeToInvocationDifferentModuleRule/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/ProcessCodeAdapter/model/ProcessCodeAdapter.ecore#//Rules/NodeToImportRule/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/ProcessCodeAdapter/model/ProcessCodeAdapter.ecore#//Rules/NodeToImportRule/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/ProcessCodeAdapter/model/ProcessCodeAdapter.ecore#//Rules/NodeToInvocationRule/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/ProcessCodeAdapter/model/ProcessCodeAdapter.ecore#//Rules/NodeToInvocationRule/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_subFolder_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;subFolder.name&quot;, true, csp);&#xD;&#xA;var_subFolder_name.setValue(subFolder.getName());&#xD;&#xA;var_subFolder_name.setType(&quot;String&quot;);&#xD;&#xA;Variable var_module_description = CSPFactoryHelper.eINSTANCE.createVariable(&quot;module.description&quot;, true, csp);&#xD;&#xA;var_module_description.setValue(module.getDescription());&#xD;&#xA;var_module_description.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xD;&#xA;eq.solve(var_subFolder_name,var_module_description);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/ProcessCodeAdapter/model/ProcessCodeAdapter.ecore#//Rules/SubFolderToModuleRule/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/ProcessCodeAdapter/model/ProcessCodeAdapter.ecore#//Rules/SubFolderToModuleRule/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_rootFolder_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;rootFolder.name&quot;, true, csp);&#xD;&#xA;var_rootFolder_name.setValue(rootFolder.getName());&#xD;&#xA;var_rootFolder_name.setType(&quot;String&quot;);&#xD;&#xA;Variable var_system_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;system.name&quot;, true, csp);&#xD;&#xA;var_system_name.setValue(system.getName());&#xD;&#xA;var_system_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xD;&#xA;eq.solve(var_rootFolder_name,var_system_name);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/ProcessCodeAdapter/model/ProcessCodeAdapter.ecore#//Rules/RootToSystemRule/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/ProcessCodeAdapter/model/ProcessCodeAdapter.ecore#//Rules/RootToSystemRule/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xD;&#xA;literal0.setValue(&quot;.proc&quot;);&#xD;&#xA;literal0.setType(&quot;&quot;);&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_task_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;task.id&quot;, true, csp);&#xD;&#xA;var_task_id.setValue(task.getId());&#xD;&#xA;var_task_id.setType(&quot;String&quot;);&#xD;&#xA;Variable var_file_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;file.name&quot;, true, csp);&#xD;&#xA;var_file_name.setValue(file.getName());&#xD;&#xA;var_file_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;AddPrefix addPrefix = new AddPrefix();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(addPrefix);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;addPrefix.setRuleName(&quot;NoRuleName&quot;);&#xD;&#xA;addPrefix.solve(var_task_id,literal0,var_file_name);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/ProcessCodeAdapter/model/ProcessCodeAdapter.ecore#//Rules/FileToTaskRule/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/ProcessCodeAdapter/model/ProcessCodeAdapter.ecore#//Rules/FileToTaskRule/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xD;&#xA;literal0.setValue(&quot;.proc&quot;);&#xD;&#xA;literal0.setType(&quot;&quot;);&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_file_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;file.name&quot;, true, csp);&#xD;&#xA;var_file_name.setValue(file.getName());&#xD;&#xA;var_file_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_invocationNode_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;invocationNode.name&quot;, csp);&#xD;&#xA;var_invocationNode_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;AddPrefix addPrefix = new AddPrefix();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(addPrefix);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;addPrefix.setRuleName(&quot;NoRuleName&quot;);&#xD;&#xA;addPrefix.solve(var_invocationNode_name,literal0,var_file_name);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;task&quot;,task);&#xD;&#xA;isApplicableMatch.registerObject(&quot;file&quot;,file);&#xD;&#xA;isApplicableMatch.registerObject(&quot;system&quot;,system);&#xD;&#xA;isApplicableMatch.registerObject(&quot;folder&quot;,folder);&#xD;&#xA;isApplicableMatch.registerObject(&quot;invocationsNode&quot;,invocationsNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;taskNode&quot;,taskNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;fileToTask&quot;,fileToTask);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/ProcessCodeAdapter/model/ProcessCodeAdapter.ecore#//Rules/NodeToInvocationRecursiveRule/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/ProcessCodeAdapter/model/ProcessCodeAdapter.ecore#//Rules/NodeToInvocationRecursiveRule/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xD;&#xA;literal0.setValue(&quot;.proc&quot;);&#xD;&#xA;literal0.setType(&quot;&quot;);&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_otherFile_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;otherFile.name&quot;, true, csp);&#xD;&#xA;var_otherFile_name.setValue(otherFile.getName());&#xD;&#xA;var_otherFile_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_invocationNode_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;invocationNode.name&quot;, csp);&#xD;&#xA;var_invocationNode_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;AddPrefix addPrefix = new AddPrefix();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(addPrefix);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;addPrefix.setRuleName(&quot;NoRuleName&quot;);&#xD;&#xA;addPrefix.solve(var_invocationNode_name,literal0,var_otherFile_name);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;otherFolder&quot;,otherFolder);&#xD;&#xA;isApplicableMatch.registerObject(&quot;rootFolder&quot;,rootFolder);&#xD;&#xA;isApplicableMatch.registerObject(&quot;taskNode&quot;,taskNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;otherFile&quot;,otherFile);&#xD;&#xA;isApplicableMatch.registerObject(&quot;folder&quot;,folder);&#xD;&#xA;isApplicableMatch.registerObject(&quot;system&quot;,system);&#xD;&#xA;isApplicableMatch.registerObject(&quot;task&quot;,task);&#xD;&#xA;isApplicableMatch.registerObject(&quot;file&quot;,file);&#xD;&#xA;isApplicableMatch.registerObject(&quot;invokedTask&quot;,invokedTask);&#xD;&#xA;isApplicableMatch.registerObject(&quot;invocationsNode&quot;,invocationsNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;file2Task2&quot;,file2Task2);&#xD;&#xA;isApplicableMatch.registerObject(&quot;fileToTask&quot;,fileToTask);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/ProcessCodeAdapter/model/ProcessCodeAdapter.ecore#//Rules/NodeToInvocationDifferentModuleRule/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/ProcessCodeAdapter/model/ProcessCodeAdapter.ecore#//Rules/NodeToInvocationDifferentModuleRule/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_otherFolder_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;otherFolder.name&quot;, true, csp);&#xD;&#xA;var_otherFolder_name.setValue(otherFolder.getName());&#xD;&#xA;var_otherFolder_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_invocationNode_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;invocationNode.name&quot;, csp);&#xD;&#xA;var_invocationNode_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xD;&#xA;eq.solve(var_invocationNode_name,var_otherFolder_name);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;importedModule&quot;,importedModule);&#xD;&#xA;isApplicableMatch.registerObject(&quot;otherFolder&quot;,otherFolder);&#xD;&#xA;isApplicableMatch.registerObject(&quot;fileToImportedModule&quot;,fileToImportedModule);&#xD;&#xA;isApplicableMatch.registerObject(&quot;rootFolder&quot;,rootFolder);&#xD;&#xA;isApplicableMatch.registerObject(&quot;module&quot;,module);&#xD;&#xA;isApplicableMatch.registerObject(&quot;taskNode&quot;,taskNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;folder&quot;,folder);&#xD;&#xA;isApplicableMatch.registerObject(&quot;task&quot;,task);&#xD;&#xA;isApplicableMatch.registerObject(&quot;system&quot;,system);&#xD;&#xA;isApplicableMatch.registerObject(&quot;file&quot;,file);&#xD;&#xA;isApplicableMatch.registerObject(&quot;invocationsNode&quot;,invocationsNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;fileToTask&quot;,fileToTask);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/ProcessCodeAdapter/model/ProcessCodeAdapter.ecore#//Rules/NodeToImportRule/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/ProcessCodeAdapter/model/ProcessCodeAdapter.ecore#//Rules/NodeToImportRule/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xD;&#xA;literal0.setValue(&quot;.proc&quot;);&#xD;&#xA;literal0.setType(&quot;&quot;);&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_otherFile_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;otherFile.name&quot;, true, csp);&#xD;&#xA;var_otherFile_name.setValue(otherFile.getName());&#xD;&#xA;var_otherFile_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_invocationNode_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;invocationNode.name&quot;, csp);&#xD;&#xA;var_invocationNode_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;AddPrefix addPrefix = new AddPrefix();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(addPrefix);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;addPrefix.setRuleName(&quot;NoRuleName&quot;);&#xD;&#xA;addPrefix.solve(var_invocationNode_name,literal0,var_otherFile_name);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;fileToTask2&quot;,fileToTask2);&#xD;&#xA;isApplicableMatch.registerObject(&quot;taskNode&quot;,taskNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;otherFile&quot;,otherFile);&#xD;&#xA;isApplicableMatch.registerObject(&quot;task&quot;,task);&#xD;&#xA;isApplicableMatch.registerObject(&quot;file&quot;,file);&#xD;&#xA;isApplicableMatch.registerObject(&quot;system&quot;,system);&#xD;&#xA;isApplicableMatch.registerObject(&quot;folder&quot;,folder);&#xD;&#xA;isApplicableMatch.registerObject(&quot;invokedTask&quot;,invokedTask);&#xD;&#xA;isApplicableMatch.registerObject(&quot;invocationsNode&quot;,invocationsNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;fileToTask&quot;,fileToTask);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/ProcessCodeAdapter/model/ProcessCodeAdapter.ecore#//Rules/NodeToInvocationRule/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/ProcessCodeAdapter/model/ProcessCodeAdapter.ecore#//Rules/NodeToInvocationRule/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_subFolder_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;subFolder.name&quot;, csp);&#xD;&#xA;var_subFolder_name.setType(&quot;String&quot;);&#xD;&#xA;Variable var_module_description = CSPFactoryHelper.eINSTANCE.createVariable(&quot;module.description&quot;, csp);&#xD;&#xA;var_module_description.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xD;&#xA;eq.solve(var_subFolder_name,var_module_description);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;rootFolder&quot;,rootFolder);&#xD;&#xA;isApplicableMatch.registerObject(&quot;system&quot;,system);&#xD;&#xA;isApplicableMatch.registerObject(&quot;folderToSystem&quot;,folderToSystem);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/ProcessCodeAdapter/model/ProcessCodeAdapter.ecore#//Rules/SubFolderToModuleRule/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/ProcessCodeAdapter/model/ProcessCodeAdapter.ecore#//Rules/SubFolderToModuleRule/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_rootFolder_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;rootFolder.name&quot;, csp);&#xD;&#xA;var_rootFolder_name.setType(&quot;String&quot;);&#xD;&#xA;Variable var_system_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;system.name&quot;, csp);&#xD;&#xA;var_system_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xD;&#xA;eq.solve(var_rootFolder_name,var_system_name);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/ProcessCodeAdapter/model/ProcessCodeAdapter.ecore#//Rules/RootToSystemRule/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/ProcessCodeAdapter/model/ProcessCodeAdapter.ecore#//Rules/RootToSystemRule/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xD;&#xA;literal0.setValue(&quot;.proc&quot;);&#xD;&#xA;literal0.setType(&quot;&quot;);&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_task_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;task.id&quot;, csp);&#xD;&#xA;var_task_id.setType(&quot;String&quot;);&#xD;&#xA;Variable var_file_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;file.name&quot;, csp);&#xD;&#xA;var_file_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;AddPrefix addPrefix = new AddPrefix();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(addPrefix);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;addPrefix.setRuleName(&quot;NoRuleName&quot;);&#xD;&#xA;addPrefix.solve(var_task_id,literal0,var_file_name);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;folderToModule&quot;,folderToModule);&#xD;&#xA;isApplicableMatch.registerObject(&quot;system&quot;,system);&#xD;&#xA;isApplicableMatch.registerObject(&quot;folder&quot;,folder);&#xD;&#xA;isApplicableMatch.registerObject(&quot;module&quot;,module);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/ProcessCodeAdapter/model/ProcessCodeAdapter.ecore#//Rules/FileToTaskRule/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/ProcessCodeAdapter/model/ProcessCodeAdapter.ecore#//Rules/FileToTaskRule/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
</sdmUtil:CompilerInjection>
