rule MLiteralToEEnumLiteralRule {
	source {
		enumNode : Node {
			-children-> literalsNode
		}
		
		literalsNode : Node {
			literalsNode.name == "literals"
			
			++ -children-> literalNode
		}			
		
		++ literalNode : Node {
			literalNode.name := "EEnumLiteral"
			
			++ -attribute-> literalName
			++ -attribute-> literalValue
		}
		
		++ literalName : Attribute {
			literalName.name := "name"
		}
		
		++ literalValue : Attribute {
			literalName.name := "value"
		}
	}
	
	correspondence {
		enumNode <- mEnumToEEnum : MEnumToEEnum -> eenum
	}
	
	target {
		eenum : EEnum {
			++ -eLiterals-> eliteral
		}
		
		++ eliteral : EEnumLiteral {
		
		}
	
	
	}
	
	constraints {[
		eq(literalName.value, eliteral.name)
		stringToNumber(literalValue.value, eliteral.value)
	]}
}
