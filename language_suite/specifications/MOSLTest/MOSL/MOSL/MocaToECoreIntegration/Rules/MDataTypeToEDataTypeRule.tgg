rule MDataTypeToEDataTypeRule {
	source {
		packageNode : Node {
			-children-> classesNode
		}
		
		classesNode : Node {
			classesNode.name == "classes"
			
			++ -children-> typeNode
		}
		
		++ typeNode : Node {
			typeNode.name := "EDatatype"
			
			++ -attribute-> typeNodeName
			++ -attribute-> typeNodeType
			++ -attribute-> typeNodeGuid
		}
		
		++ typeNodeName : Attribute {
			typeNodeName.name := "name"
		}
		
		++ typeNodeGuid : Attribute {
			typeNodeGuid.name := "guid"
		}
		
		++ typeNodeType : Attribute {
			typeNodeType.name := "instanceTypeName"
		}
	}
	
	correspondence {
		packageNode <- mPackageToEPackage : MPackageToEPackage -> epackage
		++ typeNode <- mDataTypeToEDataType : MDataTypeToEDataType -> edataType
	}
	
	target {
		epackage : EPackage {
			++ -eClassifiers-> edataType
		}
		
		++ edataType : EDataType {}
	}
	
	constraints {[
		eq(typeNodeName.value, edataType.name)
		eq(typeNodeType.value, edataType.instanceTypeName)
		generateGuid[B,F](String)
		generateGuid(typeNodeGuid.value)
	]}
}
