rule AttributeTypeRule {
	source {
		@typeNode : Node {
			-attribute-> typeNodeGuid
		}
		
		typeNodeGuid : Attribute {
			typeNodeGuid.name == "guid"
		}
		
		classNode : Node {
			classNode.name == "EClass"
			
			-children-> attributesNode
		}
		
		attributesNode : Node {
			attributesNode.name == "attributes"
			
			-children-> attributeNode
		}
		
		attributeNode : Node {
			++ -attribute-> typeGuid
			++ -attribute-> type
		}
		
		++ typeGuid : Attribute {
			typeGuid.name := "typeGuid"
			
			-> typeNode
		}
		
		++ type : Attribute {
			type.name := "type"
		}
	}
	
	correspondence {
		classNode <- c : MClassToEClass -> eclass
		attributeNode <- a : MAttributeToEAttribute -> attribute
		typeNode <- t : MDataTypeToEDataType -> datatype
	}
	
	target {
		eclass : EClass {
			-eStructuralFeatures-> attribute
		}
		
		attribute : EAttribute {
			++ -eType-> datatype
		}
		
		datatype : EDataType {}
	}
	
	constraints {[
		eq(typeGuid.value, typeNodeGuid.value)
		eq(datatype.name, type.value)
		validGuid[B,F](String)
		validGuid(typeGuid.value)
	]}
	
	operations {
		bindTypeNodeFromTypeGuid(typeGuid : source/Attribute) : /TGGRuntime/EObjectContainer
	}
}
