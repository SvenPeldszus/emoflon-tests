rule MSuperClassToESuperClassRule {
	source {

		@baseClassNode : Node {
			-attribute->  baseClassGuid
		} 
		
		baseClassGuid : Attribute {
			baseClassGuid.name == "guid"
		}
				
		classNode : Node {
			classNode.name == "EClass"
			++ -attribute-> baseClasses
		}
		
		++ baseClasses : Attribute {
			baseClasses.name := "baseClasses"
			-> baseClassNode
		}
	
	}
	
	correspondence {
		classNode <- mClassToEClass : MClassToEClass -> eclass
		baseClassNode <- mClassToEClass2 : MClassToEClass -> esuperClass
	}
	
	target {
		esuperClass : EClass {}
		
		eclass : EClass {
			++ -eSuperTypes-> esuperClass
		}
	}
	
	constraints {[
		trimEq[BB,BF,FB](String,String)
		trimEq(baseClasses.value, baseClassGuid.value)  
	]}
	
	operations {
		bindBaseClassNodeFromBaseClasses (baseClasses : source/Attribute) : /TGGRuntime/EObjectContainer
	}
}