rule MClassToEClassRule {
	source {
		packageNode : Node {
			-children-> classesNode
		}
		
		classesNode : Node {
			classesNode.name == "classes"
			
			++ -children-> classNode
		}
		
		++ classNode : Node {
			classNode.name := "EClass"
			
			++ -children-> attributesNode
			++ -children-> referencesNode
			++ -children-> operationsNode
			++ -children-> classNodeGenericSuperTypes
			++ -children-> classNodeEtypeParameters
			++ -attribute-> classNodeName
			++ -attribute-> classNodeAlias
			++ -attribute-> classNodeIsAbstract
			++ -attribute-> classNodeGuid
		}
		
		++ attributesNode : Node {
			attributesNode.name := "attributes"
		}
	
		++ referencesNode : Node {
			referencesNode.name := "references"
		}
	
		++ operationsNode : Node {
			operationsNode.name := "operations"
		}
	
		++ classNodeName : Attribute {
			classNodeName.name := "name"
		}
		
		++ classNodeAlias : Attribute {
			classNodeAlias.name := "alias"
		}
		
		++ classNodeGuid : Attribute {
			classNodeGuid.name := "guid"
		}
		
		++ classNodeIsAbstract : Attribute {
			classNodeIsAbstract.name := "isAbstract"
		}
		
		++ classNodeGenericSuperTypes : Node {
			classNodeGenericSuperTypes.name := "genericSuperTypes"
		}
		
		++ classNodeEtypeParameters : Node {
			classNodeEtypeParameters.name := "etypeParameters"
		}
	}
	
	correspondence {
		packageNode <- mPackageToEPackage : MPackageToEPackage -> epackage
		++ classNode <- mClassToEClass : MClassToEClass -> eclass
	}
	
	target {
		epackage : EPackage {
			++ -eClassifiers-> eclass
		}
		
		
		++ eclass : EClass {}
	
	
	}
	
	constraints {[
		eq(classNodeName.value, eclass.name)
		stringToBoolean[BB,BF,FB](String, boolean)
		stringToBoolean(classNodeIsAbstract.value, eclass.abstract)
		generateGuid[B,F](String)
		generateGuid(classNodeGuid.value)
	]}
	
	operations {
		postProcessBACKWARD(eclass : target/EClass, classNode : source/Node) : void
	}
}