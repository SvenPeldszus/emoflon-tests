<?xml version="1.0" encoding="ASCII"?>
<sdmUtil:CompilerInjection xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:sdmUtil="platform:/plugin/SDMLanguage/model/SDMLanguage.ecore#//sdmUtil">
  <importInjectionEntries content="org.moflon.csp.*">
    <eClass href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/FileToPFileRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="csp.constraints.*">
    <eClass href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/FileToPFileRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/FileToPFileRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.csp.*">
    <eClass href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/FolderToPFolderRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="csp.constraints.*">
    <eClass href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/FolderToPFolderRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/FolderToPFolderRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.csp.*">
    <eClass href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/NodeToPNodeRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="csp.constraints.*">
    <eClass href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/NodeToPNodeRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/NodeToPNodeRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.csp.*">
    <eClass href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/AddCorrRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="csp.constraints.*">
    <eClass href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/AddCorrRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/AddCorrRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.csp.*">
    <eClass href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/AddEdgeRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="csp.constraints.*">
    <eClass href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/AddEdgeRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/AddEdgeRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.csp.*">
    <eClass href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/ContextWinsRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="csp.constraints.*">
    <eClass href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/ContextWinsRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/ContextWinsRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.csp.*">
    <eClass href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/CreateNodeRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="csp.constraints.*">
    <eClass href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/CreateNodeRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/CreateNodeRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.csp.*">
    <eClass href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/DeleteCorrRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="csp.constraints.*">
    <eClass href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/DeleteCorrRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/DeleteCorrRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.csp.*">
    <eClass href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/DeleteEdgeRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="csp.constraints.*">
    <eClass href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/DeleteEdgeRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/DeleteEdgeRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.csp.*">
    <eClass href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/ReplaceNodeRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="csp.constraints.*">
    <eClass href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/ReplaceNodeRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/ReplaceNodeRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/FileToPFileRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/FileToPFileRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/FileToPFileRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/FileToPFileRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/FileToPFileRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/FileToPFileRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/FileToPFileRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/FileToPFileRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/FolderToPFolderRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/FolderToPFolderRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/FolderToPFolderRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/FolderToPFolderRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/FolderToPFolderRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/FolderToPFolderRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/FolderToPFolderRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/FolderToPFolderRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/NodeToPNodeRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/NodeToPNodeRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/NodeToPNodeRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/NodeToPNodeRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/NodeToPNodeRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/NodeToPNodeRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/NodeToPNodeRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/NodeToPNodeRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/AddCorrRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/AddCorrRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/AddCorrRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/AddCorrRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/AddCorrRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/AddCorrRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/AddCorrRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/AddCorrRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/AddEdgeRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/AddEdgeRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/AddEdgeRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/AddEdgeRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/AddEdgeRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/AddEdgeRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/AddEdgeRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/AddEdgeRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/ContextWinsRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/ContextWinsRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/ContextWinsRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/ContextWinsRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/ContextWinsRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/ContextWinsRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/ContextWinsRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/ContextWinsRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/CreateNodeRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/CreateNodeRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/CreateNodeRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/CreateNodeRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/CreateNodeRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/CreateNodeRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/CreateNodeRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/CreateNodeRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/DeleteCorrRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/DeleteCorrRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/DeleteCorrRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/DeleteCorrRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/DeleteCorrRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/DeleteCorrRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/DeleteCorrRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/DeleteCorrRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/DeleteEdgeRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/DeleteEdgeRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/DeleteEdgeRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/DeleteEdgeRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/DeleteEdgeRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/DeleteEdgeRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/DeleteEdgeRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/DeleteEdgeRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/ReplaceNodeRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/ReplaceNodeRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/ReplaceNodeRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/ReplaceNodeRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/ReplaceNodeRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/ReplaceNodeRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/ReplaceNodeRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/ReplaceNodeRule"/>
  </importInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/FileToPFileRule/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;file&quot;, file);&#xA;match.registerObject(&quot;folder&quot;, folder);&#xA;">
    <eOperation href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/FileToPFileRule/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/FileToPFileRule/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;file&quot;,file);&#xD;&#xA;isApplicableMatch.registerObject(&quot;folder&quot;,folder);&#xD;&#xA;isApplicableMatch.registerObject(&quot;folderToPseudoFolder&quot;,folderToPseudoFolder);&#xD;&#xA;isApplicableMatch.registerObject(&quot;pseudoFolder&quot;,pseudoFolder);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/FileToPFileRule/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/FileToPFileRule/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;file&quot;, file);&#xA;ruleresult.registerObject(&quot;fileToPseudoFile&quot;, fileToPseudoFile);&#xA;ruleresult.registerObject(&quot;folder&quot;, folder);&#xA;ruleresult.registerObject(&quot;folderToPseudoFolder&quot;, folderToPseudoFolder);&#xA;ruleresult.registerObject(&quot;pseudoFile&quot;, pseudoFile);&#xA;ruleresult.registerObject(&quot;pseudoFolder&quot;, pseudoFolder);&#xA;">
    <eOperation href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/FileToPFileRule/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;file&quot;).eClass()).equals(&quot;MocaTree.File.&quot;);">
    <eOperation href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/FileToPFileRule/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/FileToPFileRule/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;pseudoFile&quot;, pseudoFile);&#xA;match.registerObject(&quot;pseudoFolder&quot;, pseudoFolder);&#xA;">
    <eOperation href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/FileToPFileRule/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/FileToPFileRule/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;folder&quot;,folder);&#xD;&#xA;isApplicableMatch.registerObject(&quot;folderToPseudoFolder&quot;,folderToPseudoFolder);&#xD;&#xA;isApplicableMatch.registerObject(&quot;pseudoFile&quot;,pseudoFile);&#xD;&#xA;isApplicableMatch.registerObject(&quot;pseudoFolder&quot;,pseudoFolder);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/FileToPFileRule/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/FileToPFileRule/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;file&quot;, file);&#xA;ruleresult.registerObject(&quot;fileToPseudoFile&quot;, fileToPseudoFile);&#xA;ruleresult.registerObject(&quot;folder&quot;, folder);&#xA;ruleresult.registerObject(&quot;folderToPseudoFolder&quot;, folderToPseudoFolder);&#xA;ruleresult.registerObject(&quot;pseudoFile&quot;, pseudoFile);&#xA;ruleresult.registerObject(&quot;pseudoFolder&quot;, pseudoFolder);&#xA;">
    <eOperation href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/FileToPFileRule/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;pseudoFile&quot;).eClass()).equals(&quot;RefinementTestLanguage.PseudoFile.&quot;);">
    <eOperation href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/FileToPFileRule/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/FolderToPFolderRule/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;folder&quot;, folder);&#xA;">
    <eOperation href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/FolderToPFolderRule/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/FolderToPFolderRule/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;folder&quot;,folder);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/FolderToPFolderRule/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/FolderToPFolderRule/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;folder&quot;, folder);&#xA;ruleresult.registerObject(&quot;folderToPseudoFolder&quot;, folderToPseudoFolder);&#xA;ruleresult.registerObject(&quot;pseudoFolder&quot;, pseudoFolder);&#xA;">
    <eOperation href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/FolderToPFolderRule/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;folder&quot;).eClass()).equals(&quot;MocaTree.Folder.&quot;);">
    <eOperation href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/FolderToPFolderRule/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/FolderToPFolderRule/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;pseudoFolder&quot;, pseudoFolder);&#xA;">
    <eOperation href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/FolderToPFolderRule/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/FolderToPFolderRule/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;pseudoFolder&quot;,pseudoFolder);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/FolderToPFolderRule/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/FolderToPFolderRule/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;folder&quot;, folder);&#xA;ruleresult.registerObject(&quot;folderToPseudoFolder&quot;, folderToPseudoFolder);&#xA;ruleresult.registerObject(&quot;pseudoFolder&quot;, pseudoFolder);&#xA;">
    <eOperation href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/FolderToPFolderRule/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;pseudoFolder&quot;).eClass()).equals(&quot;RefinementTestLanguage.PseudoFolder.&quot;);">
    <eOperation href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/FolderToPFolderRule/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/NodeToPNodeRule/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;file&quot;, file);&#xA;match.registerObject(&quot;folder&quot;, folder);&#xA;match.registerObject(&quot;node&quot;, node);&#xA;">
    <eOperation href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/NodeToPNodeRule/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/NodeToPNodeRule/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;file&quot;,file);&#xD;&#xA;isApplicableMatch.registerObject(&quot;fileToPseudoFile&quot;,fileToPseudoFile);&#xD;&#xA;isApplicableMatch.registerObject(&quot;folder&quot;,folder);&#xD;&#xA;isApplicableMatch.registerObject(&quot;folderToPseudoFolder&quot;,folderToPseudoFolder);&#xD;&#xA;isApplicableMatch.registerObject(&quot;node&quot;,node);&#xD;&#xA;isApplicableMatch.registerObject(&quot;pseudoFile&quot;,pseudoFile);&#xD;&#xA;isApplicableMatch.registerObject(&quot;pseudoFolder&quot;,pseudoFolder);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/NodeToPNodeRule/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/NodeToPNodeRule/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;file&quot;, file);&#xA;ruleresult.registerObject(&quot;fileToPseudoFile&quot;, fileToPseudoFile);&#xA;ruleresult.registerObject(&quot;folder&quot;, folder);&#xA;ruleresult.registerObject(&quot;folderToPseudoFolder&quot;, folderToPseudoFolder);&#xA;ruleresult.registerObject(&quot;node&quot;, node);&#xA;ruleresult.registerObject(&quot;nodeToPseudoNode&quot;, nodeToPseudoNode);&#xA;ruleresult.registerObject(&quot;pseudoFile&quot;, pseudoFile);&#xA;ruleresult.registerObject(&quot;pseudoFolder&quot;, pseudoFolder);&#xA;ruleresult.registerObject(&quot;pseudoNode&quot;, pseudoNode);&#xA;">
    <eOperation href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/NodeToPNodeRule/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;node&quot;).eClass()).equals(&quot;MocaTree.Node.&quot;);">
    <eOperation href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/NodeToPNodeRule/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/NodeToPNodeRule/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;pseudoFile&quot;, pseudoFile);&#xA;match.registerObject(&quot;pseudoFolder&quot;, pseudoFolder);&#xA;match.registerObject(&quot;pseudoNode&quot;, pseudoNode);&#xA;">
    <eOperation href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/NodeToPNodeRule/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/NodeToPNodeRule/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;file&quot;,file);&#xD;&#xA;isApplicableMatch.registerObject(&quot;fileToPseudoFile&quot;,fileToPseudoFile);&#xD;&#xA;isApplicableMatch.registerObject(&quot;folder&quot;,folder);&#xD;&#xA;isApplicableMatch.registerObject(&quot;folderToPseudoFolder&quot;,folderToPseudoFolder);&#xD;&#xA;isApplicableMatch.registerObject(&quot;pseudoFile&quot;,pseudoFile);&#xD;&#xA;isApplicableMatch.registerObject(&quot;pseudoFolder&quot;,pseudoFolder);&#xD;&#xA;isApplicableMatch.registerObject(&quot;pseudoNode&quot;,pseudoNode);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/NodeToPNodeRule/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/NodeToPNodeRule/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;file&quot;, file);&#xA;ruleresult.registerObject(&quot;fileToPseudoFile&quot;, fileToPseudoFile);&#xA;ruleresult.registerObject(&quot;folder&quot;, folder);&#xA;ruleresult.registerObject(&quot;folderToPseudoFolder&quot;, folderToPseudoFolder);&#xA;ruleresult.registerObject(&quot;node&quot;, node);&#xA;ruleresult.registerObject(&quot;nodeToPseudoNode&quot;, nodeToPseudoNode);&#xA;ruleresult.registerObject(&quot;pseudoFile&quot;, pseudoFile);&#xA;ruleresult.registerObject(&quot;pseudoFolder&quot;, pseudoFolder);&#xA;ruleresult.registerObject(&quot;pseudoNode&quot;, pseudoNode);&#xA;">
    <eOperation href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/NodeToPNodeRule/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;pseudoNode&quot;).eClass()).equals(&quot;RefinementTestLanguage.PseudoNode.&quot;);">
    <eOperation href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/NodeToPNodeRule/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/AddCorrRule/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;node&quot;, node);&#xA;match.registerObject(&quot;file&quot;, file);&#xA;match.registerObject(&quot;folder&quot;, folder);&#xA;">
    <eOperation href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/AddCorrRule/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/AddCorrRule/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;folderToPseudoFolder&quot;,folderToPseudoFolder);&#xD;&#xA;isApplicableMatch.registerObject(&quot;node&quot;,node);&#xD;&#xA;isApplicableMatch.registerObject(&quot;file&quot;,file);&#xD;&#xA;isApplicableMatch.registerObject(&quot;folder&quot;,folder);&#xD;&#xA;isApplicableMatch.registerObject(&quot;fileToPseudoFile&quot;,fileToPseudoFile);&#xD;&#xA;isApplicableMatch.registerObject(&quot;pseudoFile&quot;,pseudoFile);&#xD;&#xA;isApplicableMatch.registerObject(&quot;pseudoFolder&quot;,pseudoFolder);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/AddCorrRule/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/AddCorrRule/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;folderToPseudoFolder&quot;, folderToPseudoFolder);&#xA;ruleresult.registerObject(&quot;node&quot;, node);&#xA;ruleresult.registerObject(&quot;nodeToPseudoNode&quot;, nodeToPseudoNode);&#xA;ruleresult.registerObject(&quot;file&quot;, file);&#xA;ruleresult.registerObject(&quot;folder&quot;, folder);&#xA;ruleresult.registerObject(&quot;pseudoNode&quot;, pseudoNode);&#xA;ruleresult.registerObject(&quot;fileToPseudoFile&quot;, fileToPseudoFile);&#xA;ruleresult.registerObject(&quot;pseudoFile&quot;, pseudoFile);&#xA;ruleresult.registerObject(&quot;pseudoFolder&quot;, pseudoFolder);&#xA;ruleresult.registerObject(&quot;node2ToPseudoNode&quot;, node2ToPseudoNode);&#xA;ruleresult.registerObject(&quot;pseudoNode2&quot;, pseudoNode2);&#xA;">
    <eOperation href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/AddCorrRule/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;node&quot;).eClass()).equals(&quot;MocaTree.Node.&quot;);">
    <eOperation href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/AddCorrRule/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/AddCorrRule/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;pseudoNode&quot;, pseudoNode);&#xA;match.registerObject(&quot;pseudoFile&quot;, pseudoFile);&#xA;match.registerObject(&quot;pseudoFolder&quot;, pseudoFolder);&#xA;match.registerObject(&quot;pseudoNode2&quot;, pseudoNode2);&#xA;">
    <eOperation href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/AddCorrRule/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/AddCorrRule/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;folderToPseudoFolder&quot;,folderToPseudoFolder);&#xD;&#xA;isApplicableMatch.registerObject(&quot;file&quot;,file);&#xD;&#xA;isApplicableMatch.registerObject(&quot;folder&quot;,folder);&#xD;&#xA;isApplicableMatch.registerObject(&quot;pseudoNode&quot;,pseudoNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;fileToPseudoFile&quot;,fileToPseudoFile);&#xD;&#xA;isApplicableMatch.registerObject(&quot;pseudoFile&quot;,pseudoFile);&#xD;&#xA;isApplicableMatch.registerObject(&quot;pseudoFolder&quot;,pseudoFolder);&#xD;&#xA;isApplicableMatch.registerObject(&quot;pseudoNode2&quot;,pseudoNode2);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/AddCorrRule/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/AddCorrRule/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;folderToPseudoFolder&quot;, folderToPseudoFolder);&#xA;ruleresult.registerObject(&quot;node&quot;, node);&#xA;ruleresult.registerObject(&quot;nodeToPseudoNode&quot;, nodeToPseudoNode);&#xA;ruleresult.registerObject(&quot;file&quot;, file);&#xA;ruleresult.registerObject(&quot;folder&quot;, folder);&#xA;ruleresult.registerObject(&quot;pseudoNode&quot;, pseudoNode);&#xA;ruleresult.registerObject(&quot;fileToPseudoFile&quot;, fileToPseudoFile);&#xA;ruleresult.registerObject(&quot;pseudoFile&quot;, pseudoFile);&#xA;ruleresult.registerObject(&quot;pseudoFolder&quot;, pseudoFolder);&#xA;ruleresult.registerObject(&quot;node2ToPseudoNode&quot;, node2ToPseudoNode);&#xA;ruleresult.registerObject(&quot;pseudoNode2&quot;, pseudoNode2);&#xA;">
    <eOperation href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/AddCorrRule/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;pseudoNode&quot;).eClass()).equals(&quot;RefinementTestLanguage.PseudoNode.&quot;) &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;pseudoNode2&quot;).eClass()).equals(&quot;RefinementTestLanguage.PseudoNode.&quot;);">
    <eOperation href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/AddCorrRule/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/AddEdgeRule/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;node&quot;, node);&#xA;match.registerObject(&quot;file&quot;, file);&#xA;match.registerObject(&quot;folder&quot;, folder);&#xA;">
    <eOperation href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/AddEdgeRule/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/AddEdgeRule/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;folderToPseudoFolder&quot;,folderToPseudoFolder);&#xD;&#xA;isApplicableMatch.registerObject(&quot;node&quot;,node);&#xD;&#xA;isApplicableMatch.registerObject(&quot;file&quot;,file);&#xD;&#xA;isApplicableMatch.registerObject(&quot;folder&quot;,folder);&#xD;&#xA;isApplicableMatch.registerObject(&quot;fileToPseudoFile&quot;,fileToPseudoFile);&#xD;&#xA;isApplicableMatch.registerObject(&quot;pseudoFile&quot;,pseudoFile);&#xD;&#xA;isApplicableMatch.registerObject(&quot;pseudoFolder&quot;,pseudoFolder);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/AddEdgeRule/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/AddEdgeRule/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;folderToPseudoFolder&quot;, folderToPseudoFolder);&#xA;ruleresult.registerObject(&quot;node&quot;, node);&#xA;ruleresult.registerObject(&quot;nodeToPseudoNode&quot;, nodeToPseudoNode);&#xA;ruleresult.registerObject(&quot;file&quot;, file);&#xA;ruleresult.registerObject(&quot;folder&quot;, folder);&#xA;ruleresult.registerObject(&quot;pseudoNode&quot;, pseudoNode);&#xA;ruleresult.registerObject(&quot;fileToPseudoFile&quot;, fileToPseudoFile);&#xA;ruleresult.registerObject(&quot;pseudoFile&quot;, pseudoFile);&#xA;ruleresult.registerObject(&quot;pseudoFolder&quot;, pseudoFolder);&#xA;">
    <eOperation href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/AddEdgeRule/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;node&quot;).eClass()).equals(&quot;MocaTree.Node.&quot;);">
    <eOperation href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/AddEdgeRule/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/AddEdgeRule/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;pseudoNode&quot;, pseudoNode);&#xA;match.registerObject(&quot;pseudoFile&quot;, pseudoFile);&#xA;match.registerObject(&quot;pseudoFolder&quot;, pseudoFolder);&#xA;">
    <eOperation href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/AddEdgeRule/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/AddEdgeRule/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;folderToPseudoFolder&quot;,folderToPseudoFolder);&#xD;&#xA;isApplicableMatch.registerObject(&quot;file&quot;,file);&#xD;&#xA;isApplicableMatch.registerObject(&quot;folder&quot;,folder);&#xD;&#xA;isApplicableMatch.registerObject(&quot;pseudoNode&quot;,pseudoNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;fileToPseudoFile&quot;,fileToPseudoFile);&#xD;&#xA;isApplicableMatch.registerObject(&quot;pseudoFile&quot;,pseudoFile);&#xD;&#xA;isApplicableMatch.registerObject(&quot;pseudoFolder&quot;,pseudoFolder);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/AddEdgeRule/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/AddEdgeRule/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;folderToPseudoFolder&quot;, folderToPseudoFolder);&#xA;ruleresult.registerObject(&quot;node&quot;, node);&#xA;ruleresult.registerObject(&quot;nodeToPseudoNode&quot;, nodeToPseudoNode);&#xA;ruleresult.registerObject(&quot;file&quot;, file);&#xA;ruleresult.registerObject(&quot;folder&quot;, folder);&#xA;ruleresult.registerObject(&quot;pseudoNode&quot;, pseudoNode);&#xA;ruleresult.registerObject(&quot;fileToPseudoFile&quot;, fileToPseudoFile);&#xA;ruleresult.registerObject(&quot;pseudoFile&quot;, pseudoFile);&#xA;ruleresult.registerObject(&quot;pseudoFolder&quot;, pseudoFolder);&#xA;">
    <eOperation href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/AddEdgeRule/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;pseudoNode&quot;).eClass()).equals(&quot;RefinementTestLanguage.PseudoNode.&quot;);">
    <eOperation href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/AddEdgeRule/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/ContextWinsRule/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;node&quot;, node);&#xA;match.registerObject(&quot;file&quot;, file);&#xA;match.registerObject(&quot;folder&quot;, folder);&#xA;">
    <eOperation href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/ContextWinsRule/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/ContextWinsRule/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;folderToPseudoFolder&quot;,folderToPseudoFolder);&#xD;&#xA;isApplicableMatch.registerObject(&quot;node&quot;,node);&#xD;&#xA;isApplicableMatch.registerObject(&quot;file&quot;,file);&#xD;&#xA;isApplicableMatch.registerObject(&quot;folder&quot;,folder);&#xD;&#xA;isApplicableMatch.registerObject(&quot;fileToPseudoFile&quot;,fileToPseudoFile);&#xD;&#xA;isApplicableMatch.registerObject(&quot;pseudoFile&quot;,pseudoFile);&#xD;&#xA;isApplicableMatch.registerObject(&quot;pseudoFolder&quot;,pseudoFolder);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/ContextWinsRule/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/ContextWinsRule/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;folderToPseudoFolder&quot;, folderToPseudoFolder);&#xA;ruleresult.registerObject(&quot;node&quot;, node);&#xA;ruleresult.registerObject(&quot;nodeToPseudoNode&quot;, nodeToPseudoNode);&#xA;ruleresult.registerObject(&quot;file&quot;, file);&#xA;ruleresult.registerObject(&quot;folder&quot;, folder);&#xA;ruleresult.registerObject(&quot;pseudoNode&quot;, pseudoNode);&#xA;ruleresult.registerObject(&quot;fileToPseudoFile&quot;, fileToPseudoFile);&#xA;ruleresult.registerObject(&quot;pseudoFile&quot;, pseudoFile);&#xA;ruleresult.registerObject(&quot;pseudoFolder&quot;, pseudoFolder);&#xA;">
    <eOperation href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/ContextWinsRule/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;node&quot;).eClass()).equals(&quot;MocaTree.Node.&quot;);">
    <eOperation href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/ContextWinsRule/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/ContextWinsRule/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;pseudoNode&quot;, pseudoNode);&#xA;match.registerObject(&quot;pseudoFile&quot;, pseudoFile);&#xA;match.registerObject(&quot;pseudoFolder&quot;, pseudoFolder);&#xA;">
    <eOperation href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/ContextWinsRule/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/ContextWinsRule/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;folderToPseudoFolder&quot;,folderToPseudoFolder);&#xD;&#xA;isApplicableMatch.registerObject(&quot;file&quot;,file);&#xD;&#xA;isApplicableMatch.registerObject(&quot;folder&quot;,folder);&#xD;&#xA;isApplicableMatch.registerObject(&quot;pseudoNode&quot;,pseudoNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;fileToPseudoFile&quot;,fileToPseudoFile);&#xD;&#xA;isApplicableMatch.registerObject(&quot;pseudoFile&quot;,pseudoFile);&#xD;&#xA;isApplicableMatch.registerObject(&quot;pseudoFolder&quot;,pseudoFolder);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/ContextWinsRule/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/ContextWinsRule/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;folderToPseudoFolder&quot;, folderToPseudoFolder);&#xA;ruleresult.registerObject(&quot;node&quot;, node);&#xA;ruleresult.registerObject(&quot;nodeToPseudoNode&quot;, nodeToPseudoNode);&#xA;ruleresult.registerObject(&quot;file&quot;, file);&#xA;ruleresult.registerObject(&quot;folder&quot;, folder);&#xA;ruleresult.registerObject(&quot;pseudoNode&quot;, pseudoNode);&#xA;ruleresult.registerObject(&quot;fileToPseudoFile&quot;, fileToPseudoFile);&#xA;ruleresult.registerObject(&quot;pseudoFile&quot;, pseudoFile);&#xA;ruleresult.registerObject(&quot;pseudoFolder&quot;, pseudoFolder);&#xA;">
    <eOperation href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/ContextWinsRule/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;pseudoNode&quot;).eClass()).equals(&quot;RefinementTestLanguage.PseudoNode.&quot;);">
    <eOperation href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/ContextWinsRule/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/CreateNodeRule/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;node&quot;, node);&#xA;match.registerObject(&quot;file&quot;, file);&#xA;match.registerObject(&quot;folder&quot;, folder);&#xA;">
    <eOperation href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/CreateNodeRule/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/CreateNodeRule/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;folderToPseudoFolder&quot;,folderToPseudoFolder);&#xD;&#xA;isApplicableMatch.registerObject(&quot;node&quot;,node);&#xD;&#xA;isApplicableMatch.registerObject(&quot;file&quot;,file);&#xD;&#xA;isApplicableMatch.registerObject(&quot;folder&quot;,folder);&#xD;&#xA;isApplicableMatch.registerObject(&quot;fileToPseudoFile&quot;,fileToPseudoFile);&#xD;&#xA;isApplicableMatch.registerObject(&quot;pseudoFile&quot;,pseudoFile);&#xD;&#xA;isApplicableMatch.registerObject(&quot;pseudoFolder&quot;,pseudoFolder);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/CreateNodeRule/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/CreateNodeRule/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;folderToPseudoFolder&quot;, folderToPseudoFolder);&#xA;ruleresult.registerObject(&quot;node&quot;, node);&#xA;ruleresult.registerObject(&quot;nodeToPseudoNode&quot;, nodeToPseudoNode);&#xA;ruleresult.registerObject(&quot;file&quot;, file);&#xA;ruleresult.registerObject(&quot;folder&quot;, folder);&#xA;ruleresult.registerObject(&quot;pseudoNode&quot;, pseudoNode);&#xA;ruleresult.registerObject(&quot;fileToPseudoFile&quot;, fileToPseudoFile);&#xA;ruleresult.registerObject(&quot;pseudoFile&quot;, pseudoFile);&#xA;ruleresult.registerObject(&quot;pseudoFolder&quot;, pseudoFolder);&#xA;ruleresult.registerObject(&quot;pseudoNode2&quot;, pseudoNode2);&#xA;">
    <eOperation href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/CreateNodeRule/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;node&quot;).eClass()).equals(&quot;MocaTree.Node.&quot;);">
    <eOperation href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/CreateNodeRule/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/CreateNodeRule/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;pseudoNode&quot;, pseudoNode);&#xA;match.registerObject(&quot;pseudoFile&quot;, pseudoFile);&#xA;match.registerObject(&quot;pseudoFolder&quot;, pseudoFolder);&#xA;match.registerObject(&quot;pseudoNode2&quot;, pseudoNode2);&#xA;">
    <eOperation href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/CreateNodeRule/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/CreateNodeRule/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;folderToPseudoFolder&quot;,folderToPseudoFolder);&#xD;&#xA;isApplicableMatch.registerObject(&quot;file&quot;,file);&#xD;&#xA;isApplicableMatch.registerObject(&quot;folder&quot;,folder);&#xD;&#xA;isApplicableMatch.registerObject(&quot;pseudoNode&quot;,pseudoNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;fileToPseudoFile&quot;,fileToPseudoFile);&#xD;&#xA;isApplicableMatch.registerObject(&quot;pseudoFile&quot;,pseudoFile);&#xD;&#xA;isApplicableMatch.registerObject(&quot;pseudoFolder&quot;,pseudoFolder);&#xD;&#xA;isApplicableMatch.registerObject(&quot;pseudoNode2&quot;,pseudoNode2);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/CreateNodeRule/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/CreateNodeRule/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;folderToPseudoFolder&quot;, folderToPseudoFolder);&#xA;ruleresult.registerObject(&quot;node&quot;, node);&#xA;ruleresult.registerObject(&quot;nodeToPseudoNode&quot;, nodeToPseudoNode);&#xA;ruleresult.registerObject(&quot;file&quot;, file);&#xA;ruleresult.registerObject(&quot;folder&quot;, folder);&#xA;ruleresult.registerObject(&quot;pseudoNode&quot;, pseudoNode);&#xA;ruleresult.registerObject(&quot;fileToPseudoFile&quot;, fileToPseudoFile);&#xA;ruleresult.registerObject(&quot;pseudoFile&quot;, pseudoFile);&#xA;ruleresult.registerObject(&quot;pseudoFolder&quot;, pseudoFolder);&#xA;ruleresult.registerObject(&quot;pseudoNode2&quot;, pseudoNode2);&#xA;">
    <eOperation href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/CreateNodeRule/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;pseudoNode&quot;).eClass()).equals(&quot;RefinementTestLanguage.PseudoNode.&quot;) &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;pseudoNode2&quot;).eClass()).equals(&quot;RefinementTestLanguage.PseudoNode.&quot;);">
    <eOperation href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/CreateNodeRule/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/DeleteCorrRule/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;node&quot;, node);&#xA;match.registerObject(&quot;file&quot;, file);&#xA;match.registerObject(&quot;folder&quot;, folder);&#xA;">
    <eOperation href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/DeleteCorrRule/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/DeleteCorrRule/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;folderToPseudoFolder&quot;,folderToPseudoFolder);&#xD;&#xA;isApplicableMatch.registerObject(&quot;node&quot;,node);&#xD;&#xA;isApplicableMatch.registerObject(&quot;file&quot;,file);&#xD;&#xA;isApplicableMatch.registerObject(&quot;folder&quot;,folder);&#xD;&#xA;isApplicableMatch.registerObject(&quot;fileToPseudoFile&quot;,fileToPseudoFile);&#xD;&#xA;isApplicableMatch.registerObject(&quot;pseudoFile&quot;,pseudoFile);&#xD;&#xA;isApplicableMatch.registerObject(&quot;pseudoFolder&quot;,pseudoFolder);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/DeleteCorrRule/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/DeleteCorrRule/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;folderToPseudoFolder&quot;, folderToPseudoFolder);&#xA;ruleresult.registerObject(&quot;node&quot;, node);&#xA;ruleresult.registerObject(&quot;nodeToPseudoNode&quot;, nodeToPseudoNode);&#xA;ruleresult.registerObject(&quot;file&quot;, file);&#xA;ruleresult.registerObject(&quot;folder&quot;, folder);&#xA;ruleresult.registerObject(&quot;pseudoNode&quot;, pseudoNode);&#xA;ruleresult.registerObject(&quot;fileToPseudoFile&quot;, fileToPseudoFile);&#xA;ruleresult.registerObject(&quot;pseudoFile&quot;, pseudoFile);&#xA;ruleresult.registerObject(&quot;pseudoFolder&quot;, pseudoFolder);&#xA;ruleresult.registerObject(&quot;pseudoNode2&quot;, pseudoNode2);&#xA;ruleresult.registerObject(&quot;node2ToPseudoNode&quot;, node2ToPseudoNode);&#xA;">
    <eOperation href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/DeleteCorrRule/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;node&quot;).eClass()).equals(&quot;MocaTree.Node.&quot;);">
    <eOperation href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/DeleteCorrRule/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/DeleteCorrRule/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;pseudoNode&quot;, pseudoNode);&#xA;match.registerObject(&quot;pseudoFile&quot;, pseudoFile);&#xA;match.registerObject(&quot;pseudoFolder&quot;, pseudoFolder);&#xA;match.registerObject(&quot;pseudoNode2&quot;, pseudoNode2);&#xA;">
    <eOperation href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/DeleteCorrRule/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/DeleteCorrRule/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;folderToPseudoFolder&quot;,folderToPseudoFolder);&#xD;&#xA;isApplicableMatch.registerObject(&quot;file&quot;,file);&#xD;&#xA;isApplicableMatch.registerObject(&quot;folder&quot;,folder);&#xD;&#xA;isApplicableMatch.registerObject(&quot;pseudoNode&quot;,pseudoNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;fileToPseudoFile&quot;,fileToPseudoFile);&#xD;&#xA;isApplicableMatch.registerObject(&quot;pseudoFile&quot;,pseudoFile);&#xD;&#xA;isApplicableMatch.registerObject(&quot;pseudoFolder&quot;,pseudoFolder);&#xD;&#xA;isApplicableMatch.registerObject(&quot;pseudoNode2&quot;,pseudoNode2);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/DeleteCorrRule/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/DeleteCorrRule/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;folderToPseudoFolder&quot;, folderToPseudoFolder);&#xA;ruleresult.registerObject(&quot;node&quot;, node);&#xA;ruleresult.registerObject(&quot;nodeToPseudoNode&quot;, nodeToPseudoNode);&#xA;ruleresult.registerObject(&quot;file&quot;, file);&#xA;ruleresult.registerObject(&quot;folder&quot;, folder);&#xA;ruleresult.registerObject(&quot;pseudoNode&quot;, pseudoNode);&#xA;ruleresult.registerObject(&quot;fileToPseudoFile&quot;, fileToPseudoFile);&#xA;ruleresult.registerObject(&quot;pseudoFile&quot;, pseudoFile);&#xA;ruleresult.registerObject(&quot;pseudoFolder&quot;, pseudoFolder);&#xA;ruleresult.registerObject(&quot;pseudoNode2&quot;, pseudoNode2);&#xA;ruleresult.registerObject(&quot;node2ToPseudoNode&quot;, node2ToPseudoNode);&#xA;">
    <eOperation href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/DeleteCorrRule/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;pseudoNode&quot;).eClass()).equals(&quot;RefinementTestLanguage.PseudoNode.&quot;) &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;pseudoNode2&quot;).eClass()).equals(&quot;RefinementTestLanguage.PseudoNode.&quot;);">
    <eOperation href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/DeleteCorrRule/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/DeleteEdgeRule/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;node&quot;, node);&#xA;match.registerObject(&quot;file&quot;, file);&#xA;match.registerObject(&quot;folder&quot;, folder);&#xA;">
    <eOperation href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/DeleteEdgeRule/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/DeleteEdgeRule/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;folderToPseudoFolder&quot;,folderToPseudoFolder);&#xD;&#xA;isApplicableMatch.registerObject(&quot;node&quot;,node);&#xD;&#xA;isApplicableMatch.registerObject(&quot;file&quot;,file);&#xD;&#xA;isApplicableMatch.registerObject(&quot;folder&quot;,folder);&#xD;&#xA;isApplicableMatch.registerObject(&quot;fileToPseudoFile&quot;,fileToPseudoFile);&#xD;&#xA;isApplicableMatch.registerObject(&quot;pseudoFile&quot;,pseudoFile);&#xD;&#xA;isApplicableMatch.registerObject(&quot;pseudoFolder&quot;,pseudoFolder);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/DeleteEdgeRule/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/DeleteEdgeRule/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;folderToPseudoFolder&quot;, folderToPseudoFolder);&#xA;ruleresult.registerObject(&quot;node&quot;, node);&#xA;ruleresult.registerObject(&quot;nodeToPseudoNode&quot;, nodeToPseudoNode);&#xA;ruleresult.registerObject(&quot;file&quot;, file);&#xA;ruleresult.registerObject(&quot;folder&quot;, folder);&#xA;ruleresult.registerObject(&quot;pseudoNode&quot;, pseudoNode);&#xA;ruleresult.registerObject(&quot;fileToPseudoFile&quot;, fileToPseudoFile);&#xA;ruleresult.registerObject(&quot;pseudoFile&quot;, pseudoFile);&#xA;ruleresult.registerObject(&quot;pseudoFolder&quot;, pseudoFolder);&#xA;">
    <eOperation href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/DeleteEdgeRule/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;node&quot;).eClass()).equals(&quot;MocaTree.Node.&quot;);">
    <eOperation href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/DeleteEdgeRule/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/DeleteEdgeRule/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;pseudoNode&quot;, pseudoNode);&#xA;match.registerObject(&quot;pseudoFile&quot;, pseudoFile);&#xA;match.registerObject(&quot;pseudoFolder&quot;, pseudoFolder);&#xA;">
    <eOperation href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/DeleteEdgeRule/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/DeleteEdgeRule/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;folderToPseudoFolder&quot;,folderToPseudoFolder);&#xD;&#xA;isApplicableMatch.registerObject(&quot;file&quot;,file);&#xD;&#xA;isApplicableMatch.registerObject(&quot;folder&quot;,folder);&#xD;&#xA;isApplicableMatch.registerObject(&quot;pseudoNode&quot;,pseudoNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;fileToPseudoFile&quot;,fileToPseudoFile);&#xD;&#xA;isApplicableMatch.registerObject(&quot;pseudoFile&quot;,pseudoFile);&#xD;&#xA;isApplicableMatch.registerObject(&quot;pseudoFolder&quot;,pseudoFolder);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/DeleteEdgeRule/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/DeleteEdgeRule/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;folderToPseudoFolder&quot;, folderToPseudoFolder);&#xA;ruleresult.registerObject(&quot;node&quot;, node);&#xA;ruleresult.registerObject(&quot;nodeToPseudoNode&quot;, nodeToPseudoNode);&#xA;ruleresult.registerObject(&quot;file&quot;, file);&#xA;ruleresult.registerObject(&quot;folder&quot;, folder);&#xA;ruleresult.registerObject(&quot;pseudoNode&quot;, pseudoNode);&#xA;ruleresult.registerObject(&quot;fileToPseudoFile&quot;, fileToPseudoFile);&#xA;ruleresult.registerObject(&quot;pseudoFile&quot;, pseudoFile);&#xA;ruleresult.registerObject(&quot;pseudoFolder&quot;, pseudoFolder);&#xA;">
    <eOperation href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/DeleteEdgeRule/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;pseudoNode&quot;).eClass()).equals(&quot;RefinementTestLanguage.PseudoNode.&quot;);">
    <eOperation href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/DeleteEdgeRule/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/ReplaceNodeRule/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;node&quot;, node);&#xA;match.registerObject(&quot;file&quot;, file);&#xA;match.registerObject(&quot;folder&quot;, folder);&#xA;">
    <eOperation href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/ReplaceNodeRule/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/ReplaceNodeRule/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;folderToPseudoFolder&quot;,folderToPseudoFolder);&#xD;&#xA;isApplicableMatch.registerObject(&quot;node&quot;,node);&#xD;&#xA;isApplicableMatch.registerObject(&quot;file&quot;,file);&#xD;&#xA;isApplicableMatch.registerObject(&quot;folder&quot;,folder);&#xD;&#xA;isApplicableMatch.registerObject(&quot;fileToPseudoFile&quot;,fileToPseudoFile);&#xD;&#xA;isApplicableMatch.registerObject(&quot;pseudoFile&quot;,pseudoFile);&#xD;&#xA;isApplicableMatch.registerObject(&quot;pseudoFolder&quot;,pseudoFolder);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/ReplaceNodeRule/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/ReplaceNodeRule/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;folderToPseudoFolder&quot;, folderToPseudoFolder);&#xA;ruleresult.registerObject(&quot;node&quot;, node);&#xA;ruleresult.registerObject(&quot;nodeToPseudoNode&quot;, nodeToPseudoNode);&#xA;ruleresult.registerObject(&quot;file&quot;, file);&#xA;ruleresult.registerObject(&quot;folder&quot;, folder);&#xA;ruleresult.registerObject(&quot;pseudoNode&quot;, pseudoNode);&#xA;ruleresult.registerObject(&quot;fileToPseudoFile&quot;, fileToPseudoFile);&#xA;ruleresult.registerObject(&quot;pseudoFile&quot;, pseudoFile);&#xA;ruleresult.registerObject(&quot;pseudoFolder&quot;, pseudoFolder);&#xA;">
    <eOperation href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/ReplaceNodeRule/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;node&quot;).eClass()).equals(&quot;MocaTree.Node.&quot;);">
    <eOperation href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/ReplaceNodeRule/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/ReplaceNodeRule/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;pseudoNode&quot;, pseudoNode);&#xA;match.registerObject(&quot;pseudoFile&quot;, pseudoFile);&#xA;match.registerObject(&quot;pseudoFolder&quot;, pseudoFolder);&#xA;">
    <eOperation href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/ReplaceNodeRule/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/ReplaceNodeRule/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;folderToPseudoFolder&quot;,folderToPseudoFolder);&#xD;&#xA;isApplicableMatch.registerObject(&quot;file&quot;,file);&#xD;&#xA;isApplicableMatch.registerObject(&quot;folder&quot;,folder);&#xD;&#xA;isApplicableMatch.registerObject(&quot;pseudoNode&quot;,pseudoNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;fileToPseudoFile&quot;,fileToPseudoFile);&#xD;&#xA;isApplicableMatch.registerObject(&quot;pseudoFile&quot;,pseudoFile);&#xD;&#xA;isApplicableMatch.registerObject(&quot;pseudoFolder&quot;,pseudoFolder);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/ReplaceNodeRule/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/ReplaceNodeRule/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;folderToPseudoFolder&quot;, folderToPseudoFolder);&#xA;ruleresult.registerObject(&quot;node&quot;, node);&#xA;ruleresult.registerObject(&quot;nodeToPseudoNode&quot;, nodeToPseudoNode);&#xA;ruleresult.registerObject(&quot;file&quot;, file);&#xA;ruleresult.registerObject(&quot;folder&quot;, folder);&#xA;ruleresult.registerObject(&quot;pseudoNode&quot;, pseudoNode);&#xA;ruleresult.registerObject(&quot;fileToPseudoFile&quot;, fileToPseudoFile);&#xA;ruleresult.registerObject(&quot;pseudoFile&quot;, pseudoFile);&#xA;ruleresult.registerObject(&quot;pseudoFolder&quot;, pseudoFolder);&#xA;">
    <eOperation href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/ReplaceNodeRule/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;pseudoNode&quot;).eClass()).equals(&quot;RefinementTestLanguage.PseudoNode.&quot;);">
    <eOperation href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/ReplaceNodeRule/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;FileToPFileRule&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/FileToPFileRule/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;FileToPFileRule&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/FileToPFileRule/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;FolderToPFolderRule&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/FolderToPFolderRule/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;FolderToPFolderRule&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/FolderToPFolderRule/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;NodeToPNodeRule&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/NodeToPNodeRule/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;NodeToPNodeRule&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/NodeToPNodeRule/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;AddCorrRule&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/AddCorrRule/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;AddCorrRule&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/AddCorrRule/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;AddEdgeRule&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/AddEdgeRule/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;AddEdgeRule&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/AddEdgeRule/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;ContextWinsRule&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/ContextWinsRule/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;ContextWinsRule&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/ContextWinsRule/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;CreateNodeRule&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/CreateNodeRule/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;CreateNodeRule&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/CreateNodeRule/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;DeleteCorrRule&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/DeleteCorrRule/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;DeleteCorrRule&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/DeleteCorrRule/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;DeleteEdgeRule&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/DeleteEdgeRule/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;DeleteEdgeRule&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/DeleteEdgeRule/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;ReplaceNodeRule&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/ReplaceNodeRule/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;ReplaceNodeRule&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/ReplaceNodeRule/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/FileToPFileRule/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/FileToPFileRule/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/FolderToPFolderRule/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/FolderToPFolderRule/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/NodeToPNodeRule/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/NodeToPNodeRule/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/AddCorrRule/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/AddCorrRule/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/AddEdgeRule/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/AddEdgeRule/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/ContextWinsRule/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/ContextWinsRule/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/CreateNodeRule/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/CreateNodeRule/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/DeleteCorrRule/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/DeleteCorrRule/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/DeleteEdgeRule/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/DeleteEdgeRule/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/ReplaceNodeRule/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/ReplaceNodeRule/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;folder&quot;,folder);&#xD;&#xA;isApplicableMatch.registerObject(&quot;folderToPseudoFolder&quot;,folderToPseudoFolder);&#xD;&#xA;isApplicableMatch.registerObject(&quot;pseudoFolder&quot;,pseudoFolder);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/FileToPFileRule/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/FileToPFileRule/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/FolderToPFolderRule/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/FolderToPFolderRule/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;file&quot;,file);&#xD;&#xA;isApplicableMatch.registerObject(&quot;fileToPseudoFile&quot;,fileToPseudoFile);&#xD;&#xA;isApplicableMatch.registerObject(&quot;folder&quot;,folder);&#xD;&#xA;isApplicableMatch.registerObject(&quot;folderToPseudoFolder&quot;,folderToPseudoFolder);&#xD;&#xA;isApplicableMatch.registerObject(&quot;pseudoFile&quot;,pseudoFile);&#xD;&#xA;isApplicableMatch.registerObject(&quot;pseudoFolder&quot;,pseudoFolder);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/NodeToPNodeRule/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/NodeToPNodeRule/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;folderToPseudoFolder&quot;,folderToPseudoFolder);&#xD;&#xA;isApplicableMatch.registerObject(&quot;file&quot;,file);&#xD;&#xA;isApplicableMatch.registerObject(&quot;folder&quot;,folder);&#xD;&#xA;isApplicableMatch.registerObject(&quot;fileToPseudoFile&quot;,fileToPseudoFile);&#xD;&#xA;isApplicableMatch.registerObject(&quot;pseudoFile&quot;,pseudoFile);&#xD;&#xA;isApplicableMatch.registerObject(&quot;pseudoFolder&quot;,pseudoFolder);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/AddCorrRule/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/AddCorrRule/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;folderToPseudoFolder&quot;,folderToPseudoFolder);&#xD;&#xA;isApplicableMatch.registerObject(&quot;file&quot;,file);&#xD;&#xA;isApplicableMatch.registerObject(&quot;folder&quot;,folder);&#xD;&#xA;isApplicableMatch.registerObject(&quot;fileToPseudoFile&quot;,fileToPseudoFile);&#xD;&#xA;isApplicableMatch.registerObject(&quot;pseudoFile&quot;,pseudoFile);&#xD;&#xA;isApplicableMatch.registerObject(&quot;pseudoFolder&quot;,pseudoFolder);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/AddEdgeRule/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/AddEdgeRule/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;folderToPseudoFolder&quot;,folderToPseudoFolder);&#xD;&#xA;isApplicableMatch.registerObject(&quot;file&quot;,file);&#xD;&#xA;isApplicableMatch.registerObject(&quot;folder&quot;,folder);&#xD;&#xA;isApplicableMatch.registerObject(&quot;fileToPseudoFile&quot;,fileToPseudoFile);&#xD;&#xA;isApplicableMatch.registerObject(&quot;pseudoFile&quot;,pseudoFile);&#xD;&#xA;isApplicableMatch.registerObject(&quot;pseudoFolder&quot;,pseudoFolder);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/ContextWinsRule/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/ContextWinsRule/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;folderToPseudoFolder&quot;,folderToPseudoFolder);&#xD;&#xA;isApplicableMatch.registerObject(&quot;file&quot;,file);&#xD;&#xA;isApplicableMatch.registerObject(&quot;folder&quot;,folder);&#xD;&#xA;isApplicableMatch.registerObject(&quot;fileToPseudoFile&quot;,fileToPseudoFile);&#xD;&#xA;isApplicableMatch.registerObject(&quot;pseudoFile&quot;,pseudoFile);&#xD;&#xA;isApplicableMatch.registerObject(&quot;pseudoFolder&quot;,pseudoFolder);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/CreateNodeRule/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/CreateNodeRule/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;folderToPseudoFolder&quot;,folderToPseudoFolder);&#xD;&#xA;isApplicableMatch.registerObject(&quot;file&quot;,file);&#xD;&#xA;isApplicableMatch.registerObject(&quot;folder&quot;,folder);&#xD;&#xA;isApplicableMatch.registerObject(&quot;fileToPseudoFile&quot;,fileToPseudoFile);&#xD;&#xA;isApplicableMatch.registerObject(&quot;pseudoFile&quot;,pseudoFile);&#xD;&#xA;isApplicableMatch.registerObject(&quot;pseudoFolder&quot;,pseudoFolder);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/DeleteCorrRule/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/DeleteCorrRule/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;folderToPseudoFolder&quot;,folderToPseudoFolder);&#xD;&#xA;isApplicableMatch.registerObject(&quot;file&quot;,file);&#xD;&#xA;isApplicableMatch.registerObject(&quot;folder&quot;,folder);&#xD;&#xA;isApplicableMatch.registerObject(&quot;fileToPseudoFile&quot;,fileToPseudoFile);&#xD;&#xA;isApplicableMatch.registerObject(&quot;pseudoFile&quot;,pseudoFile);&#xD;&#xA;isApplicableMatch.registerObject(&quot;pseudoFolder&quot;,pseudoFolder);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/DeleteEdgeRule/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/DeleteEdgeRule/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;folderToPseudoFolder&quot;,folderToPseudoFolder);&#xD;&#xA;isApplicableMatch.registerObject(&quot;file&quot;,file);&#xD;&#xA;isApplicableMatch.registerObject(&quot;folder&quot;,folder);&#xD;&#xA;isApplicableMatch.registerObject(&quot;fileToPseudoFile&quot;,fileToPseudoFile);&#xD;&#xA;isApplicableMatch.registerObject(&quot;pseudoFile&quot;,pseudoFile);&#xD;&#xA;isApplicableMatch.registerObject(&quot;pseudoFolder&quot;,pseudoFolder);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/ReplaceNodeRule/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/RefinementTestTGG/model/RefinementTestTGG.pre.ecore#//Rules/ReplaceNodeRule/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
</sdmUtil:CompilerInjection>
